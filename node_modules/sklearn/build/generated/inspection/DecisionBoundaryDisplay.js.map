{"version":3,"sources":["../../../src/generated/inspection/DecisionBoundaryDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Decisions boundary visualization.\n\n  It is recommended to use [`from_estimator`](https://scikit-learn.org/stable/modules/generated/#sklearn.inspection.DecisionBoundaryDisplay.from_estimator \"sklearn.inspection.DecisionBoundaryDisplay.from_estimator\") to create a [`DecisionBoundaryDisplay`](https://scikit-learn.org/stable/modules/generated/#sklearn.inspection.DecisionBoundaryDisplay \"sklearn.inspection.DecisionBoundaryDisplay\"). All parameters are stored as attributes.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.inspection.DecisionBoundaryDisplay.html)\n */\nexport class DecisionBoundaryDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      First output of [`meshgrid`](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html#numpy.meshgrid \"(in NumPy v2.1)\").\n     */\n    xx0?: NDArray[]\n\n    /**\n      Second output of [`meshgrid`](https://numpy.org/doc/stable/reference/generated/numpy.meshgrid.html#numpy.meshgrid \"(in NumPy v2.1)\").\n     */\n    xx1?: NDArray[]\n\n    /**\n      Values of the response function.\n     */\n    response?: NDArray[]\n\n    /**\n      Default label to place on x axis.\n     */\n    xlabel?: string\n\n    /**\n      Default label to place on y axis.\n     */\n    ylabel?: string\n  }) {\n    this.id = `DecisionBoundaryDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'DecisionBoundaryDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.inspection import DecisionBoundaryDisplay\ntry: bridgeDecisionBoundaryDisplay\nexcept NameError: bridgeDecisionBoundaryDisplay = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_DecisionBoundaryDisplay = {'xx0': np.array(${this.opts['xx0'] ?? undefined}) if ${this.opts['xx0'] !== undefined} else None, 'xx1': np.array(${this.opts['xx1'] ?? undefined}) if ${this.opts['xx1'] !== undefined} else None, 'response': np.array(${this.opts['response'] ?? undefined}) if ${this.opts['response'] !== undefined} else None, 'xlabel': ${this.opts['xlabel'] ?? undefined}, 'ylabel': ${this.opts['ylabel'] ?? undefined}}\n\nctor_DecisionBoundaryDisplay = {k: v for k, v in ctor_DecisionBoundaryDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDecisionBoundaryDisplay[${this.id}] = DecisionBoundaryDisplay(**ctor_DecisionBoundaryDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDecisionBoundaryDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot decision boundary given an estimator.\n\n    Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations).\n   */\n  async from_estimator(opts: {\n    /**\n      Trained estimator used to plot the decision boundary.\n     */\n    estimator?: any\n\n    /**\n      Input data that should be only 2-dimensional.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Number of grid points to use for plotting decision boundary. Higher values will make the plot look nicer but be slower to render.\n\n      @defaultValue `100`\n     */\n    grid_resolution?: number\n\n    /**\n      Extends the minimum and maximum values of X for evaluating the response function.\n\n      @defaultValue `1`\n     */\n    eps?: number\n\n    /**\n      Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: [`contourf`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf \"(in Matplotlib v3.9.2)\"), [`contour`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contour.html#matplotlib.pyplot.contour \"(in Matplotlib v3.9.2)\"), [`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh \"(in Matplotlib v3.9.2)\").\n\n      @defaultValue `'contourf'`\n     */\n    plot_method?: 'contourf' | 'contour' | 'pcolormesh'\n\n    /**\n      Specifies whether to use [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba), [decision_function](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-decision_function), [predict](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict) as the target response. If set to ‘auto’, the response method is tried in the following order: [decision_function](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-decision_function), [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba), [predict](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict). For multiclass problems, [predict](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict) is selected when `response_method=\"auto\"`.\n\n      @defaultValue `'auto'`\n     */\n    response_method?: 'auto' | 'predict_proba' | 'decision_function' | 'predict'\n\n    /**\n      The class considered when plotting the decision. If `undefined`, `estimator.classes_\\[1\\]` is considered as the positive class for binary classifiers. Must have an explicit value for multiclass classifiers when `response_method` is ‘predict_proba’ or ‘decision_function’.\n     */\n    class_of_interest?: number | boolean | string\n\n    /**\n      The label used for the x-axis. If `undefined`, an attempt is made to extract a label from `X` if it is a dataframe, otherwise an empty string is used.\n     */\n    xlabel?: string\n\n    /**\n      The label used for the y-axis. If `undefined`, an attempt is made to extract a label from `X` if it is a dataframe, otherwise an empty string is used.\n     */\n    ylabel?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keyword arguments to be passed to the `plot_method`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DecisionBoundaryDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DecisionBoundaryDisplay_from_estimator = {'estimator': ${opts['estimator'] ?? undefined}, 'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'grid_resolution': ${opts['grid_resolution'] ?? undefined}, 'eps': ${opts['eps'] ?? undefined}, 'plot_method': ${opts['plot_method'] ?? undefined}, 'response_method': ${opts['response_method'] ?? undefined}, 'class_of_interest': ${opts['class_of_interest'] ?? undefined}, 'xlabel': ${opts['xlabel'] ?? undefined}, 'ylabel': ${opts['ylabel'] ?? undefined}, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DecisionBoundaryDisplay_from_estimator = {k: v for k, v in pms_DecisionBoundaryDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DecisionBoundaryDisplay_from_estimator = bridgeDecisionBoundaryDisplay[${this.id}].from_estimator(**pms_DecisionBoundaryDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DecisionBoundaryDisplay_from_estimator.tolist() if hasattr(res_DecisionBoundaryDisplay_from_estimator, 'tolist') else res_DecisionBoundaryDisplay_from_estimator`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: {\n    /**\n      Plotting method to call when plotting the response. Please refer to the following matplotlib documentation for details: [`contourf`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf \"(in Matplotlib v3.9.2)\"), [`contour`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.contour.html#matplotlib.pyplot.contour \"(in Matplotlib v3.9.2)\"), [`pcolormesh`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pcolormesh.html#matplotlib.pyplot.pcolormesh \"(in Matplotlib v3.9.2)\").\n\n      @defaultValue `'contourf'`\n     */\n    plot_method?: 'contourf' | 'contour' | 'pcolormesh'\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Overwrite the x-axis label.\n     */\n    xlabel?: string\n\n    /**\n      Overwrite the y-axis label.\n     */\n    ylabel?: string\n\n    /**\n      Additional keyword arguments to be passed to the `plot_method`.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DecisionBoundaryDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DecisionBoundaryDisplay_plot = {'plot_method': ${opts['plot_method'] ?? undefined}, 'ax': ${opts['ax'] ?? undefined}, 'xlabel': ${opts['xlabel'] ?? undefined}, 'ylabel': ${opts['ylabel'] ?? undefined}, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DecisionBoundaryDisplay_plot = {k: v for k, v in pms_DecisionBoundaryDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DecisionBoundaryDisplay_plot = bridgeDecisionBoundaryDisplay[${this.id}].plot(**pms_DecisionBoundaryDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DecisionBoundaryDisplay_plot.tolist() if hasattr(res_DecisionBoundaryDisplay_plot, 'tolist') else res_DecisionBoundaryDisplay_plot`\n  }\n\n  /**\n    If `plot_method` is ‘contour’ or ‘contourf’, `surface_` is a [`QuadContourSet`](https://matplotlib.org/stable/api/contour_api.html#matplotlib.contour.QuadContourSet \"(in Matplotlib v3.9.2)\"). If `plot_method` is ‘pcolormesh’, `surface_` is a [`QuadMesh`](https://matplotlib.org/stable/api/collections_api.html#matplotlib.collections.QuadMesh \"(in Matplotlib v3.9.2)\").\n   */\n  get surface_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DecisionBoundaryDisplay must call init() before accessing surface_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DecisionBoundaryDisplay_surface_ = bridgeDecisionBoundaryDisplay[${this.id}].surface_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DecisionBoundaryDisplay_surface_.tolist() if hasattr(attr_DecisionBoundaryDisplay_surface_, 'tolist') else attr_DecisionBoundaryDisplay_surface_`\n    })()\n  }\n\n  /**\n    Axes with decision boundary.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DecisionBoundaryDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DecisionBoundaryDisplay_ax_ = bridgeDecisionBoundaryDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DecisionBoundaryDisplay_ax_.tolist() if hasattr(attr_DecisionBoundaryDisplay_ax_, 'tolist') else attr_DecisionBoundaryDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the decision boundary.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This DecisionBoundaryDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DecisionBoundaryDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DecisionBoundaryDisplay_figure_ = bridgeDecisionBoundaryDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DecisionBoundaryDisplay_figure_.tolist() if hasattr(attr_DecisionBoundaryDisplay_figure_, 'tolist') else attr_DecisionBoundaryDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}