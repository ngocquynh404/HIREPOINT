// src/generated/model_selection/TunedThresholdClassifierCV.ts
import crypto from "node:crypto";
var TunedThresholdClassifierCV = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `TunedThresholdClassifierCV${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "TunedThresholdClassifierCV.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.model_selection import TunedThresholdClassifierCV
try: bridgeTunedThresholdClassifierCV
except NameError: bridgeTunedThresholdClassifierCV = {}
`;
    await this._py.ex`ctor_TunedThresholdClassifierCV = {'estimator': ${this.opts["estimator"] ?? void 0}, 'scoring': ${this.opts["scoring"] ?? void 0}, 'response_method': ${this.opts["response_method"] ?? void 0}, 'thresholds': ${this.opts["thresholds"] ?? void 0}, 'cv': ${this.opts["cv"] ?? void 0}, 'refit': ${this.opts["refit"] ?? void 0}, 'n_jobs': ${this.opts["n_jobs"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'store_cv_results': ${this.opts["store_cv_results"] ?? void 0}}

ctor_TunedThresholdClassifierCV = {k: v for k, v in ctor_TunedThresholdClassifierCV.items() if v is not None}`;
    await this._py.ex`bridgeTunedThresholdClassifierCV[${this.id}] = TunedThresholdClassifierCV(**ctor_TunedThresholdClassifierCV)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeTunedThresholdClassifierCV[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Decision function for samples in `X` using the fitted estimator.
   */
  async decision_function(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before decision_function()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_decision_function = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TunedThresholdClassifierCV_decision_function = {k: v for k, v in pms_TunedThresholdClassifierCV_decision_function.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_decision_function = bridgeTunedThresholdClassifierCV[${this.id}].decision_function(**pms_TunedThresholdClassifierCV_decision_function)`;
    return this._py`res_TunedThresholdClassifierCV_decision_function.tolist() if hasattr(res_TunedThresholdClassifierCV_decision_function, 'tolist') else res_TunedThresholdClassifierCV_decision_function`;
  }
  /**
    Fit the classifier.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before fit()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'params': ${opts["params"] ?? void 0}}

pms_TunedThresholdClassifierCV_fit = {k: v for k, v in pms_TunedThresholdClassifierCV_fit.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_fit = bridgeTunedThresholdClassifierCV[${this.id}].fit(**pms_TunedThresholdClassifierCV_fit)`;
    return this._py`res_TunedThresholdClassifierCV_fit.tolist() if hasattr(res_TunedThresholdClassifierCV_fit, 'tolist') else res_TunedThresholdClassifierCV_fit`;
  }
  /**
      Get metadata routing of this object.
  
      Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
     */
  async get_metadata_routing(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before get_metadata_routing()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_get_metadata_routing = {'routing': ${opts["routing"] ?? void 0}}

pms_TunedThresholdClassifierCV_get_metadata_routing = {k: v for k, v in pms_TunedThresholdClassifierCV_get_metadata_routing.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_get_metadata_routing = bridgeTunedThresholdClassifierCV[${this.id}].get_metadata_routing(**pms_TunedThresholdClassifierCV_get_metadata_routing)`;
    return this._py`res_TunedThresholdClassifierCV_get_metadata_routing.tolist() if hasattr(res_TunedThresholdClassifierCV_get_metadata_routing, 'tolist') else res_TunedThresholdClassifierCV_get_metadata_routing`;
  }
  /**
    Predict the target of new samples.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before predict()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_predict = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TunedThresholdClassifierCV_predict = {k: v for k, v in pms_TunedThresholdClassifierCV_predict.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_predict = bridgeTunedThresholdClassifierCV[${this.id}].predict(**pms_TunedThresholdClassifierCV_predict)`;
    return this._py`res_TunedThresholdClassifierCV_predict.tolist() if hasattr(res_TunedThresholdClassifierCV_predict, 'tolist') else res_TunedThresholdClassifierCV_predict`;
  }
  /**
    Predict logarithm class probabilities for `X` using the fitted estimator.
   */
  async predict_log_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before predict_log_proba()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_predict_log_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TunedThresholdClassifierCV_predict_log_proba = {k: v for k, v in pms_TunedThresholdClassifierCV_predict_log_proba.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_predict_log_proba = bridgeTunedThresholdClassifierCV[${this.id}].predict_log_proba(**pms_TunedThresholdClassifierCV_predict_log_proba)`;
    return this._py`res_TunedThresholdClassifierCV_predict_log_proba.tolist() if hasattr(res_TunedThresholdClassifierCV_predict_log_proba, 'tolist') else res_TunedThresholdClassifierCV_predict_log_proba`;
  }
  /**
    Predict class probabilities for `X` using the fitted estimator.
   */
  async predict_proba(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before predict_proba()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_predict_proba = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None}

pms_TunedThresholdClassifierCV_predict_proba = {k: v for k, v in pms_TunedThresholdClassifierCV_predict_proba.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_predict_proba = bridgeTunedThresholdClassifierCV[${this.id}].predict_proba(**pms_TunedThresholdClassifierCV_predict_proba)`;
    return this._py`res_TunedThresholdClassifierCV_predict_proba.tolist() if hasattr(res_TunedThresholdClassifierCV_predict_proba, 'tolist') else res_TunedThresholdClassifierCV_predict_proba`;
  }
  /**
      Return the mean accuracy on the given test data and labels.
  
      In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before score()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_TunedThresholdClassifierCV_score = {k: v for k, v in pms_TunedThresholdClassifierCV_score.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_score = bridgeTunedThresholdClassifierCV[${this.id}].score(**pms_TunedThresholdClassifierCV_score)`;
    return this._py`res_TunedThresholdClassifierCV_score.tolist() if hasattr(res_TunedThresholdClassifierCV_score, 'tolist') else res_TunedThresholdClassifierCV_score`;
  }
  /**
      Request metadata passed to the `score` method.
  
      Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
  async set_score_request(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before set_score_request()"
      );
    }
    await this._py.ex`pms_TunedThresholdClassifierCV_set_score_request = {'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_TunedThresholdClassifierCV_set_score_request = {k: v for k, v in pms_TunedThresholdClassifierCV_set_score_request.items() if v is not None}`;
    await this._py.ex`res_TunedThresholdClassifierCV_set_score_request = bridgeTunedThresholdClassifierCV[${this.id}].set_score_request(**pms_TunedThresholdClassifierCV_set_score_request)`;
    return this._py`res_TunedThresholdClassifierCV_set_score_request.tolist() if hasattr(res_TunedThresholdClassifierCV_set_score_request, 'tolist') else res_TunedThresholdClassifierCV_set_score_request`;
  }
  /**
    The fitted classifier used when predicting.
   */
  get estimator_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing estimator_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_estimator_ = bridgeTunedThresholdClassifierCV[${this.id}].estimator_`;
      return this._py`attr_TunedThresholdClassifierCV_estimator_.tolist() if hasattr(attr_TunedThresholdClassifierCV_estimator_, 'tolist') else attr_TunedThresholdClassifierCV_estimator_`;
    })();
  }
  /**
    The new decision threshold.
   */
  get best_threshold_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing best_threshold_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_best_threshold_ = bridgeTunedThresholdClassifierCV[${this.id}].best_threshold_`;
      return this._py`attr_TunedThresholdClassifierCV_best_threshold_.tolist() if hasattr(attr_TunedThresholdClassifierCV_best_threshold_, 'tolist') else attr_TunedThresholdClassifierCV_best_threshold_`;
    })();
  }
  /**
    The optimal score of the objective metric, evaluated at `best_threshold_`.
   */
  get best_score_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing best_score_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_best_score_ = bridgeTunedThresholdClassifierCV[${this.id}].best_score_`;
      return this._py`attr_TunedThresholdClassifierCV_best_score_.tolist() if hasattr(attr_TunedThresholdClassifierCV_best_score_, 'tolist') else attr_TunedThresholdClassifierCV_best_score_`;
    })();
  }
  /**
    A dictionary containing the scores and thresholds computed during the cross-validation process. Only exist if `store_cv_results=True`. The keys are `"thresholds"` and `"scores"`.
   */
  get cv_results_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing cv_results_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_cv_results_ = bridgeTunedThresholdClassifierCV[${this.id}].cv_results_`;
      return this._py`attr_TunedThresholdClassifierCV_cv_results_.tolist() if hasattr(attr_TunedThresholdClassifierCV_cv_results_, 'tolist') else attr_TunedThresholdClassifierCV_cv_results_`;
    })();
  }
  /**
    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_n_features_in_ = bridgeTunedThresholdClassifierCV[${this.id}].n_features_in_`;
      return this._py`attr_TunedThresholdClassifierCV_n_features_in_.tolist() if hasattr(attr_TunedThresholdClassifierCV_n_features_in_, 'tolist') else attr_TunedThresholdClassifierCV_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This TunedThresholdClassifierCV instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "TunedThresholdClassifierCV must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_TunedThresholdClassifierCV_feature_names_in_ = bridgeTunedThresholdClassifierCV[${this.id}].feature_names_in_`;
      return this._py`attr_TunedThresholdClassifierCV_feature_names_in_.tolist() if hasattr(attr_TunedThresholdClassifierCV_feature_names_in_, 'tolist') else attr_TunedThresholdClassifierCV_feature_names_in_`;
    })();
  }
};
export {
  TunedThresholdClassifierCV
};
//# sourceMappingURL=TunedThresholdClassifierCV.js.map