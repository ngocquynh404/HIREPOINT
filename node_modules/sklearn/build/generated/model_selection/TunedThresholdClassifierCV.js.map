{"version":3,"sources":["../../../src/generated/model_selection/TunedThresholdClassifierCV.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Classifier that post-tunes the decision threshold using cross-validation.\n\n  This estimator post-tunes the decision threshold (cut-off point) that is used for converting posterior probability estimates (i.e. output of `predict_proba`) or decision scores (i.e. output of `decision_function`) into a class label. The tuning is done by optimizing a binary metric, potentially constrained by a another metric.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../classification_threshold.html#tunedthresholdclassifiercv).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TunedThresholdClassifierCV.html)\n */\nexport class TunedThresholdClassifierCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The classifier, fitted or not, for which we want to optimize the decision threshold used during `predict`.\n     */\n    estimator?: any\n\n    /**\n      The objective metric to be optimized. Can be one of:\n\n      @defaultValue `'balanced_accuracy'`\n     */\n    scoring?: string\n\n    /**\n      Methods by the classifier `estimator` corresponding to the decision function for which we want to find a threshold. It can be:\n\n      @defaultValue `'auto'`\n     */\n    response_method?: 'auto' | 'decision_function' | 'predict_proba'\n\n    /**\n      The number of decision threshold to use when discretizing the output of the classifier `method`. Pass an array-like to manually specify the thresholds to use.\n\n      @defaultValue `100`\n     */\n    thresholds?: number | ArrayLike\n\n    /**\n      Determines the cross-validation splitting strategy to train classifier. Possible inputs for cv are:\n     */\n    cv?: number | 'prefit'\n\n    /**\n      Whether or not to refit the classifier on the entire training set once the decision threshold has been found. Note that forcing `refit=False` on cross-validation having more than a single split will raise an error. Similarly, `refit=True` in conjunction with `cv=\"prefit\"` will raise an error.\n\n      @defaultValue `true`\n     */\n    refit?: boolean\n\n    /**\n      The number of jobs to run in parallel. When `cv` represents a cross-validation strategy, the fitting and scoring on each data split is done in parallel. `undefined` means 1 unless in a [`joblib.parallel_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend \"(in joblib v1.5.dev0)\") context. `\\-1` means using all processors. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-n_jobs) for more details.\n     */\n    n_jobs?: number\n\n    /**\n      Controls the randomness of cross-validation when `cv` is a float. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      Whether to store all scores and thresholds computed during the cross-validation process.\n\n      @defaultValue `false`\n     */\n    store_cv_results?: boolean\n  }) {\n    this.id = `TunedThresholdClassifierCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'TunedThresholdClassifierCV.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import TunedThresholdClassifierCV\ntry: bridgeTunedThresholdClassifierCV\nexcept NameError: bridgeTunedThresholdClassifierCV = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_TunedThresholdClassifierCV = {'estimator': ${this.opts['estimator'] ?? undefined}, 'scoring': ${this.opts['scoring'] ?? undefined}, 'response_method': ${this.opts['response_method'] ?? undefined}, 'thresholds': ${this.opts['thresholds'] ?? undefined}, 'cv': ${this.opts['cv'] ?? undefined}, 'refit': ${this.opts['refit'] ?? undefined}, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'store_cv_results': ${this.opts['store_cv_results'] ?? undefined}}\n\nctor_TunedThresholdClassifierCV = {k: v for k, v in ctor_TunedThresholdClassifierCV.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeTunedThresholdClassifierCV[${this.id}] = TunedThresholdClassifierCV(**ctor_TunedThresholdClassifierCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeTunedThresholdClassifierCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Decision function for samples in `X` using the fitted estimator.\n   */\n  async decision_function(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_decision_function = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_TunedThresholdClassifierCV_decision_function = {k: v for k, v in pms_TunedThresholdClassifierCV_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_decision_function = bridgeTunedThresholdClassifierCV[${this.id}].decision_function(**pms_TunedThresholdClassifierCV_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_decision_function.tolist() if hasattr(res_TunedThresholdClassifierCV_decision_function, 'tolist') else res_TunedThresholdClassifierCV_decision_function`\n  }\n\n  /**\n    Fit the classifier.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Parameters to pass to the `fit` method of the underlying classifier.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before fit()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'params': ${opts['params'] ?? undefined}}\n\npms_TunedThresholdClassifierCV_fit = {k: v for k, v in pms_TunedThresholdClassifierCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_fit = bridgeTunedThresholdClassifierCV[${this.id}].fit(**pms_TunedThresholdClassifierCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_fit.tolist() if hasattr(res_TunedThresholdClassifierCV_fit, 'tolist') else res_TunedThresholdClassifierCV_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_TunedThresholdClassifierCV_get_metadata_routing = {k: v for k, v in pms_TunedThresholdClassifierCV_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_get_metadata_routing = bridgeTunedThresholdClassifierCV[${this.id}].get_metadata_routing(**pms_TunedThresholdClassifierCV_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_get_metadata_routing.tolist() if hasattr(res_TunedThresholdClassifierCV_get_metadata_routing, 'tolist') else res_TunedThresholdClassifierCV_get_metadata_routing`\n  }\n\n  /**\n    Predict the target of new samples.\n   */\n  async predict(opts: {\n    /**\n      The samples, as accepted by `estimator.predict`.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before predict()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_TunedThresholdClassifierCV_predict = {k: v for k, v in pms_TunedThresholdClassifierCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_predict = bridgeTunedThresholdClassifierCV[${this.id}].predict(**pms_TunedThresholdClassifierCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_predict.tolist() if hasattr(res_TunedThresholdClassifierCV_predict, 'tolist') else res_TunedThresholdClassifierCV_predict`\n  }\n\n  /**\n    Predict logarithm class probabilities for `X` using the fitted estimator.\n   */\n  async predict_log_proba(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_predict_log_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_TunedThresholdClassifierCV_predict_log_proba = {k: v for k, v in pms_TunedThresholdClassifierCV_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_predict_log_proba = bridgeTunedThresholdClassifierCV[${this.id}].predict_log_proba(**pms_TunedThresholdClassifierCV_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_predict_log_proba.tolist() if hasattr(res_TunedThresholdClassifierCV_predict_log_proba, 'tolist') else res_TunedThresholdClassifierCV_predict_log_proba`\n  }\n\n  /**\n    Predict class probabilities for `X` using the fitted estimator.\n   */\n  async predict_proba(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_predict_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_TunedThresholdClassifierCV_predict_proba = {k: v for k, v in pms_TunedThresholdClassifierCV_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_predict_proba = bridgeTunedThresholdClassifierCV[${this.id}].predict_proba(**pms_TunedThresholdClassifierCV_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_predict_proba.tolist() if hasattr(res_TunedThresholdClassifierCV_predict_proba, 'tolist') else res_TunedThresholdClassifierCV_predict_proba`\n  }\n\n  /**\n    Return the mean accuracy on the given test data and labels.\n\n    In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.\n   */\n  async score(opts: {\n    /**\n      Test samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True labels for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before score()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_TunedThresholdClassifierCV_score = {k: v for k, v in pms_TunedThresholdClassifierCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_score = bridgeTunedThresholdClassifierCV[${this.id}].score(**pms_TunedThresholdClassifierCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_score.tolist() if hasattr(res_TunedThresholdClassifierCV_score, 'tolist') else res_TunedThresholdClassifierCV_score`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_TunedThresholdClassifierCV_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_TunedThresholdClassifierCV_set_score_request = {k: v for k, v in pms_TunedThresholdClassifierCV_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_TunedThresholdClassifierCV_set_score_request = bridgeTunedThresholdClassifierCV[${this.id}].set_score_request(**pms_TunedThresholdClassifierCV_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_TunedThresholdClassifierCV_set_score_request.tolist() if hasattr(res_TunedThresholdClassifierCV_set_score_request, 'tolist') else res_TunedThresholdClassifierCV_set_score_request`\n  }\n\n  /**\n    The fitted classifier used when predicting.\n   */\n  get estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_estimator_ = bridgeTunedThresholdClassifierCV[${this.id}].estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_estimator_.tolist() if hasattr(attr_TunedThresholdClassifierCV_estimator_, 'tolist') else attr_TunedThresholdClassifierCV_estimator_`\n    })()\n  }\n\n  /**\n    The new decision threshold.\n   */\n  get best_threshold_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing best_threshold_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_best_threshold_ = bridgeTunedThresholdClassifierCV[${this.id}].best_threshold_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_best_threshold_.tolist() if hasattr(attr_TunedThresholdClassifierCV_best_threshold_, 'tolist') else attr_TunedThresholdClassifierCV_best_threshold_`\n    })()\n  }\n\n  /**\n    The optimal score of the objective metric, evaluated at `best_threshold_`.\n   */\n  get best_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing best_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_best_score_ = bridgeTunedThresholdClassifierCV[${this.id}].best_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_best_score_.tolist() if hasattr(attr_TunedThresholdClassifierCV_best_score_, 'tolist') else attr_TunedThresholdClassifierCV_best_score_`\n    })()\n  }\n\n  /**\n    A dictionary containing the scores and thresholds computed during the cross-validation process. Only exist if `store_cv_results=True`. The keys are `\"thresholds\"` and `\"scores\"`.\n   */\n  get cv_results_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing cv_results_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_cv_results_ = bridgeTunedThresholdClassifierCV[${this.id}].cv_results_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_cv_results_.tolist() if hasattr(attr_TunedThresholdClassifierCV_cv_results_, 'tolist') else attr_TunedThresholdClassifierCV_cv_results_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_n_features_in_ = bridgeTunedThresholdClassifierCV[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_n_features_in_.tolist() if hasattr(attr_TunedThresholdClassifierCV_n_features_in_, 'tolist') else attr_TunedThresholdClassifierCV_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This TunedThresholdClassifierCV instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'TunedThresholdClassifierCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_TunedThresholdClassifierCV_feature_names_in_ = bridgeTunedThresholdClassifierCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_TunedThresholdClassifierCV_feature_names_in_.tolist() if hasattr(attr_TunedThresholdClassifierCV_feature_names_in_, 'tolist') else attr_TunedThresholdClassifierCV_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}