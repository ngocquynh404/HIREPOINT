{"version":3,"sources":["../../../src/generated/model_selection/FixedThresholdClassifier.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Binary classifier that manually sets the decision threshold.\n\n  This classifier allows to change the default decision threshold used for converting posterior probability estimates (i.e. output of `predict_proba`) or decision scores (i.e. output of `decision_function`) into a class label.\n\n  Here, the threshold is not optimized and is set to a constant value.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../classification_threshold.html#fixedthresholdclassifier).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.FixedThresholdClassifier.html)\n */\nexport class FixedThresholdClassifier {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The binary classifier, fitted or not, for which we want to optimize the decision threshold used during `predict`.\n     */\n    estimator?: any\n\n    /**\n      The decision threshold to use when converting posterior probability estimates (i.e. output of `predict_proba`) or decision scores (i.e. output of `decision_function`) into a class label. When `\"auto\"`, the threshold is set to 0.5 if `predict_proba` is used as `response_method`, otherwise it is set to 0 (i.e. the default threshold for `decision_function`).\n\n      @defaultValue `'auto'`\n     */\n    threshold?: 'auto' | number\n\n    /**\n      The label of the positive class. Used to process the output of the `response_method` method. When `pos_label=None`, if `y_true` is in `{-1, 1}` or `{0, 1}`, `pos_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: number | boolean | string\n\n    /**\n      Methods by the classifier `estimator` corresponding to the decision function for which we want to find a threshold. It can be:\n\n      @defaultValue `'auto'`\n     */\n    response_method?: 'auto' | 'decision_function' | 'predict_proba'\n  }) {\n    this.id = `FixedThresholdClassifier${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'FixedThresholdClassifier.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import FixedThresholdClassifier\ntry: bridgeFixedThresholdClassifier\nexcept NameError: bridgeFixedThresholdClassifier = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_FixedThresholdClassifier = {'estimator': ${this.opts['estimator'] ?? undefined}, 'threshold': ${this.opts['threshold'] ?? undefined}, 'pos_label': ${this.opts['pos_label'] ?? undefined}, 'response_method': ${this.opts['response_method'] ?? undefined}}\n\nctor_FixedThresholdClassifier = {k: v for k, v in ctor_FixedThresholdClassifier.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeFixedThresholdClassifier[${this.id}] = FixedThresholdClassifier(**ctor_FixedThresholdClassifier)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeFixedThresholdClassifier[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Decision function for samples in `X` using the fitted estimator.\n   */\n  async decision_function(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_decision_function = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_FixedThresholdClassifier_decision_function = {k: v for k, v in pms_FixedThresholdClassifier_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_decision_function = bridgeFixedThresholdClassifier[${this.id}].decision_function(**pms_FixedThresholdClassifier_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_decision_function.tolist() if hasattr(res_FixedThresholdClassifier_decision_function, 'tolist') else res_FixedThresholdClassifier_decision_function`\n  }\n\n  /**\n    Fit the classifier.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Parameters to pass to the `fit` method of the underlying classifier.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FixedThresholdClassifier must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'params': ${opts['params'] ?? undefined}}\n\npms_FixedThresholdClassifier_fit = {k: v for k, v in pms_FixedThresholdClassifier_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_fit = bridgeFixedThresholdClassifier[${this.id}].fit(**pms_FixedThresholdClassifier_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_fit.tolist() if hasattr(res_FixedThresholdClassifier_fit, 'tolist') else res_FixedThresholdClassifier_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_FixedThresholdClassifier_get_metadata_routing = {k: v for k, v in pms_FixedThresholdClassifier_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_get_metadata_routing = bridgeFixedThresholdClassifier[${this.id}].get_metadata_routing(**pms_FixedThresholdClassifier_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_get_metadata_routing.tolist() if hasattr(res_FixedThresholdClassifier_get_metadata_routing, 'tolist') else res_FixedThresholdClassifier_get_metadata_routing`\n  }\n\n  /**\n    Predict the target of new samples.\n   */\n  async predict(opts: {\n    /**\n      The samples, as accepted by `estimator.predict`.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before predict()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_FixedThresholdClassifier_predict = {k: v for k, v in pms_FixedThresholdClassifier_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_predict = bridgeFixedThresholdClassifier[${this.id}].predict(**pms_FixedThresholdClassifier_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_predict.tolist() if hasattr(res_FixedThresholdClassifier_predict, 'tolist') else res_FixedThresholdClassifier_predict`\n  }\n\n  /**\n    Predict logarithm class probabilities for `X` using the fitted estimator.\n   */\n  async predict_log_proba(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_predict_log_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_FixedThresholdClassifier_predict_log_proba = {k: v for k, v in pms_FixedThresholdClassifier_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_predict_log_proba = bridgeFixedThresholdClassifier[${this.id}].predict_log_proba(**pms_FixedThresholdClassifier_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_predict_log_proba.tolist() if hasattr(res_FixedThresholdClassifier_predict_log_proba, 'tolist') else res_FixedThresholdClassifier_predict_log_proba`\n  }\n\n  /**\n    Predict class probabilities for `X` using the fitted estimator.\n   */\n  async predict_proba(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_predict_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_FixedThresholdClassifier_predict_proba = {k: v for k, v in pms_FixedThresholdClassifier_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_predict_proba = bridgeFixedThresholdClassifier[${this.id}].predict_proba(**pms_FixedThresholdClassifier_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_predict_proba.tolist() if hasattr(res_FixedThresholdClassifier_predict_proba, 'tolist') else res_FixedThresholdClassifier_predict_proba`\n  }\n\n  /**\n    Return the mean accuracy on the given test data and labels.\n\n    In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.\n   */\n  async score(opts: {\n    /**\n      Test samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True labels for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before score()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_FixedThresholdClassifier_score = {k: v for k, v in pms_FixedThresholdClassifier_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_score = bridgeFixedThresholdClassifier[${this.id}].score(**pms_FixedThresholdClassifier_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_score.tolist() if hasattr(res_FixedThresholdClassifier_score, 'tolist') else res_FixedThresholdClassifier_score`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FixedThresholdClassifier_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_FixedThresholdClassifier_set_score_request = {k: v for k, v in pms_FixedThresholdClassifier_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FixedThresholdClassifier_set_score_request = bridgeFixedThresholdClassifier[${this.id}].set_score_request(**pms_FixedThresholdClassifier_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FixedThresholdClassifier_set_score_request.tolist() if hasattr(res_FixedThresholdClassifier_set_score_request, 'tolist') else res_FixedThresholdClassifier_set_score_request`\n  }\n\n  /**\n    The fitted classifier used when predicting.\n   */\n  get estimator_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before accessing estimator_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FixedThresholdClassifier_estimator_ = bridgeFixedThresholdClassifier[${this.id}].estimator_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FixedThresholdClassifier_estimator_.tolist() if hasattr(attr_FixedThresholdClassifier_estimator_, 'tolist') else attr_FixedThresholdClassifier_estimator_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FixedThresholdClassifier_n_features_in_ = bridgeFixedThresholdClassifier[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FixedThresholdClassifier_n_features_in_.tolist() if hasattr(attr_FixedThresholdClassifier_n_features_in_, 'tolist') else attr_FixedThresholdClassifier_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimator exposes such an attribute when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This FixedThresholdClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FixedThresholdClassifier must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FixedThresholdClassifier_feature_names_in_ = bridgeFixedThresholdClassifier[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FixedThresholdClassifier_feature_names_in_.tolist() if hasattr(attr_FixedThresholdClassifier_feature_names_in_, 'tolist') else attr_FixedThresholdClassifier_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAeZ,IAAM,2BAAN,MAA+B;AAAA,EACpC;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAwBT;AACD,SAAK,KAAK,2BAA2B,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACtE,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,mDAAmD,KAAK,KAAK,WAAW,KAAK,MAAS,kBAAkB,KAAK,KAAK,WAAW,KAAK,MAAS,kBAAkB,KAAK,KAAK,WAAW,KAAK,MAAS,wBAAwB,KAAK,KAAK,iBAAiB,KAAK,MAAS;AAAA;AAAA;AAIpQ,UAAM,KAAK,IACR,oCAAoC,KAAK,EAAE;AAE9C,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,wCAAwC,KAAK,EAAE;AAE9D,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,MAKH;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,qEAAqE,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK7H,UAAM,KAAK,IACR,qFAAqF,KAAK,EAAE;AAG/F,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAeO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IACR,uDAAuD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,yBAAyB,KAAK,QAAQ,KAAK,MAAS;AAAA;AAAA;AAKrP,UAAM,KAAK,IACR,uEAAuE,KAAK,EAAE;AAGjF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,qBAAqB,MAKV;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,qEAAqE,KAAK,SAAS,KAAK,MAAS;AAAA;AAAA;AAKpG,UAAM,KAAK,IACR,wFAAwF,KAAK,EAAE;AAGlG,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ,MAKO;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,2DAA2D,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKnH,UAAM,KAAK,IACR,2EAA2E,KAAK,EAAE;AAGrF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,kBAAkB,MAKD;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,qEAAqE,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK7H,UAAM,KAAK,IACR,qFAAqF,KAAK,EAAE;AAG/F,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAKG;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,iEAAiE,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKzH,UAAM,KAAK,IACR,iFAAiF,KAAK,EAAE;AAG3F,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM,MAeQ;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,yDAAyD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,yCAAyC,KAAK,eAAe,KAAK,MAAS,QAAQ,KAAK,eAAe,MAAM,MAAS;AAAA;AAAA;AAKzT,UAAM,KAAK,IACR,yEAAyE,KAAK,EAAE;AAGnF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,kBAAkB,MAKP;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,wEAAwE,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK7G,UAAM,KAAK,IACR,qFAAqF,KAAK,EAAE;AAG/F,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,aAA2B;AAC7B,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,+EAA+E,KAAK,EAAE;AAGzF,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,iBAAkC;AACpC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,mFAAmF,KAAK,EAAE;AAG7F,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAsC;AACxC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,sFAAsF,KAAK,EAAE;AAGhG,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}