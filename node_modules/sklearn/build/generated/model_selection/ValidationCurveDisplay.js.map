{"version":3,"sources":["../../../src/generated/model_selection/ValidationCurveDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Validation Curve visualization.\n\n  It is recommended to use [`from_estimator`](https://scikit-learn.org/stable/modules/generated/#sklearn.model_selection.ValidationCurveDisplay.from_estimator \"sklearn.model_selection.ValidationCurveDisplay.from_estimator\") to create a [`ValidationCurveDisplay`](https://scikit-learn.org/stable/modules/generated/#sklearn.model_selection.ValidationCurveDisplay \"sklearn.model_selection.ValidationCurveDisplay\") instance. All parameters are stored as attributes.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations) for general information about the visualization API and [detailed documentation](https://scikit-learn.org/stable/modules/generated/../learning_curve.html#validation-curve) regarding the validation curve visualization.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.ValidationCurveDisplay.html)\n */\nexport class ValidationCurveDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Name of the parameter that has been varied.\n     */\n    param_name?: string\n\n    /**\n      The values of the parameter that have been evaluated.\n     */\n    param_range?: ArrayLike\n\n    /**\n      Scores on training sets.\n     */\n    train_scores?: NDArray[]\n\n    /**\n      Scores on test set.\n     */\n    test_scores?: NDArray[]\n\n    /**\n      The name of the score used in `validation_curve`. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `\"Score\"` if `negate_score` is `false` and `\"Negative score\"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `_` by spaces and capitalize the first letter. We remove `neg_` and replace it by `\"Negative\"` if `negate_score` is `false` or just remove it otherwise.\n     */\n    score_name?: string\n  }) {\n    this.id = `ValidationCurveDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'ValidationCurveDisplay.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import ValidationCurveDisplay\ntry: bridgeValidationCurveDisplay\nexcept NameError: bridgeValidationCurveDisplay = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ValidationCurveDisplay = {'param_name': ${this.opts['param_name'] ?? undefined}, 'param_range': np.array(${this.opts['param_range'] ?? undefined}) if ${this.opts['param_range'] !== undefined} else None, 'train_scores': np.array(${this.opts['train_scores'] ?? undefined}) if ${this.opts['train_scores'] !== undefined} else None, 'test_scores': np.array(${this.opts['test_scores'] ?? undefined}) if ${this.opts['test_scores'] !== undefined} else None, 'score_name': ${this.opts['score_name'] ?? undefined}}\n\nctor_ValidationCurveDisplay = {k: v for k, v in ctor_ValidationCurveDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeValidationCurveDisplay[${this.id}] = ValidationCurveDisplay(**ctor_ValidationCurveDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeValidationCurveDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Create a validation curve display from an estimator.\n\n    Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations) for general information about the visualization API and [detailed documentation](https://scikit-learn.org/stable/modules/generated/../learning_curve.html#validation-curve) regarding the validation curve visualization.\n   */\n  async from_estimator(opts: {\n    /**\n      An object of that type which is cloned for each validation.\n     */\n    estimator?: any\n\n    /**\n      Training data, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target relative to X for classification or regression; `undefined` for unsupervised learning.\n     */\n    y?: ArrayLike\n\n    /**\n      Name of the parameter that will be varied.\n     */\n    param_name?: string\n\n    /**\n      The values of the parameter that will be evaluated.\n     */\n    param_range?: ArrayLike\n\n    /**\n      Group labels for the samples used while splitting the dataset into train/test set. Only used in conjunction with a “Group” [cv](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-cv) instance (e.g., [`GroupKFold`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupKFold.html#sklearn.model_selection.GroupKFold \"sklearn.model_selection.GroupKFold\")).\n     */\n    groups?: ArrayLike\n\n    /**\n      Determines the cross-validation splitting strategy. Possible inputs for cv are:\n     */\n    cv?: number\n\n    /**\n      A string (see [The scoring parameter: defining model evaluation rules](https://scikit-learn.org/stable/modules/generated/../model_evaluation.html#scoring-parameter)) or a scorer callable object / function with signature `scorer(estimator, X, y)` (see [Defining your scoring strategy from metric functions](https://scikit-learn.org/stable/modules/generated/../model_evaluation.html#scoring)).\n     */\n    scoring?: string\n\n    /**\n      Number of jobs to run in parallel. Training the estimator and computing the score are parallelized over the different training and test sets. `undefined` means 1 unless in a [`joblib.parallel_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend \"(in joblib v1.5.dev0)\") context. `\\-1` means using all processors. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-n_jobs) for more details.\n     */\n    n_jobs?: number\n\n    /**\n      Number of predispatched jobs for parallel execution (default is all). The option can reduce the allocated memory. The str can be an expression like ‘2\\*n_jobs’.\n\n      @defaultValue `'all'`\n     */\n    pre_dispatch?: number | string\n\n    /**\n      Controls the verbosity: the higher, the more messages.\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      Value to assign to the score if an error occurs in estimator fitting. If set to ‘raise’, the error is raised. If a numeric value is given, FitFailedWarning is raised.\n     */\n    error_score?: 'raise'\n\n    /**\n      Parameters to pass to the fit method of the estimator.\n     */\n    fit_params?: any\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Whether or not to negate the scores obtained through [`validation_curve`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve \"sklearn.model_selection.validation_curve\"). This is particularly useful when using the error denoted by `neg_\\*` in `scikit-learn`.\n\n      @defaultValue `false`\n     */\n    negate_score?: boolean\n\n    /**\n      The name of the score used to decorate the y-axis of the plot. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `\"Score\"` if `negate_score` is `false` and `\"Negative score\"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `_` by spaces and capitalize the first letter. We remove `neg_` and replace it by `\"Negative\"` if `negate_score` is `false` or just remove it otherwise.\n     */\n    score_name?: string\n\n    /**\n      The type of score to plot. Can be one of `\"test\"`, `\"train\"`, or `\"both\"`.\n\n      @defaultValue `'both'`\n     */\n    score_type?: 'test' | 'train' | 'both'\n\n    /**\n      The style used to display the score standard deviation around the mean score. If `undefined`, no representation of the standard deviation is displayed.\n\n      @defaultValue `'fill_between'`\n     */\n    std_display_style?: 'errorbar' | 'fill_between'\n\n    /**\n      Additional keyword arguments passed to the `plt.plot` used to draw the mean score.\n     */\n    line_kw?: any\n\n    /**\n      Additional keyword arguments passed to the `plt.fill_between` used to draw the score standard deviation.\n     */\n    fill_between_kw?: any\n\n    /**\n      Additional keyword arguments passed to the `plt.errorbar` used to draw mean score and standard deviation score.\n     */\n    errorbar_kw?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ValidationCurveDisplay_from_estimator = {'estimator': ${opts['estimator'] ?? undefined}, 'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'param_name': ${opts['param_name'] ?? undefined}, 'param_range': np.array(${opts['param_range'] ?? undefined}) if ${opts['param_range'] !== undefined} else None, 'groups': np.array(${opts['groups'] ?? undefined}) if ${opts['groups'] !== undefined} else None, 'cv': ${opts['cv'] ?? undefined}, 'scoring': ${opts['scoring'] ?? undefined}, 'n_jobs': ${opts['n_jobs'] ?? undefined}, 'pre_dispatch': ${opts['pre_dispatch'] ?? undefined}, 'verbose': ${opts['verbose'] ?? undefined}, 'error_score': ${opts['error_score'] ?? undefined}, 'fit_params': ${opts['fit_params'] ?? undefined}, 'ax': ${opts['ax'] ?? undefined}, 'negate_score': ${opts['negate_score'] ?? undefined}, 'score_name': ${opts['score_name'] ?? undefined}, 'score_type': ${opts['score_type'] ?? undefined}, 'std_display_style': ${opts['std_display_style'] ?? undefined}, 'line_kw': ${opts['line_kw'] ?? undefined}, 'fill_between_kw': ${opts['fill_between_kw'] ?? undefined}, 'errorbar_kw': ${opts['errorbar_kw'] ?? undefined}}\n\npms_ValidationCurveDisplay_from_estimator = {k: v for k, v in pms_ValidationCurveDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ValidationCurveDisplay_from_estimator = bridgeValidationCurveDisplay[${this.id}].from_estimator(**pms_ValidationCurveDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ValidationCurveDisplay_from_estimator.tolist() if hasattr(res_ValidationCurveDisplay_from_estimator, 'tolist') else res_ValidationCurveDisplay_from_estimator`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Whether or not to negate the scores obtained through [`validation_curve`](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve \"sklearn.model_selection.validation_curve\"). This is particularly useful when using the error denoted by `neg_\\*` in `scikit-learn`.\n\n      @defaultValue `false`\n     */\n    negate_score?: boolean\n\n    /**\n      The name of the score used to decorate the y-axis of the plot. It will override the name inferred from the `scoring` parameter. If `score` is `undefined`, we use `\"Score\"` if `negate_score` is `false` and `\"Negative score\"` otherwise. If `scoring` is a string or a callable, we infer the name. We replace `_` by spaces and capitalize the first letter. We remove `neg_` and replace it by `\"Negative\"` if `negate_score` is `false` or just remove it otherwise.\n     */\n    score_name?: string\n\n    /**\n      The type of score to plot. Can be one of `\"test\"`, `\"train\"`, or `\"both\"`.\n\n      @defaultValue `'both'`\n     */\n    score_type?: 'test' | 'train' | 'both'\n\n    /**\n      The style used to display the score standard deviation around the mean score. If `undefined`, no standard deviation representation is displayed.\n\n      @defaultValue `'fill_between'`\n     */\n    std_display_style?: 'errorbar' | 'fill_between'\n\n    /**\n      Additional keyword arguments passed to the `plt.plot` used to draw the mean score.\n     */\n    line_kw?: any\n\n    /**\n      Additional keyword arguments passed to the `plt.fill_between` used to draw the score standard deviation.\n     */\n    fill_between_kw?: any\n\n    /**\n      Additional keyword arguments passed to the `plt.errorbar` used to draw mean score and standard deviation score.\n     */\n    errorbar_kw?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ValidationCurveDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ValidationCurveDisplay_plot = {'ax': ${opts['ax'] ?? undefined}, 'negate_score': ${opts['negate_score'] ?? undefined}, 'score_name': ${opts['score_name'] ?? undefined}, 'score_type': ${opts['score_type'] ?? undefined}, 'std_display_style': ${opts['std_display_style'] ?? undefined}, 'line_kw': ${opts['line_kw'] ?? undefined}, 'fill_between_kw': ${opts['fill_between_kw'] ?? undefined}, 'errorbar_kw': ${opts['errorbar_kw'] ?? undefined}}\n\npms_ValidationCurveDisplay_plot = {k: v for k, v in pms_ValidationCurveDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ValidationCurveDisplay_plot = bridgeValidationCurveDisplay[${this.id}].plot(**pms_ValidationCurveDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ValidationCurveDisplay_plot.tolist() if hasattr(res_ValidationCurveDisplay_plot, 'tolist') else res_ValidationCurveDisplay_plot`\n  }\n\n  /**\n    Axes with the validation curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before accessing ax_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ValidationCurveDisplay_ax_ = bridgeValidationCurveDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ValidationCurveDisplay_ax_.tolist() if hasattr(attr_ValidationCurveDisplay_ax_, 'tolist') else attr_ValidationCurveDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the validation curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ValidationCurveDisplay_figure_ = bridgeValidationCurveDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ValidationCurveDisplay_figure_.tolist() if hasattr(attr_ValidationCurveDisplay_figure_, 'tolist') else attr_ValidationCurveDisplay_figure_`\n    })()\n  }\n\n  /**\n    When the `std_display_style` is `\"errorbar\"`, this is a list of `matplotlib.container.ErrorbarContainer` objects. If another style is used, `errorbar_` is `undefined`.\n   */\n  get errorbar_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before accessing errorbar_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ValidationCurveDisplay_errorbar_ = bridgeValidationCurveDisplay[${this.id}].errorbar_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ValidationCurveDisplay_errorbar_.tolist() if hasattr(attr_ValidationCurveDisplay_errorbar_, 'tolist') else attr_ValidationCurveDisplay_errorbar_`\n    })()\n  }\n\n  /**\n    When the `std_display_style` is `\"fill_between\"`, this is a list of `matplotlib.lines.Line2D` objects corresponding to the mean train and test scores. If another style is used, `line_` is `undefined`.\n   */\n  get lines_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before accessing lines_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ValidationCurveDisplay_lines_ = bridgeValidationCurveDisplay[${this.id}].lines_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ValidationCurveDisplay_lines_.tolist() if hasattr(attr_ValidationCurveDisplay_lines_, 'tolist') else attr_ValidationCurveDisplay_lines_`\n    })()\n  }\n\n  /**\n    When the `std_display_style` is `\"fill_between\"`, this is a list of `matplotlib.collections.PolyCollection` objects. If another style is used, `fill_between_` is `undefined`.\n   */\n  get fill_between_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This ValidationCurveDisplay instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ValidationCurveDisplay must call init() before accessing fill_between_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ValidationCurveDisplay_fill_between_ = bridgeValidationCurveDisplay[${this.id}].fill_between_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ValidationCurveDisplay_fill_between_.tolist() if hasattr(attr_ValidationCurveDisplay_fill_between_, 'tolist') else attr_ValidationCurveDisplay_fill_between_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}