{"version":3,"sources":["../../../src/generated/model_selection/KFold.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  K-Fold cross-validator.\n\n  Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds (without shuffling by default).\n\n  Each fold is then used once as a validation while the k - 1 remaining folds form the training set.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../cross_validation.html#k-fold).\n\n  For visualisation of cross-validation behaviour and comparison between common scikit-learn split methods refer to [Visualizing cross-validation behavior in scikit-learn](https://scikit-learn.org/stable/modules/generated/../../auto_examples/model_selection/plot_cv_indices.html#sphx-glr-auto-examples-model-selection-plot-cv-indices-py)\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html)\n */\nexport class KFold {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of folds. Must be at least 2.\n\n      @defaultValue `5`\n     */\n    n_splits?: number\n\n    /**\n      Whether to shuffle the data before splitting into batches. Note that the samples within each split will not be shuffled.\n\n      @defaultValue `false`\n     */\n    shuffle?: boolean\n\n    /**\n      When `shuffle` is `true`, `random_state` affects the ordering of the indices, which controls the randomness of each fold. Otherwise, this parameter has no effect. Pass an int for reproducible output across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `KFold${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('KFold.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.model_selection import KFold\ntry: bridgeKFold\nexcept NameError: bridgeKFold = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_KFold = {'n_splits': ${this.opts['n_splits'] ?? undefined}, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_KFold = {k: v for k, v in ctor_KFold.items() if v is not None}`\n\n    await this._py.ex`bridgeKFold[${this.id}] = KFold(**ctor_KFold)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKFold[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KFold must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_KFold_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_KFold_get_metadata_routing = {k: v for k, v in pms_KFold_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KFold_get_metadata_routing = bridgeKFold[${this.id}].get_metadata_routing(**pms_KFold_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KFold_get_metadata_routing.tolist() if hasattr(res_KFold_get_metadata_routing, 'tolist') else res_KFold_get_metadata_routing`\n  }\n\n  /**\n    Returns the number of splitting iterations in the cross-validator.\n   */\n  async get_n_splits(opts: {\n    /**\n      Always ignored, exists for compatibility.\n     */\n    X?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    y?: any\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: any\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KFold must call init() before get_n_splits()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_KFold_get_n_splits = {'X': ${opts['X'] ?? undefined}, 'y': ${opts['y'] ?? undefined}, 'groups': ${opts['groups'] ?? undefined}}\n\npms_KFold_get_n_splits = {k: v for k, v in pms_KFold_get_n_splits.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KFold_get_n_splits = bridgeKFold[${this.id}].get_n_splits(**pms_KFold_get_n_splits)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KFold_get_n_splits.tolist() if hasattr(res_KFold_get_n_splits, 'tolist') else res_KFold_get_n_splits`\n  }\n\n  /**\n    Generate indices to split data into training and test set.\n   */\n  async split(opts: {\n    /**\n      Training data, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      The target variable for supervised learning problems.\n     */\n    y?: ArrayLike\n\n    /**\n      Always ignored, exists for compatibility.\n     */\n    groups?: any\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This KFold instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('KFold must call init() before split()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_KFold_split = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'groups': ${opts['groups'] ?? undefined}}\n\npms_KFold_split = {k: v for k, v in pms_KFold_split.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_KFold_split = bridgeKFold[${this.id}].split(**pms_KFold_split)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_KFold_split.tolist() if hasattr(res_KFold_split, 'tolist') else res_KFold_split`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAiBZ,IAAM,QAAN,MAAY;AAAA,EACjB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAmBT;AACD,SAAK,KAAK,QAAQ,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACnD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,+BAA+B,KAAK,KAAK,UAAU,KAAK,MAAS,gBAAgB,KAAK,KAAK,SAAS,KAAK,MAAS,qBAAqB,KAAK,KAAK,cAAc,KAAK,MAAS;AAAA;AAAA;AAIhL,UAAM,KAAK,IAAI,iBAAiB,KAAK,EAAE;AAEvC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,qBAAqB,KAAK,EAAE;AAE3C,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,qBAAqB,MAKV;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,SAAS,KAAK,MAAS;AAAA;AAAA;AAKjF,UAAM,KAAK,IACR,kDAAkD,KAAK,EAAE;AAG5D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,MAeC;AAClB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAGA,UAAM,KAAK,IACR,oCAAoC,KAAK,GAAG,KAAK,MAAS,UAAU,KAAK,GAAG,KAAK,MAAS,eAAe,KAAK,QAAQ,KAAK,MAAS;AAAA;AAAA;AAKvI,UAAM,KAAK,IACR,0CAA0C,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAeS;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAGA,UAAM,KAAK,IACR,sCAAsC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,yBAAyB,KAAK,QAAQ,KAAK,MAAS;AAAA;AAAA;AAKpO,UAAM,KAAK,IACR,mCAAmC,KAAK,EAAE;AAG7C,WAAO,KACJ;AAAA,EACL;AACF;","names":[]}