{"version":3,"sources":["../../../src/generated/multioutput/ClassifierChain.ts","../../../src/generated/multioutput/MultiOutputClassifier.ts","../../../src/generated/multioutput/MultiOutputRegressor.ts","../../../src/generated/multioutput/RegressorChain.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  A multi-label model that arranges binary classifiers into a chain.\n\n  Each model makes a prediction in the order specified by the chain using all of the available features provided to the model plus the predictions of models that are earlier in the chain.\n\n  For an example of how to use `ClassifierChain` and benefit from its ensemble, see [ClassifierChain on a yeast dataset](https://scikit-learn.org/stable/modules/generated/../../auto_examples/multioutput/plot_classifier_chain_yeast.html#sphx-glr-auto-examples-multioutput-plot-classifier-chain-yeast-py) example.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../multiclass.html#classifierchain).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.ClassifierChain.html)\n */\nexport class ClassifierChain {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The base estimator from which the classifier chain is built.\n     */\n    base_estimator?: any\n\n    /**\n      If `undefined`, the order will be determined by the order of columns in the label matrix Y.:\n     */\n    order?: ArrayLike | 'random'\n\n    /**\n      Determines whether to use cross validated predictions or true labels for the results of previous estimators in the chain. Possible inputs for cv are:\n     */\n    cv?: number\n\n    /**\n      Prediction method to be used by estimators in the chain for the ‘prediction’ features of previous estimators in the chain.\n\n      @defaultValue `'predict'`\n     */\n    chain_method?:\n      | 'predict'\n      | 'predict_proba'\n      | 'predict_log_proba'\n      | 'decision_function'\n\n    /**\n      If `order='random'`, determines random number generation for the chain order. In addition, it controls the random seed given at each `base_estimator` at each chaining iteration. Thus, it is only used when `base_estimator` exposes a `random_state`. Pass an int for reproducible output across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      If `true`, chain progress is output as each model is completed.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean\n  }) {\n    this.id = `ClassifierChain${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ClassifierChain.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.multioutput import ClassifierChain\ntry: bridgeClassifierChain\nexcept NameError: bridgeClassifierChain = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ClassifierChain = {'base_estimator': ${this.opts['base_estimator'] ?? undefined}, 'order': np.array(${this.opts['order'] ?? undefined}) if ${this.opts['order'] !== undefined} else None, 'cv': ${this.opts['cv'] ?? undefined}, 'chain_method': ${this.opts['chain_method'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}}\n\nctor_ClassifierChain = {k: v for k, v in ctor_ClassifierChain.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeClassifierChain[${this.id}] = ClassifierChain(**ctor_ClassifierChain)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeClassifierChain[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Evaluate the decision_function of the models in the chain.\n   */\n  async decision_function(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before decision_function()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_decision_function = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ClassifierChain_decision_function = {k: v for k, v in pms_ClassifierChain_decision_function.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_decision_function = bridgeClassifierChain[${this.id}].decision_function(**pms_ClassifierChain_decision_function)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_decision_function.tolist() if hasattr(res_ClassifierChain_decision_function, 'tolist') else res_ClassifierChain_decision_function`\n  }\n\n  /**\n    Fit the model to data matrix X and targets Y.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      The target values.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Parameters passed to the `fit` method of each step.\n\n      Only available if `enable_metadata_routing=True`. See the [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing).\n     */\n    fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ClassifierChain must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_ClassifierChain_fit = {k: v for k, v in pms_ClassifierChain_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_fit = bridgeClassifierChain[${this.id}].fit(**pms_ClassifierChain_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_fit.tolist() if hasattr(res_ClassifierChain_fit, 'tolist') else res_ClassifierChain_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_ClassifierChain_get_metadata_routing = {k: v for k, v in pms_ClassifierChain_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_get_metadata_routing = bridgeClassifierChain[${this.id}].get_metadata_routing(**pms_ClassifierChain_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_get_metadata_routing.tolist() if hasattr(res_ClassifierChain_get_metadata_routing, 'tolist') else res_ClassifierChain_get_metadata_routing`\n  }\n\n  /**\n    Predict on the data matrix X using the ClassifierChain model.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ClassifierChain must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ClassifierChain_predict = {k: v for k, v in pms_ClassifierChain_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_predict = bridgeClassifierChain[${this.id}].predict(**pms_ClassifierChain_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_predict.tolist() if hasattr(res_ClassifierChain_predict, 'tolist') else res_ClassifierChain_predict`\n  }\n\n  /**\n    Predict logarithm of probability estimates.\n   */\n  async predict_log_proba(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_predict_log_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ClassifierChain_predict_log_proba = {k: v for k, v in pms_ClassifierChain_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_predict_log_proba = bridgeClassifierChain[${this.id}].predict_log_proba(**pms_ClassifierChain_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_predict_log_proba.tolist() if hasattr(res_ClassifierChain_predict_log_proba, 'tolist') else res_ClassifierChain_predict_log_proba`\n  }\n\n  /**\n    Predict probability estimates.\n   */\n  async predict_proba(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ClassifierChain must call init() before predict_proba()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_predict_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ClassifierChain_predict_proba = {k: v for k, v in pms_ClassifierChain_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_predict_proba = bridgeClassifierChain[${this.id}].predict_proba(**pms_ClassifierChain_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_predict_proba.tolist() if hasattr(res_ClassifierChain_predict_proba, 'tolist') else res_ClassifierChain_predict_proba`\n  }\n\n  /**\n    Return the mean accuracy on the given test data and labels.\n\n    In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.\n   */\n  async score(opts: {\n    /**\n      Test samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True labels for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ClassifierChain must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_ClassifierChain_score = {k: v for k, v in pms_ClassifierChain_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_score = bridgeClassifierChain[${this.id}].score(**pms_ClassifierChain_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_score.tolist() if hasattr(res_ClassifierChain_score, 'tolist') else res_ClassifierChain_score`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ClassifierChain_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_ClassifierChain_set_score_request = {k: v for k, v in pms_ClassifierChain_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ClassifierChain_set_score_request = bridgeClassifierChain[${this.id}].set_score_request(**pms_ClassifierChain_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ClassifierChain_set_score_request.tolist() if hasattr(res_ClassifierChain_set_score_request, 'tolist') else res_ClassifierChain_set_score_request`\n  }\n\n  /**\n    A list of arrays of length `len(estimators_)` containing the class labels for each estimator in the chain.\n   */\n  get classes_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing classes_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_classes_ = bridgeClassifierChain[${this.id}].classes_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_classes_.tolist() if hasattr(attr_ClassifierChain_classes_, 'tolist') else attr_ClassifierChain_classes_`\n    })()\n  }\n\n  /**\n    A list of clones of base_estimator.\n   */\n  get estimators_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_estimators_ = bridgeClassifierChain[${this.id}].estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_estimators_.tolist() if hasattr(attr_ClassifierChain_estimators_, 'tolist') else attr_ClassifierChain_estimators_`\n    })()\n  }\n\n  /**\n    The order of labels in the classifier chain.\n   */\n  get order_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing order_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_order_ = bridgeClassifierChain[${this.id}].order_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_order_.tolist() if hasattr(attr_ClassifierChain_order_, 'tolist') else attr_ClassifierChain_order_`\n    })()\n  }\n\n  /**\n    Prediction method used by estimators in the chain for the prediction features.\n   */\n  get chain_method_(): Promise<string> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing chain_method_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_chain_method_ = bridgeClassifierChain[${this.id}].chain_method_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_chain_method_.tolist() if hasattr(attr_ClassifierChain_chain_method_, 'tolist') else attr_ClassifierChain_chain_method_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying `base_estimator` exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_n_features_in_ = bridgeClassifierChain[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_n_features_in_.tolist() if hasattr(attr_ClassifierChain_n_features_in_, 'tolist') else attr_ClassifierChain_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This ClassifierChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ClassifierChain must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_ClassifierChain_feature_names_in_ = bridgeClassifierChain[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_ClassifierChain_feature_names_in_.tolist() if hasattr(attr_ClassifierChain_feature_names_in_, 'tolist') else attr_ClassifierChain_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Multi target classification.\n\n  This strategy consists of fitting one classifier per target. This is a simple strategy for extending classifiers that do not natively support multi-target classification.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html)\n */\nexport class MultiOutputClassifier {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      An estimator object implementing [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) and [predict](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict). A [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba) method will be exposed only if `estimator` implements it.\n     */\n    estimator?: any\n\n    /**\n      The number of jobs to run in parallel. [`fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputClassifier.fit \"sklearn.multioutput.MultiOutputClassifier.fit\"), [`predict`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputClassifier.predict \"sklearn.multioutput.MultiOutputClassifier.predict\") and [`partial_fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputClassifier.partial_fit \"sklearn.multioutput.MultiOutputClassifier.partial_fit\") (if supported by the passed estimator) will be parallelized for each target.\n\n      When individual estimators are fast to train or predict, using `n_jobs > 1` can result in slower performance due to the parallelism overhead.\n\n      `undefined` means `1` unless in a [`joblib.parallel_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend \"(in joblib v1.5.dev0)\") context. `\\-1` means using all available processes / threads. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-n_jobs) for more details.\n     */\n    n_jobs?: number\n  }) {\n    this.id = `MultiOutputClassifier${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'MultiOutputClassifier.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.multioutput import MultiOutputClassifier\ntry: bridgeMultiOutputClassifier\nexcept NameError: bridgeMultiOutputClassifier = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MultiOutputClassifier = {'estimator': ${this.opts['estimator'] ?? undefined}, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}}\n\nctor_MultiOutputClassifier = {k: v for k, v in ctor_MultiOutputClassifier.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMultiOutputClassifier[${this.id}] = MultiOutputClassifier(**ctor_MultiOutputClassifier)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMultiOutputClassifier[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to data matrix X and targets Y.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      The target values.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying classifier supports sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Parameters passed to the `estimator.fit` method of each step.\n     */\n    fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputClassifier must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_MultiOutputClassifier_fit = {k: v for k, v in pms_MultiOutputClassifier_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_fit = bridgeMultiOutputClassifier[${this.id}].fit(**pms_MultiOutputClassifier_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_fit.tolist() if hasattr(res_MultiOutputClassifier_fit, 'tolist') else res_MultiOutputClassifier_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_MultiOutputClassifier_get_metadata_routing = {k: v for k, v in pms_MultiOutputClassifier_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_get_metadata_routing = bridgeMultiOutputClassifier[${this.id}].get_metadata_routing(**pms_MultiOutputClassifier_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_get_metadata_routing.tolist() if hasattr(res_MultiOutputClassifier_get_metadata_routing, 'tolist') else res_MultiOutputClassifier_get_metadata_routing`\n  }\n\n  /**\n    Incrementally fit a separate model for each class output.\n   */\n  async partial_fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Multi-output targets.\n     */\n    y?: ArrayLike | SparseMatrix[]\n\n    /**\n      Each array is unique classes for one output in str/int. Can be obtained via `\\[np.unique(y\\[:, i\\]) for i in range(y.shape\\[1\\])\\]`, where `y` is the target matrix of the entire dataset. This argument is required for the first call to partial_fit and can be omitted in the subsequent calls. Note that `y` doesn’t need to contain all labels in `classes`.\n     */\n    classes?: any[]\n\n    /**\n      Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Parameters passed to the `estimator.partial_fit` method of each sub-estimator.\n\n      Only available if `enable_metadata_routing=True`. See the [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing).\n     */\n    partial_fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before partial_fit()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'classes': np.array(${opts['classes'] ?? undefined}) if ${opts['classes'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'partial_fit_params': ${opts['partial_fit_params'] ?? undefined}}\n\npms_MultiOutputClassifier_partial_fit = {k: v for k, v in pms_MultiOutputClassifier_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_partial_fit = bridgeMultiOutputClassifier[${this.id}].partial_fit(**pms_MultiOutputClassifier_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_partial_fit.tolist() if hasattr(res_MultiOutputClassifier_partial_fit, 'tolist') else res_MultiOutputClassifier_partial_fit`\n  }\n\n  /**\n    Predict multi-output variable using model for each target variable.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputClassifier must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MultiOutputClassifier_predict = {k: v for k, v in pms_MultiOutputClassifier_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_predict = bridgeMultiOutputClassifier[${this.id}].predict(**pms_MultiOutputClassifier_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_predict.tolist() if hasattr(res_MultiOutputClassifier_predict, 'tolist') else res_MultiOutputClassifier_predict`\n  }\n\n  /**\n    Return prediction probabilities for each class of each output.\n\n    This method will raise a `ValueError` if any of the estimators do not have `predict_proba`.\n   */\n  async predict_proba(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike[]\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before predict_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_predict_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MultiOutputClassifier_predict_proba = {k: v for k, v in pms_MultiOutputClassifier_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_predict_proba = bridgeMultiOutputClassifier[${this.id}].predict_proba(**pms_MultiOutputClassifier_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_predict_proba.tolist() if hasattr(res_MultiOutputClassifier_predict_proba, 'tolist') else res_MultiOutputClassifier_predict_proba`\n  }\n\n  /**\n    Return the mean accuracy on the given test data and labels.\n   */\n  async score(opts: {\n    /**\n      Test samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for X.\n     */\n    y?: ArrayLike[]\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputClassifier must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_MultiOutputClassifier_score = {k: v for k, v in pms_MultiOutputClassifier_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_score = bridgeMultiOutputClassifier[${this.id}].score(**pms_MultiOutputClassifier_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_score.tolist() if hasattr(res_MultiOutputClassifier_score, 'tolist') else res_MultiOutputClassifier_score`\n  }\n\n  /**\n    Request metadata passed to the `fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_fit_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `fit`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before set_fit_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_set_fit_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MultiOutputClassifier_set_fit_request = {k: v for k, v in pms_MultiOutputClassifier_set_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_set_fit_request = bridgeMultiOutputClassifier[${this.id}].set_fit_request(**pms_MultiOutputClassifier_set_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_set_fit_request.tolist() if hasattr(res_MultiOutputClassifier_set_fit_request, 'tolist') else res_MultiOutputClassifier_set_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `partial_fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_partial_fit_request(opts: {\n    /**\n      Metadata routing for `classes` parameter in `partial_fit`.\n     */\n    classes?: string | boolean\n\n    /**\n      Metadata routing for `sample_weight` parameter in `partial_fit`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before set_partial_fit_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputClassifier_set_partial_fit_request = {'classes': ${opts['classes'] ?? undefined}, 'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MultiOutputClassifier_set_partial_fit_request = {k: v for k, v in pms_MultiOutputClassifier_set_partial_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputClassifier_set_partial_fit_request = bridgeMultiOutputClassifier[${this.id}].set_partial_fit_request(**pms_MultiOutputClassifier_set_partial_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputClassifier_set_partial_fit_request.tolist() if hasattr(res_MultiOutputClassifier_set_partial_fit_request, 'tolist') else res_MultiOutputClassifier_set_partial_fit_request`\n  }\n\n  /**\n    Class labels.\n   */\n  get classes_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before accessing classes_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputClassifier_classes_ = bridgeMultiOutputClassifier[${this.id}].classes_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputClassifier_classes_.tolist() if hasattr(attr_MultiOutputClassifier_classes_, 'tolist') else attr_MultiOutputClassifier_classes_`\n    })()\n  }\n\n  /**\n    Estimators used for predictions.\n   */\n  get estimators_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before accessing estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputClassifier_estimators_ = bridgeMultiOutputClassifier[${this.id}].estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputClassifier_estimators_.tolist() if hasattr(attr_MultiOutputClassifier_estimators_, 'tolist') else attr_MultiOutputClassifier_estimators_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputClassifier_n_features_in_ = bridgeMultiOutputClassifier[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputClassifier_n_features_in_.tolist() if hasattr(attr_MultiOutputClassifier_n_features_in_, 'tolist') else attr_MultiOutputClassifier_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputClassifier instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputClassifier must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputClassifier_feature_names_in_ = bridgeMultiOutputClassifier[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputClassifier_feature_names_in_.tolist() if hasattr(attr_MultiOutputClassifier_feature_names_in_, 'tolist') else attr_MultiOutputClassifier_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Multi target regression.\n\n  This strategy consists of fitting one regressor per target. This is a simple strategy for extending regressors that do not natively support multi-target regression.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputRegressor.html)\n */\nexport class MultiOutputRegressor {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      An estimator object implementing [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) and [predict](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict).\n     */\n    estimator?: any\n\n    /**\n      The number of jobs to run in parallel. [`fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputRegressor.fit \"sklearn.multioutput.MultiOutputRegressor.fit\"), [`predict`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputRegressor.predict \"sklearn.multioutput.MultiOutputRegressor.predict\") and [`partial_fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.multioutput.MultiOutputRegressor.partial_fit \"sklearn.multioutput.MultiOutputRegressor.partial_fit\") (if supported by the passed estimator) will be parallelized for each target.\n\n      When individual estimators are fast to train or predict, using `n_jobs > 1` can result in slower performance due to the parallelism overhead.\n\n      `undefined` means `1` unless in a [`joblib.parallel_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend \"(in joblib v1.5.dev0)\") context. `\\-1` means using all available processes / threads. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-n_jobs) for more details.\n     */\n    n_jobs?: number\n  }) {\n    this.id = `MultiOutputRegressor${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error(\n        'MultiOutputRegressor.init requires a PythonBridge instance'\n      )\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.multioutput import MultiOutputRegressor\ntry: bridgeMultiOutputRegressor\nexcept NameError: bridgeMultiOutputRegressor = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MultiOutputRegressor = {'estimator': ${this.opts['estimator'] ?? undefined}, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}}\n\nctor_MultiOutputRegressor = {k: v for k, v in ctor_MultiOutputRegressor.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMultiOutputRegressor[${this.id}] = MultiOutputRegressor(**ctor_MultiOutputRegressor)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMultiOutputRegressor[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to data, separately for each output variable.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Multi-output targets. An indicator matrix turns on multilabel estimation.\n     */\n    y?: ArrayLike | SparseMatrix[]\n\n    /**\n      Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Parameters passed to the `estimator.fit` method of each step.\n     */\n    fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputRegressor must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_MultiOutputRegressor_fit = {k: v for k, v in pms_MultiOutputRegressor_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_fit = bridgeMultiOutputRegressor[${this.id}].fit(**pms_MultiOutputRegressor_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_fit.tolist() if hasattr(res_MultiOutputRegressor_fit, 'tolist') else res_MultiOutputRegressor_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_MultiOutputRegressor_get_metadata_routing = {k: v for k, v in pms_MultiOutputRegressor_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_get_metadata_routing = bridgeMultiOutputRegressor[${this.id}].get_metadata_routing(**pms_MultiOutputRegressor_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_get_metadata_routing.tolist() if hasattr(res_MultiOutputRegressor_get_metadata_routing, 'tolist') else res_MultiOutputRegressor_get_metadata_routing`\n  }\n\n  /**\n    Incrementally fit the model to data, for each output variable.\n   */\n  async partial_fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Multi-output targets.\n     */\n    y?: ArrayLike | SparseMatrix[]\n\n    /**\n      Sample weights. If `undefined`, then samples are equally weighted. Only supported if the underlying regressor supports sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Parameters passed to the `estimator.partial_fit` method of each sub-estimator.\n\n      Only available if `enable_metadata_routing=True`. See the [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing).\n     */\n    partial_fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before partial_fit()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'partial_fit_params': ${opts['partial_fit_params'] ?? undefined}}\n\npms_MultiOutputRegressor_partial_fit = {k: v for k, v in pms_MultiOutputRegressor_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_partial_fit = bridgeMultiOutputRegressor[${this.id}].partial_fit(**pms_MultiOutputRegressor_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_partial_fit.tolist() if hasattr(res_MultiOutputRegressor_partial_fit, 'tolist') else res_MultiOutputRegressor_partial_fit`\n  }\n\n  /**\n    Predict multi-output variable using model for each target variable.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputRegressor must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MultiOutputRegressor_predict = {k: v for k, v in pms_MultiOutputRegressor_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_predict = bridgeMultiOutputRegressor[${this.id}].predict(**pms_MultiOutputRegressor_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_predict.tolist() if hasattr(res_MultiOutputRegressor_predict, 'tolist') else res_MultiOutputRegressor_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MultiOutputRegressor must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_MultiOutputRegressor_score = {k: v for k, v in pms_MultiOutputRegressor_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_score = bridgeMultiOutputRegressor[${this.id}].score(**pms_MultiOutputRegressor_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_score.tolist() if hasattr(res_MultiOutputRegressor_score, 'tolist') else res_MultiOutputRegressor_score`\n  }\n\n  /**\n    Request metadata passed to the `fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_fit_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `fit`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before set_fit_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_set_fit_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MultiOutputRegressor_set_fit_request = {k: v for k, v in pms_MultiOutputRegressor_set_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_set_fit_request = bridgeMultiOutputRegressor[${this.id}].set_fit_request(**pms_MultiOutputRegressor_set_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_set_fit_request.tolist() if hasattr(res_MultiOutputRegressor_set_fit_request, 'tolist') else res_MultiOutputRegressor_set_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `partial_fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_partial_fit_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `partial_fit`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before set_partial_fit_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_set_partial_fit_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MultiOutputRegressor_set_partial_fit_request = {k: v for k, v in pms_MultiOutputRegressor_set_partial_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_set_partial_fit_request = bridgeMultiOutputRegressor[${this.id}].set_partial_fit_request(**pms_MultiOutputRegressor_set_partial_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_set_partial_fit_request.tolist() if hasattr(res_MultiOutputRegressor_set_partial_fit_request, 'tolist') else res_MultiOutputRegressor_set_partial_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MultiOutputRegressor_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MultiOutputRegressor_set_score_request = {k: v for k, v in pms_MultiOutputRegressor_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MultiOutputRegressor_set_score_request = bridgeMultiOutputRegressor[${this.id}].set_score_request(**pms_MultiOutputRegressor_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MultiOutputRegressor_set_score_request.tolist() if hasattr(res_MultiOutputRegressor_set_score_request, 'tolist') else res_MultiOutputRegressor_set_score_request`\n  }\n\n  /**\n    Estimators used for predictions.\n   */\n  get estimators_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before accessing estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputRegressor_estimators_ = bridgeMultiOutputRegressor[${this.id}].estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputRegressor_estimators_.tolist() if hasattr(attr_MultiOutputRegressor_estimators_, 'tolist') else attr_MultiOutputRegressor_estimators_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying `estimator` exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputRegressor_n_features_in_ = bridgeMultiOutputRegressor[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputRegressor_n_features_in_.tolist() if hasattr(attr_MultiOutputRegressor_n_features_in_, 'tolist') else attr_MultiOutputRegressor_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying estimators expose such an attribute when fit.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MultiOutputRegressor instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MultiOutputRegressor must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MultiOutputRegressor_feature_names_in_ = bridgeMultiOutputRegressor[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MultiOutputRegressor_feature_names_in_.tolist() if hasattr(attr_MultiOutputRegressor_feature_names_in_, 'tolist') else attr_MultiOutputRegressor_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  A multi-label model that arranges regressions into a chain.\n\n  Each model makes a prediction in the order specified by the chain using all of the available features provided to the model plus the predictions of models that are earlier in the chain.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../multiclass.html#regressorchain).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.RegressorChain.html)\n */\nexport class RegressorChain {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The base estimator from which the regressor chain is built.\n     */\n    base_estimator?: any\n\n    /**\n      If `undefined`, the order will be determined by the order of columns in the label matrix Y.:\n     */\n    order?: ArrayLike | 'random'\n\n    /**\n      Determines whether to use cross validated predictions or true labels for the results of previous estimators in the chain. Possible inputs for cv are:\n     */\n    cv?: number\n\n    /**\n      If `order='random'`, determines random number generation for the chain order. In addition, it controls the random seed given at each `base_estimator` at each chaining iteration. Thus, it is only used when `base_estimator` exposes a `random_state`. Pass an int for reproducible output across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      If `true`, chain progress is output as each model is completed.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean\n  }) {\n    this.id = `RegressorChain${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('RegressorChain.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.multioutput import RegressorChain\ntry: bridgeRegressorChain\nexcept NameError: bridgeRegressorChain = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_RegressorChain = {'base_estimator': ${this.opts['base_estimator'] ?? undefined}, 'order': np.array(${this.opts['order'] ?? undefined}) if ${this.opts['order'] !== undefined} else None, 'cv': ${this.opts['cv'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}}\n\nctor_RegressorChain = {k: v for k, v in ctor_RegressorChain.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRegressorChain[${this.id}] = RegressorChain(**ctor_RegressorChain)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRegressorChain[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to data matrix X and targets Y.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      The target values.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Parameters passed to the `fit` method at each step of the regressor chain.\n     */\n    fit_params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RegressorChain must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RegressorChain_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_RegressorChain_fit = {k: v for k, v in pms_RegressorChain_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RegressorChain_fit = bridgeRegressorChain[${this.id}].fit(**pms_RegressorChain_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RegressorChain_fit.tolist() if hasattr(res_RegressorChain_fit, 'tolist') else res_RegressorChain_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RegressorChain must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RegressorChain_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_RegressorChain_get_metadata_routing = {k: v for k, v in pms_RegressorChain_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RegressorChain_get_metadata_routing = bridgeRegressorChain[${this.id}].get_metadata_routing(**pms_RegressorChain_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RegressorChain_get_metadata_routing.tolist() if hasattr(res_RegressorChain_get_metadata_routing, 'tolist') else res_RegressorChain_get_metadata_routing`\n  }\n\n  /**\n    Predict on the data matrix X using the ClassifierChain model.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RegressorChain must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RegressorChain_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_RegressorChain_predict = {k: v for k, v in pms_RegressorChain_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RegressorChain_predict = bridgeRegressorChain[${this.id}].predict(**pms_RegressorChain_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RegressorChain_predict.tolist() if hasattr(res_RegressorChain_predict, 'tolist') else res_RegressorChain_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RegressorChain must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RegressorChain_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_RegressorChain_score = {k: v for k, v in pms_RegressorChain_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RegressorChain_score = bridgeRegressorChain[${this.id}].score(**pms_RegressorChain_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RegressorChain_score.tolist() if hasattr(res_RegressorChain_score, 'tolist') else res_RegressorChain_score`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RegressorChain must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RegressorChain_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_RegressorChain_set_score_request = {k: v for k, v in pms_RegressorChain_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RegressorChain_set_score_request = bridgeRegressorChain[${this.id}].set_score_request(**pms_RegressorChain_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RegressorChain_set_score_request.tolist() if hasattr(res_RegressorChain_set_score_request, 'tolist') else res_RegressorChain_set_score_request`\n  }\n\n  /**\n    A list of clones of base_estimator.\n   */\n  get estimators_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RegressorChain must call init() before accessing estimators_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RegressorChain_estimators_ = bridgeRegressorChain[${this.id}].estimators_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RegressorChain_estimators_.tolist() if hasattr(attr_RegressorChain_estimators_, 'tolist') else attr_RegressorChain_estimators_`\n    })()\n  }\n\n  /**\n    The order of labels in the classifier chain.\n   */\n  get order_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RegressorChain must call init() before accessing order_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RegressorChain_order_ = bridgeRegressorChain[${this.id}].order_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RegressorChain_order_.tolist() if hasattr(attr_RegressorChain_order_, 'tolist') else attr_RegressorChain_order_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Only defined if the underlying `base_estimator` exposes such an attribute when fit.\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RegressorChain must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RegressorChain_n_features_in_ = bridgeRegressorChain[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RegressorChain_n_features_in_.tolist() if hasattr(attr_RegressorChain_n_features_in_, 'tolist') else attr_RegressorChain_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This RegressorChain instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RegressorChain must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_RegressorChain_feature_names_in_ = bridgeRegressorChain[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_RegressorChain_feature_names_in_.tolist() if hasattr(attr_RegressorChain_feature_names_in_, 'tolist') else attr_RegressorChain_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":["crypto","crypto","crypto"]}