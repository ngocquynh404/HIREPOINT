{"version":3,"sources":["../../../src/generated/neural_network/BernoulliRBM.ts","../../../src/generated/neural_network/MLPClassifier.ts","../../../src/generated/neural_network/MLPRegressor.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Bernoulli Restricted Boltzmann Machine (RBM).\n\n  A Restricted Boltzmann Machine with binary visible units and binary hidden units. Parameters are estimated using Stochastic Maximum Likelihood (SML), also known as Persistent Contrastive Divergence (PCD) \\[2\\].\n\n  The time complexity of this implementation is `O(d \\*\\* 2)` assuming d ~ n_features ~ n_components.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../neural_networks_unsupervised.html#rbm).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.BernoulliRBM.html)\n */\nexport class BernoulliRBM {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of binary hidden units.\n\n      @defaultValue `256`\n     */\n    n_components?: number\n\n    /**\n      The learning rate for weight updates. It is *highly* recommended to tune this hyper-parameter. Reasonable values are in the 10\\*\\*\\[0., -3.\\] range.\n\n      @defaultValue `0.1`\n     */\n    learning_rate?: number\n\n    /**\n      Number of examples per minibatch.\n\n      @defaultValue `10`\n     */\n    batch_size?: number\n\n    /**\n      Number of iterations/sweeps over the training dataset to perform during training.\n\n      @defaultValue `10`\n     */\n    n_iter?: number\n\n    /**\n      The verbosity level. The default, zero, means silent mode. Range of values is \\[0, inf\\].\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      Determines random number generation for:\n     */\n    random_state?: number\n  }) {\n    this.id = `BernoulliRBM${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('BernoulliRBM.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.neural_network import BernoulliRBM\ntry: bridgeBernoulliRBM\nexcept NameError: bridgeBernoulliRBM = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_BernoulliRBM = {'n_components': ${this.opts['n_components'] ?? undefined}, 'learning_rate': ${this.opts['learning_rate'] ?? undefined}, 'batch_size': ${this.opts['batch_size'] ?? undefined}, 'n_iter': ${this.opts['n_iter'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_BernoulliRBM = {k: v for k, v in ctor_BernoulliRBM.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeBernoulliRBM[${this.id}] = BernoulliRBM(**ctor_BernoulliRBM)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeBernoulliRBM[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to the data X.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_BernoulliRBM_fit = {k: v for k, v in pms_BernoulliRBM_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_fit = bridgeBernoulliRBM[${this.id}].fit(**pms_BernoulliRBM_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_fit.tolist() if hasattr(res_BernoulliRBM_fit, 'tolist') else res_BernoulliRBM_fit`\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_BernoulliRBM_fit_transform = {k: v for k, v in pms_BernoulliRBM_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_fit_transform = bridgeBernoulliRBM[${this.id}].fit_transform(**pms_BernoulliRBM_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_fit_transform.tolist() if hasattr(res_BernoulliRBM_fit_transform, 'tolist') else res_BernoulliRBM_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class_name0\", \"class_name1\", \"class_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in `fit`.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_BernoulliRBM_get_feature_names_out = {k: v for k, v in pms_BernoulliRBM_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_get_feature_names_out = bridgeBernoulliRBM[${this.id}].get_feature_names_out(**pms_BernoulliRBM_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_get_feature_names_out.tolist() if hasattr(res_BernoulliRBM_get_feature_names_out, 'tolist') else res_BernoulliRBM_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_BernoulliRBM_get_metadata_routing = {k: v for k, v in pms_BernoulliRBM_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_get_metadata_routing = bridgeBernoulliRBM[${this.id}].get_metadata_routing(**pms_BernoulliRBM_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_get_metadata_routing.tolist() if hasattr(res_BernoulliRBM_get_metadata_routing, 'tolist') else res_BernoulliRBM_get_metadata_routing`\n  }\n\n  /**\n    Perform one Gibbs sampling step.\n   */\n  async gibbs(opts: {\n    /**\n      Values of the visible layer to start from.\n     */\n    v?: NDArray[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before gibbs()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_gibbs = {'v': np.array(${opts['v'] ?? undefined}) if ${opts['v'] !== undefined} else None}\n\npms_BernoulliRBM_gibbs = {k: v for k, v in pms_BernoulliRBM_gibbs.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_gibbs = bridgeBernoulliRBM[${this.id}].gibbs(**pms_BernoulliRBM_gibbs)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_gibbs.tolist() if hasattr(res_BernoulliRBM_gibbs, 'tolist') else res_BernoulliRBM_gibbs`\n  }\n\n  /**\n    Fit the model to the partial segment of the data X.\n   */\n  async partial_fit(opts: {\n    /**\n      Training data.\n     */\n    X?: NDArray[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_BernoulliRBM_partial_fit = {k: v for k, v in pms_BernoulliRBM_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_partial_fit = bridgeBernoulliRBM[${this.id}].partial_fit(**pms_BernoulliRBM_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_partial_fit.tolist() if hasattr(res_BernoulliRBM_partial_fit, 'tolist') else res_BernoulliRBM_partial_fit`\n  }\n\n  /**\n    Compute the pseudo-likelihood of X.\n   */\n  async score_samples(opts: {\n    /**\n      Values of the visible layer. Must be all-boolean (not checked).\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before score_samples()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_score_samples = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_BernoulliRBM_score_samples = {k: v for k, v in pms_BernoulliRBM_score_samples.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_score_samples = bridgeBernoulliRBM[${this.id}].score_samples(**pms_BernoulliRBM_score_samples)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_score_samples.tolist() if hasattr(res_BernoulliRBM_score_samples, 'tolist') else res_BernoulliRBM_score_samples`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_BernoulliRBM_set_output = {k: v for k, v in pms_BernoulliRBM_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_set_output = bridgeBernoulliRBM[${this.id}].set_output(**pms_BernoulliRBM_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_set_output.tolist() if hasattr(res_BernoulliRBM_set_output, 'tolist') else res_BernoulliRBM_set_output`\n  }\n\n  /**\n    Compute the hidden layer activation probabilities, P(h=1|v=X).\n   */\n  async transform(opts: {\n    /**\n      The data to be transformed.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('BernoulliRBM must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_BernoulliRBM_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_BernoulliRBM_transform = {k: v for k, v in pms_BernoulliRBM_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_BernoulliRBM_transform = bridgeBernoulliRBM[${this.id}].transform(**pms_BernoulliRBM_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_BernoulliRBM_transform.tolist() if hasattr(res_BernoulliRBM_transform, 'tolist') else res_BernoulliRBM_transform`\n  }\n\n  /**\n    Biases of the hidden units.\n   */\n  get intercept_hidden_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing intercept_hidden_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_intercept_hidden_ = bridgeBernoulliRBM[${this.id}].intercept_hidden_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_intercept_hidden_.tolist() if hasattr(attr_BernoulliRBM_intercept_hidden_, 'tolist') else attr_BernoulliRBM_intercept_hidden_`\n    })()\n  }\n\n  /**\n    Biases of the visible units.\n   */\n  get intercept_visible_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing intercept_visible_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_intercept_visible_ = bridgeBernoulliRBM[${this.id}].intercept_visible_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_intercept_visible_.tolist() if hasattr(attr_BernoulliRBM_intercept_visible_, 'tolist') else attr_BernoulliRBM_intercept_visible_`\n    })()\n  }\n\n  /**\n    Weight matrix, where `n_features` is the number of visible units and `n_components` is the number of hidden units.\n   */\n  get components_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing components_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_components_ = bridgeBernoulliRBM[${this.id}].components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_components_.tolist() if hasattr(attr_BernoulliRBM_components_, 'tolist') else attr_BernoulliRBM_components_`\n    })()\n  }\n\n  /**\n    Hidden Activation sampled from the model distribution, where `batch_size` is the number of examples per minibatch and `n_components` is the number of hidden units.\n   */\n  get h_samples_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing h_samples_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_h_samples_ = bridgeBernoulliRBM[${this.id}].h_samples_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_h_samples_.tolist() if hasattr(attr_BernoulliRBM_h_samples_, 'tolist') else attr_BernoulliRBM_h_samples_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_n_features_in_ = bridgeBernoulliRBM[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_n_features_in_.tolist() if hasattr(attr_BernoulliRBM_n_features_in_, 'tolist') else attr_BernoulliRBM_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This BernoulliRBM instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'BernoulliRBM must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_BernoulliRBM_feature_names_in_ = bridgeBernoulliRBM[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_BernoulliRBM_feature_names_in_.tolist() if hasattr(attr_BernoulliRBM_feature_names_in_, 'tolist') else attr_BernoulliRBM_feature_names_in_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Multi-layer Perceptron classifier.\n\n  This model optimizes the log-loss function using LBFGS or stochastic gradient descent.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html)\n */\nexport class MLPClassifier {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The ith element represents the number of neurons in the ith hidden layer.\n     */\n    hidden_layer_sizes?: any\n\n    /**\n      Activation function for the hidden layer.\n\n      @defaultValue `'relu'`\n     */\n    activation?: 'identity' | 'logistic' | 'tanh' | 'relu'\n\n    /**\n      The solver for weight optimization.\n\n      @defaultValue `'adam'`\n     */\n    solver?: 'lbfgs' | 'sgd' | 'adam'\n\n    /**\n      Strength of the L2 regularization term. The L2 regularization term is divided by the sample size when added to the loss.\n\n      For an example usage and visualization of varying regularization, see [Varying regularization in Multi-layer Perceptron](https://scikit-learn.org/stable/modules/generated/../../auto_examples/neural_networks/plot_mlp_alpha.html#sphx-glr-auto-examples-neural-networks-plot-mlp-alpha-py).\n\n      @defaultValue `0.0001`\n     */\n    alpha?: number\n\n    /**\n      Size of minibatches for stochastic optimizers. If the solver is ‘lbfgs’, the classifier will not use minibatch. When set to “auto”, `batch_size=min(200, n_samples)`.\n\n      @defaultValue `'auto'`\n     */\n    batch_size?: number\n\n    /**\n      Learning rate schedule for weight updates.\n\n      @defaultValue `'constant'`\n     */\n    learning_rate?: 'constant' | 'invscaling' | 'adaptive'\n\n    /**\n      The initial learning rate used. It controls the step-size in updating the weights. Only used when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `0.001`\n     */\n    learning_rate_init?: number\n\n    /**\n      The exponent for inverse scaling learning rate. It is used in updating effective learning rate when the learning_rate is set to ‘invscaling’. Only used when solver=’sgd’.\n\n      @defaultValue `0.5`\n     */\n    power_t?: number\n\n    /**\n      Maximum number of iterations. The solver iterates until convergence (determined by ‘tol’) or this number of iterations. For stochastic solvers (‘sgd’, ‘adam’), note that this determines the number of epochs (how many times each data point will be used), not the number of gradient steps.\n\n      @defaultValue `200`\n     */\n    max_iter?: number\n\n    /**\n      Whether to shuffle samples in each iteration. Only used when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `true`\n     */\n    shuffle?: boolean\n\n    /**\n      Determines random number generation for weights and bias initialization, train-test split if early stopping is used, and batch sampling when solver=’sgd’ or ‘adam’. Pass an int for reproducible results across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      Tolerance for the optimization. When the loss or score is not improving by at least `tol` for `n_iter_no_change` consecutive iterations, unless `learning_rate` is set to ‘adaptive’, convergence is considered to be reached and training stops.\n\n      @defaultValue `0.0001`\n     */\n    tol?: number\n\n    /**\n      Whether to print progress messages to stdout.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean\n\n    /**\n      When set to `true`, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See [the Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-warm_start).\n\n      @defaultValue `false`\n     */\n    warm_start?: boolean\n\n    /**\n      Momentum for gradient descent update. Should be between 0 and 1. Only used when solver=’sgd’.\n\n      @defaultValue `0.9`\n     */\n    momentum?: number\n\n    /**\n      Whether to use Nesterov’s momentum. Only used when solver=’sgd’ and momentum > 0.\n\n      @defaultValue `true`\n     */\n    nesterovs_momentum?: boolean\n\n    /**\n      Whether to use early stopping to terminate training when validation score is not improving. If set to true, it will automatically set aside 10% of training data as validation and terminate training when validation score is not improving by at least `tol` for `n_iter_no_change` consecutive epochs. The split is stratified, except in a multilabel setting. If early stopping is `false`, then the training stops when the training loss does not improve by more than tol for n_iter_no_change consecutive passes over the training set. Only effective when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `false`\n     */\n    early_stopping?: boolean\n\n    /**\n      The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is `true`.\n\n      @defaultValue `0.1`\n     */\n    validation_fraction?: number\n\n    /**\n      Exponential decay rate for estimates of first moment vector in adam, should be in \\[0, 1). Only used when solver=’adam’.\n\n      @defaultValue `0.9`\n     */\n    beta_1?: number\n\n    /**\n      Exponential decay rate for estimates of second moment vector in adam, should be in \\[0, 1). Only used when solver=’adam’.\n\n      @defaultValue `0.999`\n     */\n    beta_2?: number\n\n    /**\n      Value for numerical stability in adam. Only used when solver=’adam’.\n\n      @defaultValue `1e-8`\n     */\n    epsilon?: number\n\n    /**\n      Maximum number of epochs to not meet `tol` improvement. Only effective when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `10`\n     */\n    n_iter_no_change?: number\n\n    /**\n      Only used when solver=’lbfgs’. Maximum number of loss function calls. The solver iterates until convergence (determined by ‘tol’), number of iterations reaches max_iter, or this number of loss function calls. Note that number of loss function calls will be greater than or equal to the number of iterations for the `MLPClassifier`.\n\n      @defaultValue `15000`\n     */\n    max_fun?: number\n  }) {\n    this.id = `MLPClassifier${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MLPClassifier.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\ntry: bridgeMLPClassifier\nexcept NameError: bridgeMLPClassifier = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MLPClassifier = {'hidden_layer_sizes': np.array(${this.opts['hidden_layer_sizes'] ?? undefined}) if ${this.opts['hidden_layer_sizes'] !== undefined} else None, 'activation': ${this.opts['activation'] ?? undefined}, 'solver': ${this.opts['solver'] ?? undefined}, 'alpha': ${this.opts['alpha'] ?? undefined}, 'batch_size': ${this.opts['batch_size'] ?? undefined}, 'learning_rate': ${this.opts['learning_rate'] ?? undefined}, 'learning_rate_init': ${this.opts['learning_rate_init'] ?? undefined}, 'power_t': ${this.opts['power_t'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'warm_start': ${this.opts['warm_start'] ?? undefined}, 'momentum': ${this.opts['momentum'] ?? undefined}, 'nesterovs_momentum': ${this.opts['nesterovs_momentum'] ?? undefined}, 'early_stopping': ${this.opts['early_stopping'] ?? undefined}, 'validation_fraction': ${this.opts['validation_fraction'] ?? undefined}, 'beta_1': ${this.opts['beta_1'] ?? undefined}, 'beta_2': ${this.opts['beta_2'] ?? undefined}, 'epsilon': ${this.opts['epsilon'] ?? undefined}, 'n_iter_no_change': ${this.opts['n_iter_no_change'] ?? undefined}, 'max_fun': ${this.opts['max_fun'] ?? undefined}}\n\nctor_MLPClassifier = {k: v for k, v in ctor_MLPClassifier.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMLPClassifier[${this.id}] = MLPClassifier(**ctor_MLPClassifier)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMLPClassifier[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to data matrix X and target(s) y.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: NDArray | SparseMatrix[]\n\n    /**\n      The target values (class labels in classification, real numbers in regression).\n     */\n    y?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_MLPClassifier_fit = {k: v for k, v in pms_MLPClassifier_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_fit = bridgeMLPClassifier[${this.id}].fit(**pms_MLPClassifier_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_fit.tolist() if hasattr(res_MLPClassifier_fit, 'tolist') else res_MLPClassifier_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_MLPClassifier_get_metadata_routing = {k: v for k, v in pms_MLPClassifier_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_get_metadata_routing = bridgeMLPClassifier[${this.id}].get_metadata_routing(**pms_MLPClassifier_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_get_metadata_routing.tolist() if hasattr(res_MLPClassifier_get_metadata_routing, 'tolist') else res_MLPClassifier_get_metadata_routing`\n  }\n\n  /**\n    Update the model with a single iteration over the given data.\n   */\n  async partial_fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      The target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Classes across all calls to partial_fit. Can be obtained via `np.unique(y_all)`, where y_all is the target vector of the entire dataset. This argument is required for the first call to partial_fit and can be omitted in the subsequent calls. Note that y doesn’t need to contain all labels in `classes`.\n     */\n    classes?: any[]\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'classes': np.array(${opts['classes'] ?? undefined}) if ${opts['classes'] !== undefined} else None}\n\npms_MLPClassifier_partial_fit = {k: v for k, v in pms_MLPClassifier_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_partial_fit = bridgeMLPClassifier[${this.id}].partial_fit(**pms_MLPClassifier_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_partial_fit.tolist() if hasattr(res_MLPClassifier_partial_fit, 'tolist') else res_MLPClassifier_partial_fit`\n  }\n\n  /**\n    Predict using the multi-layer perceptron classifier.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MLPClassifier_predict = {k: v for k, v in pms_MLPClassifier_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_predict = bridgeMLPClassifier[${this.id}].predict(**pms_MLPClassifier_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_predict.tolist() if hasattr(res_MLPClassifier_predict, 'tolist') else res_MLPClassifier_predict`\n  }\n\n  /**\n    Return the log of probability estimates.\n   */\n  async predict_log_proba(opts: {\n    /**\n      The input data.\n     */\n    X?: NDArray[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before predict_log_proba()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_predict_log_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MLPClassifier_predict_log_proba = {k: v for k, v in pms_MLPClassifier_predict_log_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_predict_log_proba = bridgeMLPClassifier[${this.id}].predict_log_proba(**pms_MLPClassifier_predict_log_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_predict_log_proba.tolist() if hasattr(res_MLPClassifier_predict_log_proba, 'tolist') else res_MLPClassifier_predict_log_proba`\n  }\n\n  /**\n    Probability estimates.\n   */\n  async predict_proba(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before predict_proba()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_predict_proba = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MLPClassifier_predict_proba = {k: v for k, v in pms_MLPClassifier_predict_proba.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_predict_proba = bridgeMLPClassifier[${this.id}].predict_proba(**pms_MLPClassifier_predict_proba)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_predict_proba.tolist() if hasattr(res_MLPClassifier_predict_proba, 'tolist') else res_MLPClassifier_predict_proba`\n  }\n\n  /**\n    Return the mean accuracy on the given test data and labels.\n\n    In multi-label classification, this is the subset accuracy which is a harsh metric since you require for each sample that each label set be correctly predicted.\n   */\n  async score(opts: {\n    /**\n      Test samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True labels for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_MLPClassifier_score = {k: v for k, v in pms_MLPClassifier_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_score = bridgeMLPClassifier[${this.id}].score(**pms_MLPClassifier_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_score.tolist() if hasattr(res_MLPClassifier_score, 'tolist') else res_MLPClassifier_score`\n  }\n\n  /**\n    Request metadata passed to the `partial_fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_partial_fit_request(opts: {\n    /**\n      Metadata routing for `classes` parameter in `partial_fit`.\n     */\n    classes?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before set_partial_fit_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_set_partial_fit_request = {'classes': ${opts['classes'] ?? undefined}}\n\npms_MLPClassifier_set_partial_fit_request = {k: v for k, v in pms_MLPClassifier_set_partial_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_set_partial_fit_request = bridgeMLPClassifier[${this.id}].set_partial_fit_request(**pms_MLPClassifier_set_partial_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_set_partial_fit_request.tolist() if hasattr(res_MLPClassifier_set_partial_fit_request, 'tolist') else res_MLPClassifier_set_partial_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPClassifier_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MLPClassifier_set_score_request = {k: v for k, v in pms_MLPClassifier_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPClassifier_set_score_request = bridgeMLPClassifier[${this.id}].set_score_request(**pms_MLPClassifier_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPClassifier_set_score_request.tolist() if hasattr(res_MLPClassifier_set_score_request, 'tolist') else res_MLPClassifier_set_score_request`\n  }\n\n  /**\n    Class labels for each output.\n   */\n  get classes_(): Promise<NDArray | any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing classes_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_classes_ = bridgeMLPClassifier[${this.id}].classes_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_classes_.tolist() if hasattr(attr_MLPClassifier_classes_, 'tolist') else attr_MLPClassifier_classes_`\n    })()\n  }\n\n  /**\n    The current loss computed with the loss function.\n   */\n  get loss_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before accessing loss_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_loss_ = bridgeMLPClassifier[${this.id}].loss_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_loss_.tolist() if hasattr(attr_MLPClassifier_loss_, 'tolist') else attr_MLPClassifier_loss_`\n    })()\n  }\n\n  /**\n    The minimum loss reached by the solver throughout fitting. If `early_stopping=True`, this attribute is set to `undefined`. Refer to the `best_validation_score_` fitted attribute instead.\n   */\n  get best_loss_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing best_loss_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_best_loss_ = bridgeMLPClassifier[${this.id}].best_loss_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_best_loss_.tolist() if hasattr(attr_MLPClassifier_best_loss_, 'tolist') else attr_MLPClassifier_best_loss_`\n    })()\n  }\n\n  /**\n    The ith element in the list represents the loss at the ith iteration.\n   */\n  get loss_curve_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing loss_curve_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_loss_curve_ = bridgeMLPClassifier[${this.id}].loss_curve_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_loss_curve_.tolist() if hasattr(attr_MLPClassifier_loss_curve_, 'tolist') else attr_MLPClassifier_loss_curve_`\n    })()\n  }\n\n  /**\n    The score at each iteration on a held-out validation set. The score reported is the accuracy score. Only available if `early_stopping=True`, otherwise the attribute is set to `undefined`.\n   */\n  get validation_scores_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing validation_scores_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_validation_scores_ = bridgeMLPClassifier[${this.id}].validation_scores_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_validation_scores_.tolist() if hasattr(attr_MLPClassifier_validation_scores_, 'tolist') else attr_MLPClassifier_validation_scores_`\n    })()\n  }\n\n  /**\n    The best validation score (i.e. accuracy score) that triggered the early stopping. Only available if `early_stopping=True`, otherwise the attribute is set to `undefined`.\n   */\n  get best_validation_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing best_validation_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_best_validation_score_ = bridgeMLPClassifier[${this.id}].best_validation_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_best_validation_score_.tolist() if hasattr(attr_MLPClassifier_best_validation_score_, 'tolist') else attr_MLPClassifier_best_validation_score_`\n    })()\n  }\n\n  /**\n    The number of training samples seen by the solver during fitting.\n   */\n  get t_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before accessing t_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_t_ = bridgeMLPClassifier[${this.id}].t_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_t_.tolist() if hasattr(attr_MLPClassifier_t_, 'tolist') else attr_MLPClassifier_t_`\n    })()\n  }\n\n  /**\n    The ith element in the list represents the weight matrix corresponding to layer i.\n   */\n  get coefs_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before accessing coefs_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_coefs_ = bridgeMLPClassifier[${this.id}].coefs_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_coefs_.tolist() if hasattr(attr_MLPClassifier_coefs_, 'tolist') else attr_MLPClassifier_coefs_`\n    })()\n  }\n\n  /**\n    The ith element in the list represents the bias vector corresponding to layer i + 1.\n   */\n  get intercepts_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing intercepts_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_intercepts_ = bridgeMLPClassifier[${this.id}].intercepts_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_intercepts_.tolist() if hasattr(attr_MLPClassifier_intercepts_, 'tolist') else attr_MLPClassifier_intercepts_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_n_features_in_ = bridgeMLPClassifier[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_n_features_in_.tolist() if hasattr(attr_MLPClassifier_n_features_in_, 'tolist') else attr_MLPClassifier_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_feature_names_in_ = bridgeMLPClassifier[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_feature_names_in_.tolist() if hasattr(attr_MLPClassifier_feature_names_in_, 'tolist') else attr_MLPClassifier_feature_names_in_`\n    })()\n  }\n\n  /**\n    The number of iterations the solver has run.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPClassifier must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_n_iter_ = bridgeMLPClassifier[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_n_iter_.tolist() if hasattr(attr_MLPClassifier_n_iter_, 'tolist') else attr_MLPClassifier_n_iter_`\n    })()\n  }\n\n  /**\n    Number of layers.\n   */\n  get n_layers_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing n_layers_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_n_layers_ = bridgeMLPClassifier[${this.id}].n_layers_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_n_layers_.tolist() if hasattr(attr_MLPClassifier_n_layers_, 'tolist') else attr_MLPClassifier_n_layers_`\n    })()\n  }\n\n  /**\n    Number of outputs.\n   */\n  get n_outputs_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing n_outputs_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_n_outputs_ = bridgeMLPClassifier[${this.id}].n_outputs_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_n_outputs_.tolist() if hasattr(attr_MLPClassifier_n_outputs_, 'tolist') else attr_MLPClassifier_n_outputs_`\n    })()\n  }\n\n  /**\n    Name of the output activation function.\n   */\n  get out_activation_(): Promise<string> {\n    if (this._isDisposed) {\n      throw new Error('This MLPClassifier instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPClassifier must call init() before accessing out_activation_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPClassifier_out_activation_ = bridgeMLPClassifier[${this.id}].out_activation_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPClassifier_out_activation_.tolist() if hasattr(attr_MLPClassifier_out_activation_, 'tolist') else attr_MLPClassifier_out_activation_`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Multi-layer Perceptron regressor.\n\n  This model optimizes the squared error using LBFGS or stochastic gradient descent.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html)\n */\nexport class MLPRegressor {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The ith element represents the number of neurons in the ith hidden layer.\n     */\n    hidden_layer_sizes?: any\n\n    /**\n      Activation function for the hidden layer.\n\n      @defaultValue `'relu'`\n     */\n    activation?: 'identity' | 'logistic' | 'tanh' | 'relu'\n\n    /**\n      The solver for weight optimization.\n\n      @defaultValue `'adam'`\n     */\n    solver?: 'lbfgs' | 'sgd' | 'adam'\n\n    /**\n      Strength of the L2 regularization term. The L2 regularization term is divided by the sample size when added to the loss.\n\n      @defaultValue `0.0001`\n     */\n    alpha?: number\n\n    /**\n      Size of minibatches for stochastic optimizers. If the solver is ‘lbfgs’, the regressor will not use minibatch. When set to “auto”, `batch_size=min(200, n_samples)`.\n\n      @defaultValue `'auto'`\n     */\n    batch_size?: number\n\n    /**\n      Learning rate schedule for weight updates.\n\n      @defaultValue `'constant'`\n     */\n    learning_rate?: 'constant' | 'invscaling' | 'adaptive'\n\n    /**\n      The initial learning rate used. It controls the step-size in updating the weights. Only used when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `0.001`\n     */\n    learning_rate_init?: number\n\n    /**\n      The exponent for inverse scaling learning rate. It is used in updating effective learning rate when the learning_rate is set to ‘invscaling’. Only used when solver=’sgd’.\n\n      @defaultValue `0.5`\n     */\n    power_t?: number\n\n    /**\n      Maximum number of iterations. The solver iterates until convergence (determined by ‘tol’) or this number of iterations. For stochastic solvers (‘sgd’, ‘adam’), note that this determines the number of epochs (how many times each data point will be used), not the number of gradient steps.\n\n      @defaultValue `200`\n     */\n    max_iter?: number\n\n    /**\n      Whether to shuffle samples in each iteration. Only used when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `true`\n     */\n    shuffle?: boolean\n\n    /**\n      Determines random number generation for weights and bias initialization, train-test split if early stopping is used, and batch sampling when solver=’sgd’ or ‘adam’. Pass an int for reproducible results across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      Tolerance for the optimization. When the loss or score is not improving by at least `tol` for `n_iter_no_change` consecutive iterations, unless `learning_rate` is set to ‘adaptive’, convergence is considered to be reached and training stops.\n\n      @defaultValue `0.0001`\n     */\n    tol?: number\n\n    /**\n      Whether to print progress messages to stdout.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean\n\n    /**\n      When set to `true`, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. See [the Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-warm_start).\n\n      @defaultValue `false`\n     */\n    warm_start?: boolean\n\n    /**\n      Momentum for gradient descent update. Should be between 0 and 1. Only used when solver=’sgd’.\n\n      @defaultValue `0.9`\n     */\n    momentum?: number\n\n    /**\n      Whether to use Nesterov’s momentum. Only used when solver=’sgd’ and momentum > 0.\n\n      @defaultValue `true`\n     */\n    nesterovs_momentum?: boolean\n\n    /**\n      Whether to use early stopping to terminate training when validation score is not improving. If set to `true`, it will automatically set aside `validation_fraction` of training data as validation and terminate training when validation score is not improving by at least `tol` for `n_iter_no_change` consecutive epochs. Only effective when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `false`\n     */\n    early_stopping?: boolean\n\n    /**\n      The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if early_stopping is `true`.\n\n      @defaultValue `0.1`\n     */\n    validation_fraction?: number\n\n    /**\n      Exponential decay rate for estimates of first moment vector in adam, should be in \\[0, 1). Only used when solver=’adam’.\n\n      @defaultValue `0.9`\n     */\n    beta_1?: number\n\n    /**\n      Exponential decay rate for estimates of second moment vector in adam, should be in \\[0, 1). Only used when solver=’adam’.\n\n      @defaultValue `0.999`\n     */\n    beta_2?: number\n\n    /**\n      Value for numerical stability in adam. Only used when solver=’adam’.\n\n      @defaultValue `1e-8`\n     */\n    epsilon?: number\n\n    /**\n      Maximum number of epochs to not meet `tol` improvement. Only effective when solver=’sgd’ or ‘adam’.\n\n      @defaultValue `10`\n     */\n    n_iter_no_change?: number\n\n    /**\n      Only used when solver=’lbfgs’. Maximum number of function calls. The solver iterates until convergence (determined by `tol`), number of iterations reaches max_iter, or this number of function calls. Note that number of function calls will be greater than or equal to the number of iterations for the MLPRegressor.\n\n      @defaultValue `15000`\n     */\n    max_fun?: number\n  }) {\n    this.id = `MLPRegressor${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MLPRegressor.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.neural_network import MLPRegressor\ntry: bridgeMLPRegressor\nexcept NameError: bridgeMLPRegressor = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MLPRegressor = {'hidden_layer_sizes': np.array(${this.opts['hidden_layer_sizes'] ?? undefined}) if ${this.opts['hidden_layer_sizes'] !== undefined} else None, 'activation': ${this.opts['activation'] ?? undefined}, 'solver': ${this.opts['solver'] ?? undefined}, 'alpha': ${this.opts['alpha'] ?? undefined}, 'batch_size': ${this.opts['batch_size'] ?? undefined}, 'learning_rate': ${this.opts['learning_rate'] ?? undefined}, 'learning_rate_init': ${this.opts['learning_rate_init'] ?? undefined}, 'power_t': ${this.opts['power_t'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'shuffle': ${this.opts['shuffle'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'warm_start': ${this.opts['warm_start'] ?? undefined}, 'momentum': ${this.opts['momentum'] ?? undefined}, 'nesterovs_momentum': ${this.opts['nesterovs_momentum'] ?? undefined}, 'early_stopping': ${this.opts['early_stopping'] ?? undefined}, 'validation_fraction': ${this.opts['validation_fraction'] ?? undefined}, 'beta_1': ${this.opts['beta_1'] ?? undefined}, 'beta_2': ${this.opts['beta_2'] ?? undefined}, 'epsilon': ${this.opts['epsilon'] ?? undefined}, 'n_iter_no_change': ${this.opts['n_iter_no_change'] ?? undefined}, 'max_fun': ${this.opts['max_fun'] ?? undefined}}\n\nctor_MLPRegressor = {k: v for k, v in ctor_MLPRegressor.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMLPRegressor[${this.id}] = MLPRegressor(**ctor_MLPRegressor)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMLPRegressor[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to data matrix X and target(s) y.\n   */\n  async fit(opts: {\n    /**\n      The input data.\n     */\n    X?: NDArray | SparseMatrix[]\n\n    /**\n      The target values (class labels in classification, real numbers in regression).\n     */\n    y?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_MLPRegressor_fit = {k: v for k, v in pms_MLPRegressor_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_fit = bridgeMLPRegressor[${this.id}].fit(**pms_MLPRegressor_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_fit.tolist() if hasattr(res_MLPRegressor_fit, 'tolist') else res_MLPRegressor_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_MLPRegressor_get_metadata_routing = {k: v for k, v in pms_MLPRegressor_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_get_metadata_routing = bridgeMLPRegressor[${this.id}].get_metadata_routing(**pms_MLPRegressor_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_get_metadata_routing.tolist() if hasattr(res_MLPRegressor_get_metadata_routing, 'tolist') else res_MLPRegressor_get_metadata_routing`\n  }\n\n  /**\n    Update the model with a single iteration over the given data.\n   */\n  async partial_fit(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      The target values.\n     */\n    y?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_MLPRegressor_partial_fit = {k: v for k, v in pms_MLPRegressor_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_partial_fit = bridgeMLPRegressor[${this.id}].partial_fit(**pms_MLPRegressor_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_partial_fit.tolist() if hasattr(res_MLPRegressor_partial_fit, 'tolist') else res_MLPRegressor_partial_fit`\n  }\n\n  /**\n    Predict using the multi-layer perceptron model.\n   */\n  async predict(opts: {\n    /**\n      The input data.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MLPRegressor_predict = {k: v for k, v in pms_MLPRegressor_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_predict = bridgeMLPRegressor[${this.id}].predict(**pms_MLPRegressor_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_predict.tolist() if hasattr(res_MLPRegressor_predict, 'tolist') else res_MLPRegressor_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_MLPRegressor_score = {k: v for k, v in pms_MLPRegressor_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_score = bridgeMLPRegressor[${this.id}].score(**pms_MLPRegressor_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_score.tolist() if hasattr(res_MLPRegressor_score, 'tolist') else res_MLPRegressor_score`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before set_score_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MLPRegressor_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_MLPRegressor_set_score_request = {k: v for k, v in pms_MLPRegressor_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MLPRegressor_set_score_request = bridgeMLPRegressor[${this.id}].set_score_request(**pms_MLPRegressor_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MLPRegressor_set_score_request.tolist() if hasattr(res_MLPRegressor_set_score_request, 'tolist') else res_MLPRegressor_set_score_request`\n  }\n\n  /**\n    The current loss computed with the loss function.\n   */\n  get loss_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before accessing loss_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_loss_ = bridgeMLPRegressor[${this.id}].loss_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_loss_.tolist() if hasattr(attr_MLPRegressor_loss_, 'tolist') else attr_MLPRegressor_loss_`\n    })()\n  }\n\n  /**\n    The minimum loss reached by the solver throughout fitting. If `early_stopping=True`, this attribute is set to `undefined`. Refer to the `best_validation_score_` fitted attribute instead. Only accessible when solver=’sgd’ or ‘adam’.\n   */\n  get best_loss_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing best_loss_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_best_loss_ = bridgeMLPRegressor[${this.id}].best_loss_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_best_loss_.tolist() if hasattr(attr_MLPRegressor_best_loss_, 'tolist') else attr_MLPRegressor_best_loss_`\n    })()\n  }\n\n  /**\n    Loss value evaluated at the end of each training step. The ith element in the list represents the loss at the ith iteration. Only accessible when solver=’sgd’ or ‘adam’.\n   */\n  get loss_curve_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing loss_curve_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_loss_curve_ = bridgeMLPRegressor[${this.id}].loss_curve_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_loss_curve_.tolist() if hasattr(attr_MLPRegressor_loss_curve_, 'tolist') else attr_MLPRegressor_loss_curve_`\n    })()\n  }\n\n  /**\n    The score at each iteration on a held-out validation set. The score reported is the R2 score. Only available if `early_stopping=True`, otherwise the attribute is set to `undefined`. Only accessible when solver=’sgd’ or ‘adam’.\n   */\n  get validation_scores_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing validation_scores_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_validation_scores_ = bridgeMLPRegressor[${this.id}].validation_scores_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_validation_scores_.tolist() if hasattr(attr_MLPRegressor_validation_scores_, 'tolist') else attr_MLPRegressor_validation_scores_`\n    })()\n  }\n\n  /**\n    The best validation score (i.e. R2 score) that triggered the early stopping. Only available if `early_stopping=True`, otherwise the attribute is set to `undefined`. Only accessible when solver=’sgd’ or ‘adam’.\n   */\n  get best_validation_score_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing best_validation_score_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_best_validation_score_ = bridgeMLPRegressor[${this.id}].best_validation_score_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_best_validation_score_.tolist() if hasattr(attr_MLPRegressor_best_validation_score_, 'tolist') else attr_MLPRegressor_best_validation_score_`\n    })()\n  }\n\n  /**\n    The number of training samples seen by the solver during fitting. Mathematically equals `n_iters \\* X.shape\\[0\\]`, it means `time_step` and it is used by optimizer’s learning rate scheduler.\n   */\n  get t_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before accessing t_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_t_ = bridgeMLPRegressor[${this.id}].t_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_t_.tolist() if hasattr(attr_MLPRegressor_t_, 'tolist') else attr_MLPRegressor_t_`\n    })()\n  }\n\n  /**\n    The ith element in the list represents the weight matrix corresponding to layer i.\n   */\n  get coefs_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before accessing coefs_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_coefs_ = bridgeMLPRegressor[${this.id}].coefs_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_coefs_.tolist() if hasattr(attr_MLPRegressor_coefs_, 'tolist') else attr_MLPRegressor_coefs_`\n    })()\n  }\n\n  /**\n    The ith element in the list represents the bias vector corresponding to layer i + 1.\n   */\n  get intercepts_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing intercepts_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_intercepts_ = bridgeMLPRegressor[${this.id}].intercepts_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_intercepts_.tolist() if hasattr(attr_MLPRegressor_intercepts_, 'tolist') else attr_MLPRegressor_intercepts_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_n_features_in_ = bridgeMLPRegressor[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_n_features_in_.tolist() if hasattr(attr_MLPRegressor_n_features_in_, 'tolist') else attr_MLPRegressor_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_feature_names_in_ = bridgeMLPRegressor[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_feature_names_in_.tolist() if hasattr(attr_MLPRegressor_feature_names_in_, 'tolist') else attr_MLPRegressor_feature_names_in_`\n    })()\n  }\n\n  /**\n    The number of iterations the solver has run.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MLPRegressor must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_n_iter_ = bridgeMLPRegressor[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_n_iter_.tolist() if hasattr(attr_MLPRegressor_n_iter_, 'tolist') else attr_MLPRegressor_n_iter_`\n    })()\n  }\n\n  /**\n    Number of layers.\n   */\n  get n_layers_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing n_layers_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_n_layers_ = bridgeMLPRegressor[${this.id}].n_layers_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_n_layers_.tolist() if hasattr(attr_MLPRegressor_n_layers_, 'tolist') else attr_MLPRegressor_n_layers_`\n    })()\n  }\n\n  /**\n    Number of outputs.\n   */\n  get n_outputs_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing n_outputs_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_n_outputs_ = bridgeMLPRegressor[${this.id}].n_outputs_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_n_outputs_.tolist() if hasattr(attr_MLPRegressor_n_outputs_, 'tolist') else attr_MLPRegressor_n_outputs_`\n    })()\n  }\n\n  /**\n    Name of the output activation function.\n   */\n  get out_activation_(): Promise<string> {\n    if (this._isDisposed) {\n      throw new Error('This MLPRegressor instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MLPRegressor must call init() before accessing out_activation_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MLPRegressor_out_activation_ = bridgeMLPRegressor[${this.id}].out_activation_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MLPRegressor_out_activation_.tolist() if hasattr(attr_MLPRegressor_out_activation_, 'tolist') else attr_MLPRegressor_out_activation_`\n    })()\n  }\n}\n"],"mappings":"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","names":["crypto","crypto"]}