{"version":3,"sources":["../../../src/generated/feature_selection/SelectorMixin.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Transformer mixin that performs feature selection given a support mask\n\n  This mixin provides a feature selector implementation with `transform` and `inverse_transform` functionality given an implementation of `_get_support_mask`.\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.SelectorMixin.html)\n */\nexport class SelectorMixin {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }) {\n    this.id = `SelectorMixin${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('SelectorMixin.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_selection import SelectorMixin\ntry: bridgeSelectorMixin\nexcept NameError: bridgeSelectorMixin = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_SelectorMixin = {'X': np.array(${this.opts['X'] ?? undefined}) if ${this.opts['X'] !== undefined} else None, 'y': np.array(${this.opts['y'] ?? undefined}) if ${this.opts['y'] !== undefined} else None, 'fit_params': ${this.opts['fit_params'] ?? undefined}}\n\nctor_SelectorMixin = {k: v for k, v in ctor_SelectorMixin.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeSelectorMixin[${this.id}] = SelectorMixin(**ctor_SelectorMixin)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeSelectorMixin[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit to data, then transform it.\n\n    Fits transformer to `X` and `y` with optional parameters `fit_params` and returns a transformed version of `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      Input samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values (`undefined` for unsupervised transformations).\n     */\n    y?: ArrayLike\n\n    /**\n      Additional fit parameters.\n     */\n    fit_params?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectorMixin must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'fit_params': ${opts['fit_params'] ?? undefined}}\n\npms_SelectorMixin_fit_transform = {k: v for k, v in pms_SelectorMixin_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_fit_transform = bridgeSelectorMixin[${this.id}].fit_transform(**pms_SelectorMixin_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_fit_transform.tolist() if hasattr(res_SelectorMixin_fit_transform, 'tolist') else res_SelectorMixin_fit_transform`\n  }\n\n  /**\n    Mask feature names according to selected features.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SelectorMixin must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_SelectorMixin_get_feature_names_out = {k: v for k, v in pms_SelectorMixin_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_get_feature_names_out = bridgeSelectorMixin[${this.id}].get_feature_names_out(**pms_SelectorMixin_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_get_feature_names_out.tolist() if hasattr(res_SelectorMixin_get_feature_names_out, 'tolist') else res_SelectorMixin_get_feature_names_out`\n  }\n\n  /**\n    Get a mask, or integer index, of the features selected.\n   */\n  async get_support(opts: {\n    /**\n      If `true`, the return value will be an array of integers, rather than a boolean mask.\n\n      @defaultValue `false`\n     */\n    indices?: boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectorMixin must call init() before get_support()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_get_support = {'indices': ${opts['indices'] ?? undefined}}\n\npms_SelectorMixin_get_support = {k: v for k, v in pms_SelectorMixin_get_support.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_get_support = bridgeSelectorMixin[${this.id}].get_support(**pms_SelectorMixin_get_support)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_get_support.tolist() if hasattr(res_SelectorMixin_get_support, 'tolist') else res_SelectorMixin_get_support`\n  }\n\n  /**\n    Reverse the transformation operation.\n   */\n  async inverse_transform(opts: {\n    /**\n      The input samples.\n     */\n    X?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'SelectorMixin must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_inverse_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_SelectorMixin_inverse_transform = {k: v for k, v in pms_SelectorMixin_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_inverse_transform = bridgeSelectorMixin[${this.id}].inverse_transform(**pms_SelectorMixin_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_inverse_transform.tolist() if hasattr(res_SelectorMixin_inverse_transform, 'tolist') else res_SelectorMixin_inverse_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectorMixin must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_SelectorMixin_set_output = {k: v for k, v in pms_SelectorMixin_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_set_output = bridgeSelectorMixin[${this.id}].set_output(**pms_SelectorMixin_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_set_output.tolist() if hasattr(res_SelectorMixin_set_output, 'tolist') else res_SelectorMixin_set_output`\n  }\n\n  /**\n    Reduce X to the selected features.\n   */\n  async transform(opts: {\n    /**\n      The input samples.\n     */\n    X?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectorMixin must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_SelectorMixin_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_SelectorMixin_transform = {k: v for k, v in pms_SelectorMixin_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_SelectorMixin_transform = bridgeSelectorMixin[${this.id}].transform(**pms_SelectorMixin_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_SelectorMixin_transform.tolist() if hasattr(res_SelectorMixin_transform, 'tolist') else res_SelectorMixin_transform`\n  }\n\n  /**\n    Transformed array.\n   */\n  get X_new(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This SelectorMixin instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('SelectorMixin must call init() before accessing X_new')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_SelectorMixin_X_new = bridgeSelectorMixin[${this.id}].X_new`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_SelectorMixin_X_new.tolist() if hasattr(attr_SelectorMixin_X_new, 'tolist') else attr_SelectorMixin_X_new`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}