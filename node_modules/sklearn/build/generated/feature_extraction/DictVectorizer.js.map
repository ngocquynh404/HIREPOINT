{"version":3,"sources":["../../../src/generated/feature_extraction/DictVectorizer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Transforms lists of feature-value mappings to vectors.\n\n  This transformer turns lists of mappings (dict-like objects) of feature names to feature values into Numpy arrays or scipy.sparse matrices for use with scikit-learn estimators.\n\n  When feature values are strings, this transformer will do a binary one-hot (aka one-of-K) coding: one boolean-valued feature is constructed for each of the possible string values that the feature can take on. For instance, a feature “f” that can take on the values “ham” and “spam” will become two features in the output, one signifying “f=ham”, the other “f=spam”.\n\n  If a feature value is a sequence or set of strings, this transformer will iterate over the values and will count the occurrences of each string value.\n\n  However, note that this transformer will only do a binary one-hot encoding when feature values are of type string. If categorical features are represented as numeric values such as int or iterables of strings, the DictVectorizer can be followed by [`OneHotEncoder`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder \"sklearn.preprocessing.OneHotEncoder\") to complete binary one-hot encoding.\n\n  Features that do not occur in a sample (mapping) will have a zero value in the resulting array/matrix.\n\n  For an efficiency comparison of the different feature extractors, see [FeatureHasher and DictVectorizer Comparison](https://scikit-learn.org/stable/modules/generated/../../auto_examples/text/plot_hashing_vs_dict_vectorizer.html#sphx-glr-auto-examples-text-plot-hashing-vs-dict-vectorizer-py).\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../feature_extraction.html#dict-feature-extraction).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html)\n */\nexport class DictVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The type of feature values. Passed to Numpy array/scipy.sparse matrix constructors as the dtype argument.\n     */\n    dtype?: any\n\n    /**\n      Separator string used when constructing new features for one-hot coding.\n\n      @defaultValue `'='`\n     */\n    separator?: string\n\n    /**\n      Whether transform should produce scipy.sparse matrices.\n\n      @defaultValue `true`\n     */\n    sparse?: boolean\n\n    /**\n      Whether `feature_names_` and `vocabulary_` should be sorted when fitting.\n\n      @defaultValue `true`\n     */\n    sort?: boolean\n  }) {\n    this.id = `DictVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DictVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction import DictVectorizer\ntry: bridgeDictVectorizer\nexcept NameError: bridgeDictVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_DictVectorizer = {'dtype': ${this.opts['dtype'] ?? undefined}, 'separator': ${this.opts['separator'] ?? undefined}, 'sparse': ${this.opts['sparse'] ?? undefined}, 'sort': ${this.opts['sort'] ?? undefined}}\n\nctor_DictVectorizer = {k: v for k, v in ctor_DictVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDictVectorizer[${this.id}] = DictVectorizer(**ctor_DictVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDictVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Learn a list of feature name -> indices mappings.\n   */\n  async fit(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any\n\n    /**\n      Ignored parameter.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_fit = {'X': ${opts['X'] ?? undefined}, 'y': ${opts['y'] ?? undefined}}\n\npms_DictVectorizer_fit = {k: v for k, v in pms_DictVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_fit = bridgeDictVectorizer[${this.id}].fit(**pms_DictVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_fit.tolist() if hasattr(res_DictVectorizer_fit, 'tolist') else res_DictVectorizer_fit`\n  }\n\n  /**\n    Learn a list of feature name -> indices mappings and transform X.\n\n    Like fit(X) followed by transform(X), but does not require materializing X in memory.\n   */\n  async fit_transform(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any\n\n    /**\n      Ignored parameter.\n     */\n    y?: any\n  }): Promise<SparseMatrix> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_fit_transform = {'X': ${opts['X'] ?? undefined}, 'y': ${opts['y'] ?? undefined}}\n\npms_DictVectorizer_fit_transform = {k: v for k, v in pms_DictVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_fit_transform = bridgeDictVectorizer[${this.id}].fit_transform(**pms_DictVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_fit_transform.tolist() if hasattr(res_DictVectorizer_fit_transform, 'tolist') else res_DictVectorizer_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Not used, present here for API consistency by convention.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_DictVectorizer_get_feature_names_out = {k: v for k, v in pms_DictVectorizer_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_get_feature_names_out = bridgeDictVectorizer[${this.id}].get_feature_names_out(**pms_DictVectorizer_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_get_feature_names_out.tolist() if hasattr(res_DictVectorizer_get_feature_names_out, 'tolist') else res_DictVectorizer_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_DictVectorizer_get_metadata_routing = {k: v for k, v in pms_DictVectorizer_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_get_metadata_routing = bridgeDictVectorizer[${this.id}].get_metadata_routing(**pms_DictVectorizer_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_get_metadata_routing.tolist() if hasattr(res_DictVectorizer_get_metadata_routing, 'tolist') else res_DictVectorizer_get_metadata_routing`\n  }\n\n  /**\n    Transform array or sparse matrix X back to feature mappings.\n\n    X must have been produced by this DictVectorizer’s transform or fit_transform method; it may only have passed through transformers that preserve the number of features and their order.\n\n    In the case of one-hot/one-of-K coding, the constructed feature names and values are returned rather than the original ones.\n   */\n  async inverse_transform(opts: {\n    /**\n      Sample matrix.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Constructor for feature mappings. Must conform to the collections.Mapping API.\n     */\n    dict_type?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_inverse_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'dict_type': ${opts['dict_type'] ?? undefined}}\n\npms_DictVectorizer_inverse_transform = {k: v for k, v in pms_DictVectorizer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_inverse_transform = bridgeDictVectorizer[${this.id}].inverse_transform(**pms_DictVectorizer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_inverse_transform.tolist() if hasattr(res_DictVectorizer_inverse_transform, 'tolist') else res_DictVectorizer_inverse_transform`\n  }\n\n  /**\n    Restrict the features to those in support using feature selection.\n\n    This function modifies the estimator in-place.\n   */\n  async restrict(opts: {\n    /**\n      Boolean mask or list of indices (as returned by the get_support member of feature selectors).\n     */\n    support?: ArrayLike\n\n    /**\n      Whether support is a list of indices.\n\n      @defaultValue `false`\n     */\n    indices?: boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before restrict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_restrict = {'support': ${opts['support'] ?? undefined}, 'indices': ${opts['indices'] ?? undefined}}\n\npms_DictVectorizer_restrict = {k: v for k, v in pms_DictVectorizer_restrict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_restrict = bridgeDictVectorizer[${this.id}].restrict(**pms_DictVectorizer_restrict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_restrict.tolist() if hasattr(res_DictVectorizer_restrict, 'tolist') else res_DictVectorizer_restrict`\n  }\n\n  /**\n    Request metadata passed to the `inverse_transform` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_inverse_transform_request(opts: {\n    /**\n      Metadata routing for `dict_type` parameter in `inverse_transform`.\n     */\n    dict_type?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before set_inverse_transform_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_set_inverse_transform_request = {'dict_type': ${opts['dict_type'] ?? undefined}}\n\npms_DictVectorizer_set_inverse_transform_request = {k: v for k, v in pms_DictVectorizer_set_inverse_transform_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_set_inverse_transform_request = bridgeDictVectorizer[${this.id}].set_inverse_transform_request(**pms_DictVectorizer_set_inverse_transform_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_set_inverse_transform_request.tolist() if hasattr(res_DictVectorizer_set_inverse_transform_request, 'tolist') else res_DictVectorizer_set_inverse_transform_request`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_DictVectorizer_set_output = {k: v for k, v in pms_DictVectorizer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_set_output = bridgeDictVectorizer[${this.id}].set_output(**pms_DictVectorizer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_set_output.tolist() if hasattr(res_DictVectorizer_set_output, 'tolist') else res_DictVectorizer_set_output`\n  }\n\n  /**\n    Transform feature->value dicts to array or sparse matrix.\n\n    Named features not encountered during fit or fit_transform will be silently ignored.\n   */\n  async transform(opts: {\n    /**\n      Dict(s) or Mapping(s) from feature names (arbitrary Python objects) to feature values (strings or convertible to dtype).\n     */\n    X?: any[]\n  }): Promise<SparseMatrix> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DictVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DictVectorizer_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_DictVectorizer_transform = {k: v for k, v in pms_DictVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DictVectorizer_transform = bridgeDictVectorizer[${this.id}].transform(**pms_DictVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DictVectorizer_transform.tolist() if hasattr(res_DictVectorizer_transform, 'tolist') else res_DictVectorizer_transform`\n  }\n\n  /**\n    A dictionary mapping feature names to feature indices.\n   */\n  get vocabulary_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before accessing vocabulary_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DictVectorizer_vocabulary_ = bridgeDictVectorizer[${this.id}].vocabulary_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DictVectorizer_vocabulary_.tolist() if hasattr(attr_DictVectorizer_vocabulary_, 'tolist') else attr_DictVectorizer_vocabulary_`\n    })()\n  }\n\n  /**\n    A list of length n_features containing the feature names (e.g., “f=ham” and “f=spam”).\n   */\n  get feature_names_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This DictVectorizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DictVectorizer must call init() before accessing feature_names_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DictVectorizer_feature_names_ = bridgeDictVectorizer[${this.id}].feature_names_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DictVectorizer_feature_names_.tolist() if hasattr(attr_DictVectorizer_feature_names_, 'tolist') else attr_DictVectorizer_feature_names_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}