{"version":3,"sources":["../../../../src/generated/feature_extraction/text/HashingVectorizer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Convert a collection of text documents to a matrix of token occurrences.\n\n  It turns a collection of text documents into a scipy.sparse matrix holding token occurrence counts (or binary occurrence information), possibly normalized as token frequencies if norm=’l1’ or projected on the euclidean unit sphere if norm=’l2’.\n\n  This text vectorizer implementation uses the hashing trick to find the token string name to feature integer index mapping.\n\n  This strategy has several advantages:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.HashingVectorizer.html)\n */\nexport class HashingVectorizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      If `'filename'`, the sequence passed as an argument to fit is expected to be a list of filenames that need reading to fetch the raw content to analyze.\n\n      @defaultValue `'content'`\n     */\n    input?: 'filename' | 'file' | 'content'\n\n    /**\n      If bytes or files are given to analyze, this encoding is used to decode.\n\n      @defaultValue `'utf-8'`\n     */\n    encoding?: string\n\n    /**\n      Instruction on what to do if a byte sequence is given to analyze that contains characters not of the given `encoding`. By default, it is ‘strict’, meaning that a UnicodeDecodeError will be raised. Other values are ‘ignore’ and ‘replace’.\n\n      @defaultValue `'strict'`\n     */\n    decode_error?: 'strict' | 'ignore' | 'replace'\n\n    /**\n      Remove accents and perform other character normalization during the preprocessing step. ‘ascii’ is a fast method that only works on characters that have a direct ASCII mapping. ‘unicode’ is a slightly slower method that works on any character. `undefined` (default) means no character normalization is performed.\n\n      Both ‘ascii’ and ‘unicode’ use NFKD normalization from [`unicodedata.normalize`](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize \"(in Python v3.13)\").\n     */\n    strip_accents?: 'ascii' | 'unicode'\n\n    /**\n      Convert all characters to lowercase before tokenizing.\n\n      @defaultValue `true`\n     */\n    lowercase?: boolean\n\n    /**\n      Override the preprocessing (string transformation) stage while preserving the tokenizing and n-grams generation steps. Only applies if `analyzer` is not callable.\n     */\n    preprocessor?: any\n\n    /**\n      Override the string tokenization step while preserving the preprocessing and n-grams generation steps. Only applies if `analyzer \\== 'word'`.\n     */\n    tokenizer?: any\n\n    /**\n      If ‘english’, a built-in stop word list for English is used. There are several known issues with ‘english’ and you should consider an alternative (see [Using stop words](https://scikit-learn.org/stable/modules/generated/../feature_extraction.html#stop-words)).\n\n      If a list, that list is assumed to contain stop words, all of which will be removed from the resulting tokens. Only applies if `analyzer \\== 'word'`.\n     */\n    stop_words?: 'english' | any[]\n\n    /**\n      Regular expression denoting what constitutes a “token”, only used if `analyzer \\== 'word'`. The default regexp selects tokens of 2 or more alphanumeric characters (punctuation is completely ignored and always treated as a token separator).\n\n      If there is a capturing group in token_pattern then the captured group content, not the entire match, becomes the token. At most one capturing group is permitted.\n     */\n    token_pattern?: string\n\n    /**\n      The lower and upper boundary of the range of n-values for different n-grams to be extracted. All values of n such that min_n <= n <= max_n will be used. For example an `ngram_range` of `(1, 1)` means only unigrams, `(1, 2)` means unigrams and bigrams, and `(2, 2)` means only bigrams. Only applies if `analyzer` is not callable.\n     */\n    ngram_range?: any\n\n    /**\n      Whether the feature should be made of word or character n-grams. Option ‘char_wb’ creates character n-grams only from text inside word boundaries; n-grams at the edges of words are padded with space.\n\n      If a callable is passed it is used to extract the sequence of features out of the raw, unprocessed input.\n\n      @defaultValue `'word'`\n     */\n    analyzer?: 'word' | 'char' | 'char_wb'\n\n    /**\n      The number of features (columns) in the output matrices. Small numbers of features are likely to cause hash collisions, but large numbers will cause larger coefficient dimensions in linear learners.\n     */\n    n_features?: number\n\n    /**\n      If `true`, all non zero counts are set to 1. This is useful for discrete probabilistic models that model binary events rather than integer counts.\n\n      @defaultValue `false`\n     */\n    binary?: boolean\n\n    /**\n      Norm used to normalize term vectors. `undefined` for no normalization.\n\n      @defaultValue `'l2'`\n     */\n    norm?: 'l1' | 'l2'\n\n    /**\n      When `true`, an alternating sign is added to the features as to approximately conserve the inner product in the hashed space even for small n_features. This approach is similar to sparse random projection.\n\n      @defaultValue `true`\n     */\n    alternate_sign?: boolean\n\n    /**\n      Type of the matrix returned by fit_transform() or transform().\n     */\n    dtype?: any\n  }) {\n    this.id = `HashingVectorizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('HashingVectorizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.feature_extraction.text import HashingVectorizer\ntry: bridgeHashingVectorizer\nexcept NameError: bridgeHashingVectorizer = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_HashingVectorizer = {'input': ${this.opts['input'] ?? undefined}, 'encoding': ${this.opts['encoding'] ?? undefined}, 'decode_error': ${this.opts['decode_error'] ?? undefined}, 'strip_accents': ${this.opts['strip_accents'] ?? undefined}, 'lowercase': ${this.opts['lowercase'] ?? undefined}, 'preprocessor': ${this.opts['preprocessor'] ?? undefined}, 'tokenizer': ${this.opts['tokenizer'] ?? undefined}, 'stop_words': ${this.opts['stop_words'] ?? undefined}, 'token_pattern': ${this.opts['token_pattern'] ?? undefined}, 'ngram_range': ${this.opts['ngram_range'] ?? undefined}, 'analyzer': ${this.opts['analyzer'] ?? undefined}, 'n_features': ${this.opts['n_features'] ?? undefined}, 'binary': ${this.opts['binary'] ?? undefined}, 'norm': ${this.opts['norm'] ?? undefined}, 'alternate_sign': ${this.opts['alternate_sign'] ?? undefined}, 'dtype': ${this.opts['dtype'] ?? undefined}}\n\nctor_HashingVectorizer = {k: v for k, v in ctor_HashingVectorizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHashingVectorizer[${this.id}] = HashingVectorizer(**ctor_HashingVectorizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHashingVectorizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return a callable to process input data.\n\n    The callable handles preprocessing, tokenization, and n-grams generation.\n   */\n  async build_analyzer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_analyzer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_analyzer = {}\n\npms_HashingVectorizer_build_analyzer = {k: v for k, v in pms_HashingVectorizer_build_analyzer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_analyzer = bridgeHashingVectorizer[${this.id}].build_analyzer(**pms_HashingVectorizer_build_analyzer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_analyzer.tolist() if hasattr(res_HashingVectorizer_build_analyzer, 'tolist') else res_HashingVectorizer_build_analyzer`\n  }\n\n  /**\n    Return a function to preprocess the text before tokenization.\n   */\n  async build_preprocessor(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_preprocessor()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_preprocessor = {}\n\npms_HashingVectorizer_build_preprocessor = {k: v for k, v in pms_HashingVectorizer_build_preprocessor.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_preprocessor = bridgeHashingVectorizer[${this.id}].build_preprocessor(**pms_HashingVectorizer_build_preprocessor)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_preprocessor.tolist() if hasattr(res_HashingVectorizer_build_preprocessor, 'tolist') else res_HashingVectorizer_build_preprocessor`\n  }\n\n  /**\n    Return a function that splits a string into a sequence of tokens.\n   */\n  async build_tokenizer(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before build_tokenizer()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_build_tokenizer = {}\n\npms_HashingVectorizer_build_tokenizer = {k: v for k, v in pms_HashingVectorizer_build_tokenizer.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_build_tokenizer = bridgeHashingVectorizer[${this.id}].build_tokenizer(**pms_HashingVectorizer_build_tokenizer)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_build_tokenizer.tolist() if hasattr(res_HashingVectorizer_build_tokenizer, 'tolist') else res_HashingVectorizer_build_tokenizer`\n  }\n\n  /**\n    Decode the input into a string of unicode symbols.\n\n    The decoding strategy depends on the vectorizer parameters.\n   */\n  async decode(opts: {\n    /**\n      The string to decode.\n     */\n    doc?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before decode()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_decode = {'doc': ${opts['doc'] ?? undefined}}\n\npms_HashingVectorizer_decode = {k: v for k, v in pms_HashingVectorizer_decode.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_decode = bridgeHashingVectorizer[${this.id}].decode(**pms_HashingVectorizer_decode)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_decode.tolist() if hasattr(res_HashingVectorizer_decode, 'tolist') else res_HashingVectorizer_decode`\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: any\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_fit = {k: v for k, v in pms_HashingVectorizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_fit = bridgeHashingVectorizer[${this.id}].fit(**pms_HashingVectorizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_fit.tolist() if hasattr(res_HashingVectorizer_fit, 'tolist') else res_HashingVectorizer_fit`\n  }\n\n  /**\n    Transform a sequence of documents to a document-term matrix.\n   */\n  async fit_transform(opts: {\n    /**\n      Samples. Each sample must be a text document (either bytes or unicode strings, file name or file object depending on the constructor argument) which will be tokenized and hashed.\n     */\n    X?: any\n\n    /**\n      Ignored. This parameter exists only for compatibility with sklearn.pipeline.Pipeline.\n     */\n    y?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_fit_transform = {'X': ${opts['X'] ?? undefined}, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_fit_transform = {k: v for k, v in pms_HashingVectorizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_fit_transform = bridgeHashingVectorizer[${this.id}].fit_transform(**pms_HashingVectorizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_fit_transform.tolist() if hasattr(res_HashingVectorizer_fit_transform, 'tolist') else res_HashingVectorizer_fit_transform`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_HashingVectorizer_get_metadata_routing = {k: v for k, v in pms_HashingVectorizer_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_get_metadata_routing = bridgeHashingVectorizer[${this.id}].get_metadata_routing(**pms_HashingVectorizer_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_get_metadata_routing.tolist() if hasattr(res_HashingVectorizer_get_metadata_routing, 'tolist') else res_HashingVectorizer_get_metadata_routing`\n  }\n\n  /**\n    Build or fetch the effective stop words list.\n   */\n  async get_stop_words(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'HashingVectorizer must call init() before get_stop_words()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_HashingVectorizer_get_stop_words = {}\n\npms_HashingVectorizer_get_stop_words = {k: v for k, v in pms_HashingVectorizer_get_stop_words.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_get_stop_words = bridgeHashingVectorizer[${this.id}].get_stop_words(**pms_HashingVectorizer_get_stop_words)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_get_stop_words.tolist() if hasattr(res_HashingVectorizer_get_stop_words, 'tolist') else res_HashingVectorizer_get_stop_words`\n  }\n\n  /**\n    Only validates estimator’s parameters.\n\n    This method allows to: (i) validate the estimator’s parameters and (ii) be consistent with the scikit-learn transformer API.\n   */\n  async partial_fit(opts: {\n    /**\n      Training data.\n     */\n    X?: any\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before partial_fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_partial_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_HashingVectorizer_partial_fit = {k: v for k, v in pms_HashingVectorizer_partial_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_partial_fit = bridgeHashingVectorizer[${this.id}].partial_fit(**pms_HashingVectorizer_partial_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_partial_fit.tolist() if hasattr(res_HashingVectorizer_partial_fit, 'tolist') else res_HashingVectorizer_partial_fit`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_HashingVectorizer_set_output = {k: v for k, v in pms_HashingVectorizer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_set_output = bridgeHashingVectorizer[${this.id}].set_output(**pms_HashingVectorizer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_set_output.tolist() if hasattr(res_HashingVectorizer_set_output, 'tolist') else res_HashingVectorizer_set_output`\n  }\n\n  /**\n    Transform a sequence of documents to a document-term matrix.\n   */\n  async transform(opts: {\n    /**\n      Samples. Each sample must be a text document (either bytes or unicode strings, file name or file object depending on the constructor argument) which will be tokenized and hashed.\n     */\n    X?: any\n  }): Promise<SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This HashingVectorizer instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('HashingVectorizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_HashingVectorizer_transform = {'X': ${opts['X'] ?? undefined}}\n\npms_HashingVectorizer_transform = {k: v for k, v in pms_HashingVectorizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_HashingVectorizer_transform = bridgeHashingVectorizer[${this.id}].transform(**pms_HashingVectorizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_HashingVectorizer_transform.tolist() if hasattr(res_HashingVectorizer_transform, 'tolist') else res_HashingVectorizer_transform`\n  }\n}\n"],"mappings":"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","names":[]}