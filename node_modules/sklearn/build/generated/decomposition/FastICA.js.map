{"version":3,"sources":["../../../src/generated/decomposition/FastICA.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  FastICA: a fast algorithm for Independent Component Analysis.\n\n  The implementation is based on [\\[1\\]](https://scikit-learn.org/stable/modules/generated/#r44c805292efc-1).\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../decomposition.html#ica).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FastICA.html)\n */\nexport class FastICA {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of components to use. If `undefined` is passed, all are used.\n     */\n    n_components?: number\n\n    /**\n      Specify which algorithm to use for FastICA.\n\n      @defaultValue `'parallel'`\n     */\n    algorithm?: 'parallel' | 'deflation'\n\n    /**\n      Specify the whitening strategy to use.\n\n      @defaultValue `'unit-variance'`\n     */\n    whiten?: string | boolean\n\n    /**\n      The functional form of the G function used in the approximation to neg-entropy. Could be either ‘logcosh’, ‘exp’, or ‘cube’. You can also provide your own function. It should return a tuple containing the value of the function, and of its derivative, in the point. The derivative should be averaged along its last dimension. Example:\n\n      @defaultValue `'logcosh'`\n     */\n    fun?: 'logcosh' | 'exp' | 'cube'\n\n    /**\n      Arguments to send to the functional form. If empty or `undefined` and if fun=’logcosh’, fun_args will take value {‘alpha’ : 1.0}.\n     */\n    fun_args?: any\n\n    /**\n      Maximum number of iterations during fit.\n\n      @defaultValue `200`\n     */\n    max_iter?: number\n\n    /**\n      A positive scalar giving the tolerance at which the un-mixing matrix is considered to have converged.\n\n      @defaultValue `0.0001`\n     */\n    tol?: number\n\n    /**\n      Initial un-mixing array. If `w_init=None`, then an array of values drawn from a normal distribution is used.\n     */\n    w_init?: ArrayLike[]\n\n    /**\n      The solver to use for whitening.\n\n      @defaultValue `'svd'`\n     */\n    whiten_solver?: 'eigh' | 'svd'\n\n    /**\n      Used to initialize `w_init` when not specified, with a normal distribution. Pass an int, for reproducible results across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n  }) {\n    this.id = `FastICA${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('FastICA.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.decomposition import FastICA\ntry: bridgeFastICA\nexcept NameError: bridgeFastICA = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_FastICA = {'n_components': ${this.opts['n_components'] ?? undefined}, 'algorithm': ${this.opts['algorithm'] ?? undefined}, 'whiten': ${this.opts['whiten'] ?? undefined}, 'fun': ${this.opts['fun'] ?? undefined}, 'fun_args': ${this.opts['fun_args'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'w_init': np.array(${this.opts['w_init'] ?? undefined}) if ${this.opts['w_init'] !== undefined} else None, 'whiten_solver': ${this.opts['whiten_solver'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_FastICA = {k: v for k, v in ctor_FastICA.items() if v is not None}`\n\n    await this._py.ex`bridgeFastICA[${this.id}] = FastICA(**ctor_FastICA)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeFastICA[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model to X.\n   */\n  async fit(opts: {\n    /**\n      Training data, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_FastICA_fit = {k: v for k, v in pms_FastICA_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_fit = bridgeFastICA[${this.id}].fit(**pms_FastICA_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_fit.tolist() if hasattr(res_FastICA_fit, 'tolist') else res_FastICA_fit`\n  }\n\n  /**\n    Fit the model and recover the sources from X.\n   */\n  async fit_transform(opts: {\n    /**\n      Training data, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_FastICA_fit_transform = {k: v for k, v in pms_FastICA_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_fit_transform = bridgeFastICA[${this.id}].fit_transform(**pms_FastICA_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_fit_transform.tolist() if hasattr(res_FastICA_fit_transform, 'tolist') else res_FastICA_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class_name0\", \"class_name1\", \"class_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in `fit`.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before get_feature_names_out()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_FastICA_get_feature_names_out = {k: v for k, v in pms_FastICA_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_get_feature_names_out = bridgeFastICA[${this.id}].get_feature_names_out(**pms_FastICA_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_get_feature_names_out.tolist() if hasattr(res_FastICA_get_feature_names_out, 'tolist') else res_FastICA_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_FastICA_get_metadata_routing = {k: v for k, v in pms_FastICA_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_get_metadata_routing = bridgeFastICA[${this.id}].get_metadata_routing(**pms_FastICA_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_get_metadata_routing.tolist() if hasattr(res_FastICA_get_metadata_routing, 'tolist') else res_FastICA_get_metadata_routing`\n  }\n\n  /**\n    Transform the sources back to the mixed data (apply mixing matrix).\n   */\n  async inverse_transform(opts: {\n    /**\n      Sources, where `n_samples` is the number of samples and `n_components` is the number of components.\n     */\n    X?: ArrayLike[]\n\n    /**\n      If `false`, data passed to fit are overwritten. Defaults to `true`.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before inverse_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_inverse_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'copy': ${opts['copy'] ?? undefined}}\n\npms_FastICA_inverse_transform = {k: v for k, v in pms_FastICA_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_inverse_transform = bridgeFastICA[${this.id}].inverse_transform(**pms_FastICA_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_inverse_transform.tolist() if hasattr(res_FastICA_inverse_transform, 'tolist') else res_FastICA_inverse_transform`\n  }\n\n  /**\n    Request metadata passed to the `inverse_transform` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_inverse_transform_request(opts: {\n    /**\n      Metadata routing for `copy` parameter in `inverse_transform`.\n     */\n    copy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FastICA must call init() before set_inverse_transform_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_set_inverse_transform_request = {'copy': ${opts['copy'] ?? undefined}}\n\npms_FastICA_set_inverse_transform_request = {k: v for k, v in pms_FastICA_set_inverse_transform_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_set_inverse_transform_request = bridgeFastICA[${this.id}].set_inverse_transform_request(**pms_FastICA_set_inverse_transform_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_set_inverse_transform_request.tolist() if hasattr(res_FastICA_set_inverse_transform_request, 'tolist') else res_FastICA_set_inverse_transform_request`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_FastICA_set_output = {k: v for k, v in pms_FastICA_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_set_output = bridgeFastICA[${this.id}].set_output(**pms_FastICA_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_set_output.tolist() if hasattr(res_FastICA_set_output, 'tolist') else res_FastICA_set_output`\n  }\n\n  /**\n    Request metadata passed to the `transform` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_transform_request(opts: {\n    /**\n      Metadata routing for `copy` parameter in `transform`.\n     */\n    copy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before set_transform_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_set_transform_request = {'copy': ${opts['copy'] ?? undefined}}\n\npms_FastICA_set_transform_request = {k: v for k, v in pms_FastICA_set_transform_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_set_transform_request = bridgeFastICA[${this.id}].set_transform_request(**pms_FastICA_set_transform_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_set_transform_request.tolist() if hasattr(res_FastICA_set_transform_request, 'tolist') else res_FastICA_set_transform_request`\n  }\n\n  /**\n    Recover the sources from X (apply the unmixing matrix).\n   */\n  async transform(opts: {\n    /**\n      Data to transform, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike[]\n\n    /**\n      If `false`, data passed to fit can be overwritten. Defaults to `true`.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_FastICA_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'copy': ${opts['copy'] ?? undefined}}\n\npms_FastICA_transform = {k: v for k, v in pms_FastICA_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_FastICA_transform = bridgeFastICA[${this.id}].transform(**pms_FastICA_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_FastICA_transform.tolist() if hasattr(res_FastICA_transform, 'tolist') else res_FastICA_transform`\n  }\n\n  /**\n    The linear operator to apply to the data to get the independent sources. This is equal to the unmixing matrix when `whiten` is `false`, and equal to `np.dot(unmixing_matrix, self.whitening_)` when `whiten` is `true`.\n   */\n  get components_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before accessing components_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_components_ = bridgeFastICA[${this.id}].components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_components_.tolist() if hasattr(attr_FastICA_components_, 'tolist') else attr_FastICA_components_`\n    })()\n  }\n\n  /**\n    The pseudo-inverse of `components_`. It is the linear operator that maps independent sources to the data.\n   */\n  get mixing_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before accessing mixing_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_mixing_ = bridgeFastICA[${this.id}].mixing_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_mixing_.tolist() if hasattr(attr_FastICA_mixing_, 'tolist') else attr_FastICA_mixing_`\n    })()\n  }\n\n  /**\n    The mean over features. Only set if `self.whiten` is `true`.\n   */\n  get mean_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before accessing mean_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_FastICA_mean_ = bridgeFastICA[${this.id}].mean_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_mean_.tolist() if hasattr(attr_FastICA_mean_, 'tolist') else attr_FastICA_mean_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FastICA must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_n_features_in_ = bridgeFastICA[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_n_features_in_.tolist() if hasattr(attr_FastICA_n_features_in_, 'tolist') else attr_FastICA_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'FastICA must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_feature_names_in_ = bridgeFastICA[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_feature_names_in_.tolist() if hasattr(attr_FastICA_feature_names_in_, 'tolist') else attr_FastICA_feature_names_in_`\n    })()\n  }\n\n  /**\n    If the algorithm is “deflation”, n_iter is the maximum number of iterations run across all components. Else they are just the number of iterations taken to converge.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_n_iter_ = bridgeFastICA[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_n_iter_.tolist() if hasattr(attr_FastICA_n_iter_, 'tolist') else attr_FastICA_n_iter_`\n    })()\n  }\n\n  /**\n    Only set if whiten is ‘`true`’. This is the pre-whitening matrix that projects data onto the first `n_components` principal components.\n   */\n  get whitening_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This FastICA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('FastICA must call init() before accessing whitening_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_FastICA_whitening_ = bridgeFastICA[${this.id}].whitening_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_FastICA_whitening_.tolist() if hasattr(attr_FastICA_whitening_, 'tolist') else attr_FastICA_whitening_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}