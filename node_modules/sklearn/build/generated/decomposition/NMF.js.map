{"version":3,"sources":["../../../src/generated/decomposition/NMF.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Non-Negative Matrix Factorization (NMF).\n\n  Find two non-negative matrices, i.e. matrices with all non-negative elements, (W, H) whose product approximates the non-negative matrix X. This factorization can be used for example for dimensionality reduction, source separation or topic extraction.\n\n  The objective function is:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.NMF.html)\n */\nexport class NMF {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of components, if n_components is not set all features are kept. If `n_components='auto'`, the number of components is automatically inferred from W or H shapes.\n     */\n    n_components?: number | 'auto'\n\n    /**\n      Method used to initialize the procedure. Valid options:\n     */\n    init?: 'random' | 'nndsvd' | 'nndsvda' | 'nndsvdar' | 'custom'\n\n    /**\n      Numerical solver to use:\n\n      @defaultValue `'cd'`\n     */\n    solver?: 'cd' | 'mu'\n\n    /**\n      Beta divergence to be minimized, measuring the distance between X and the dot product WH. Note that values different from ‘frobenius’ (or 2) and ‘kullback-leibler’ (or 1) lead to significantly slower fits. Note that for beta_loss <= 0 (or ‘itakura-saito’), the input matrix X cannot contain zeros. Used only in ‘mu’ solver.\n\n      @defaultValue `'frobenius'`\n     */\n    beta_loss?: number | 'frobenius' | 'kullback-leibler' | 'itakura-saito'\n\n    /**\n      Tolerance of the stopping condition.\n\n      @defaultValue `0.0001`\n     */\n    tol?: number\n\n    /**\n      Maximum number of iterations before timing out.\n\n      @defaultValue `200`\n     */\n    max_iter?: number\n\n    /**\n      Used for initialisation (when `init` == ‘nndsvdar’ or ‘random’), and in Coordinate Descent. Pass an int for reproducible results across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state).\n     */\n    random_state?: number\n\n    /**\n      Constant that multiplies the regularization terms of `W`. Set it to zero (default) to have no regularization on `W`.\n\n      @defaultValue `0`\n     */\n    alpha_W?: number\n\n    /**\n      Constant that multiplies the regularization terms of `H`. Set it to zero to have no regularization on `H`. If “same” (default), it takes the same value as `alpha_W`.\n\n      @defaultValue `'same'`\n     */\n    alpha_H?: number | 'same'\n\n    /**\n      The regularization mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an elementwise L2 penalty (aka Frobenius Norm). For l1_ratio = 1 it is an elementwise L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2.\n\n      @defaultValue `0`\n     */\n    l1_ratio?: number\n\n    /**\n      Whether to be verbose.\n\n      @defaultValue `0`\n     */\n    verbose?: number\n\n    /**\n      If true, randomize the order of coordinates in the CD solver.\n\n      @defaultValue `false`\n     */\n    shuffle?: boolean\n  }) {\n    this.id = `NMF${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('NMF.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.decomposition import NMF\ntry: bridgeNMF\nexcept NameError: bridgeNMF = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_NMF = {'n_components': ${this.opts['n_components'] ?? undefined}, 'init': ${this.opts['init'] ?? undefined}, 'solver': ${this.opts['solver'] ?? undefined}, 'beta_loss': ${this.opts['beta_loss'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}, 'alpha_W': ${this.opts['alpha_W'] ?? undefined}, 'alpha_H': ${this.opts['alpha_H'] ?? undefined}, 'l1_ratio': ${this.opts['l1_ratio'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'shuffle': ${this.opts['shuffle'] ?? undefined}}\n\nctor_NMF = {k: v for k, v in ctor_NMF.items() if v is not None}`\n\n    await this._py.ex`bridgeNMF[${this.id}] = NMF(**ctor_NMF)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeNMF[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Learn a NMF model for the data X.\n   */\n  async fit(opts: {\n    /**\n      Training vector, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n\n    /**\n      Parameters (keyword arguments) and values passed to the fit_transform instance.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_NMF_fit = {k: v for k, v in pms_NMF_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_NMF_fit = bridgeNMF[${this.id}].fit(**pms_NMF_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_fit.tolist() if hasattr(res_NMF_fit, 'tolist') else res_NMF_fit`\n  }\n\n  /**\n    Learn a NMF model for the data X and returns the transformed data.\n\n    This is more efficient than calling fit followed by transform.\n   */\n  async fit_transform(opts: {\n    /**\n      Training vector, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n\n    /**\n      If `init='custom'`, it is used as initial guess for the solution. If `undefined`, uses the initialisation method specified in `init`.\n     */\n    W?: ArrayLike[]\n\n    /**\n      If `init='custom'`, it is used as initial guess for the solution. If `undefined`, uses the initialisation method specified in `init`.\n     */\n    H?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}, 'W': np.array(${opts['W'] ?? undefined}) if ${opts['W'] !== undefined} else None, 'H': np.array(${opts['H'] ?? undefined}) if ${opts['H'] !== undefined} else None}\n\npms_NMF_fit_transform = {k: v for k, v in pms_NMF_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_fit_transform = bridgeNMF[${this.id}].fit_transform(**pms_NMF_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_fit_transform.tolist() if hasattr(res_NMF_fit_transform, 'tolist') else res_NMF_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class_name0\", \"class_name1\", \"class_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in `fit`.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before get_feature_names_out()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_NMF_get_feature_names_out = {k: v for k, v in pms_NMF_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_get_feature_names_out = bridgeNMF[${this.id}].get_feature_names_out(**pms_NMF_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_get_feature_names_out.tolist() if hasattr(res_NMF_get_feature_names_out, 'tolist') else res_NMF_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_NMF_get_metadata_routing = {k: v for k, v in pms_NMF_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_get_metadata_routing = bridgeNMF[${this.id}].get_metadata_routing(**pms_NMF_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_get_metadata_routing.tolist() if hasattr(res_NMF_get_metadata_routing, 'tolist') else res_NMF_get_metadata_routing`\n  }\n\n  /**\n    Transform data back to its original space.\n   */\n  async inverse_transform(opts: {\n    /**\n      Transformed data matrix.\n     */\n    X?: NDArray | SparseMatrix[]\n\n    /**\n      Transformed data matrix.\n     */\n    Xt?: NDArray | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before inverse_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_inverse_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Xt': np.array(${opts['Xt'] ?? undefined}) if ${opts['Xt'] !== undefined} else None}\n\npms_NMF_inverse_transform = {k: v for k, v in pms_NMF_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_inverse_transform = bridgeNMF[${this.id}].inverse_transform(**pms_NMF_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_inverse_transform.tolist() if hasattr(res_NMF_inverse_transform, 'tolist') else res_NMF_inverse_transform`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_NMF_set_output = {k: v for k, v in pms_NMF_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_set_output = bridgeNMF[${this.id}].set_output(**pms_NMF_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_set_output.tolist() if hasattr(res_NMF_set_output, 'tolist') else res_NMF_set_output`\n  }\n\n  /**\n    Transform the data X according to the fitted NMF model.\n   */\n  async transform(opts: {\n    /**\n      Training vector, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NMF_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_NMF_transform = {k: v for k, v in pms_NMF_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NMF_transform = bridgeNMF[${this.id}].transform(**pms_NMF_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NMF_transform.tolist() if hasattr(res_NMF_transform, 'tolist') else res_NMF_transform`\n  }\n\n  /**\n    Factorization matrix, sometimes called ‘dictionary’.\n   */\n  get components_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before accessing components_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NMF_components_ = bridgeNMF[${this.id}].components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_components_.tolist() if hasattr(attr_NMF_components_, 'tolist') else attr_NMF_components_`\n    })()\n  }\n\n  /**\n    The number of components. It is same as the `n_components` parameter if it was given. Otherwise, it will be same as the number of features.\n   */\n  get n_components_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before accessing n_components_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NMF_n_components_ = bridgeNMF[${this.id}].n_components_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_n_components_.tolist() if hasattr(attr_NMF_n_components_, 'tolist') else attr_NMF_n_components_`\n    })()\n  }\n\n  /**\n    Frobenius norm of the matrix difference, or beta-divergence, between the training data `X` and the reconstructed data `WH` from the fitted model.\n   */\n  get reconstruction_err_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'NMF must call init() before accessing reconstruction_err_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NMF_reconstruction_err_ = bridgeNMF[${this.id}].reconstruction_err_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_reconstruction_err_.tolist() if hasattr(attr_NMF_reconstruction_err_, 'tolist') else attr_NMF_reconstruction_err_`\n    })()\n  }\n\n  /**\n    Actual number of iterations.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_NMF_n_iter_ = bridgeNMF[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_n_iter_.tolist() if hasattr(attr_NMF_n_iter_, 'tolist') else attr_NMF_n_iter_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NMF_n_features_in_ = bridgeNMF[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_n_features_in_.tolist() if hasattr(attr_NMF_n_features_in_, 'tolist') else attr_NMF_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This NMF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NMF must call init() before accessing feature_names_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NMF_feature_names_in_ = bridgeNMF[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NMF_feature_names_in_.tolist() if hasattr(attr_NMF_feature_names_in_, 'tolist') else attr_NMF_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}