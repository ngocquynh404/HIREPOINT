{"version":3,"sources":["../../../src/generated/metrics/DetCurveDisplay.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  DET curve visualization.\n\n  It is recommend to use [`from_estimator`](https://scikit-learn.org/stable/modules/generated/#sklearn.metrics.DetCurveDisplay.from_estimator \"sklearn.metrics.DetCurveDisplay.from_estimator\") or [`from_predictions`](https://scikit-learn.org/stable/modules/generated/#sklearn.metrics.DetCurveDisplay.from_predictions \"sklearn.metrics.DetCurveDisplay.from_predictions\") to create a visualizer. All parameters are stored as attributes.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.DetCurveDisplay.html)\n */\nexport class DetCurveDisplay {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      False positive rate.\n     */\n    fpr?: NDArray\n\n    /**\n      False negative rate.\n     */\n    fnr?: NDArray\n\n    /**\n      Name of estimator. If `undefined`, the estimator name is not shown.\n     */\n    estimator_name?: string\n\n    /**\n      The label of the positive class.\n     */\n    pos_label?: number | boolean | string\n  }) {\n    this.id = `DetCurveDisplay${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DetCurveDisplay.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.metrics import DetCurveDisplay\ntry: bridgeDetCurveDisplay\nexcept NameError: bridgeDetCurveDisplay = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_DetCurveDisplay = {'fpr': np.array(${this.opts['fpr'] ?? undefined}) if ${this.opts['fpr'] !== undefined} else None, 'fnr': np.array(${this.opts['fnr'] ?? undefined}) if ${this.opts['fnr'] !== undefined} else None, 'estimator_name': ${this.opts['estimator_name'] ?? undefined}, 'pos_label': ${this.opts['pos_label'] ?? undefined}}\n\nctor_DetCurveDisplay = {k: v for k, v in ctor_DetCurveDisplay.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDetCurveDisplay[${this.id}] = DetCurveDisplay(**ctor_DetCurveDisplay)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDetCurveDisplay[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Plot DET curve given an estimator and data.\n\n    Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations).\n   */\n  async from_estimator(opts: {\n    /**\n      Fitted classifier or a fitted [`Pipeline`](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") in which the last estimator is a classifier.\n     */\n    estimator?: any\n\n    /**\n      Input values.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      Specifies whether to use [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba) or [decision_function](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-decision_function) as the predicted target response. If set to ‘auto’, [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba) is tried first and if it does not exist [decision_function](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-decision_function) is tried next.\n     */\n    response_method?: 'decision_function' | 'auto’} default=’auto'\n\n    /**\n      The label of the positive class. When `pos_label=None`, if `y_true` is in {-1, 1} or {0, 1}, `pos_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: number | boolean | string\n\n    /**\n      Name of DET curve for labeling. If `undefined`, use the name of the estimator.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before from_estimator()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DetCurveDisplay_from_estimator = {'estimator': ${opts['estimator'] ?? undefined}, 'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'response_method': ${opts['response_method'] ?? undefined}, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${opts['name'] ?? undefined}, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DetCurveDisplay_from_estimator = {k: v for k, v in pms_DetCurveDisplay_from_estimator.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_from_estimator = bridgeDetCurveDisplay[${this.id}].from_estimator(**pms_DetCurveDisplay_from_estimator)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_from_estimator.tolist() if hasattr(res_DetCurveDisplay_from_estimator, 'tolist') else res_DetCurveDisplay_from_estimator`\n  }\n\n  /**\n    Plot the DET curve given the true and predicted labels.\n\n    Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../../visualizations.html#visualizations).\n   */\n  async from_predictions(opts: {\n    /**\n      True labels.\n     */\n    y_true?: ArrayLike\n\n    /**\n      Target scores, can either be probability estimates of the positive class, confidence values, or non-thresholded measure of decisions (as returned by `decision_function` on some classifiers).\n     */\n    y_pred?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n\n    /**\n      The label of the positive class. When `pos_label=None`, if `y_true` is in {-1, 1} or {0, 1}, `pos_label` is set to 1, otherwise an error will be raised.\n     */\n    pos_label?: number | boolean | string\n\n    /**\n      Name of DET curve for labeling. If `undefined`, name will be set to `\"Classifier\"`.\n     */\n    name?: string\n\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before from_predictions()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DetCurveDisplay_from_predictions = {'y_true': np.array(${opts['y_true'] ?? undefined}) if ${opts['y_true'] !== undefined} else None, 'y_pred': np.array(${opts['y_pred'] ?? undefined}) if ${opts['y_pred'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None, 'pos_label': ${opts['pos_label'] ?? undefined}, 'name': ${opts['name'] ?? undefined}, 'ax': ${opts['ax'] ?? undefined}, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DetCurveDisplay_from_predictions = {k: v for k, v in pms_DetCurveDisplay_from_predictions.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_from_predictions = bridgeDetCurveDisplay[${this.id}].from_predictions(**pms_DetCurveDisplay_from_predictions)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_from_predictions.tolist() if hasattr(res_DetCurveDisplay_from_predictions, 'tolist') else res_DetCurveDisplay_from_predictions`\n  }\n\n  /**\n    Plot visualization.\n   */\n  async plot(opts: {\n    /**\n      Axes object to plot on. If `undefined`, a new figure and axes is created.\n     */\n    ax?: any\n\n    /**\n      Name of DET curve for labeling. If `undefined`, use `estimator_name` if it is not `undefined`, otherwise no labeling is shown.\n     */\n    name?: string\n\n    /**\n      Additional keywords arguments passed to matplotlib `plot` function.\n     */\n    kwargs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before plot()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DetCurveDisplay_plot = {'ax': ${opts['ax'] ?? undefined}, 'name': ${opts['name'] ?? undefined}, 'kwargs': ${opts['kwargs'] ?? undefined}}\n\npms_DetCurveDisplay_plot = {k: v for k, v in pms_DetCurveDisplay_plot.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DetCurveDisplay_plot = bridgeDetCurveDisplay[${this.id}].plot(**pms_DetCurveDisplay_plot)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DetCurveDisplay_plot.tolist() if hasattr(res_DetCurveDisplay_plot, 'tolist') else res_DetCurveDisplay_plot`\n  }\n\n  /**\n    DET Curve.\n   */\n  get line_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before accessing line_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_line_ = bridgeDetCurveDisplay[${this.id}].line_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_line_.tolist() if hasattr(attr_DetCurveDisplay_line_, 'tolist') else attr_DetCurveDisplay_line_`\n    })()\n  }\n\n  /**\n    Axes with DET Curve.\n   */\n  get ax_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DetCurveDisplay must call init() before accessing ax_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_ax_ = bridgeDetCurveDisplay[${this.id}].ax_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_ax_.tolist() if hasattr(attr_DetCurveDisplay_ax_, 'tolist') else attr_DetCurveDisplay_ax_`\n    })()\n  }\n\n  /**\n    Figure containing the curve.\n   */\n  get figure_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DetCurveDisplay instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'DetCurveDisplay must call init() before accessing figure_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_DetCurveDisplay_figure_ = bridgeDetCurveDisplay[${this.id}].figure_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_DetCurveDisplay_figure_.tolist() if hasattr(attr_DetCurveDisplay_figure_, 'tolist') else attr_DetCurveDisplay_figure_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}