{"version":3,"sources":["../../../src/generated/preprocessing/LabelBinarizer.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Binarize labels in a one-vs-all fashion.\n\n  Several regression and binary classification algorithms are available in scikit-learn. A simple way to extend these algorithms to the multi-class classification case is to use the so-called one-vs-all scheme.\n\n  At learning time, this simply consists in learning one regressor or binary classifier per class. In doing so, one needs to convert multi-class labels to binary labels (belong or does not belong to the class). `LabelBinarizer` makes this process easy with the transform method.\n\n  At prediction time, one assigns the class for which the corresponding model gave the greatest confidence. `LabelBinarizer` makes this easy with the [`inverse_transform`](https://scikit-learn.org/stable/modules/generated/#sklearn.preprocessing.LabelBinarizer.inverse_transform \"sklearn.preprocessing.LabelBinarizer.inverse_transform\") method.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../preprocessing_targets.html#preprocessing-targets).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelBinarizer.html)\n */\nexport class LabelBinarizer {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Value with which negative labels must be encoded.\n\n      @defaultValue `0`\n     */\n    neg_label?: number\n\n    /**\n      Value with which positive labels must be encoded.\n\n      @defaultValue `1`\n     */\n    pos_label?: number\n\n    /**\n      True if the returned array from transform is desired to be in sparse CSR format.\n\n      @defaultValue `false`\n     */\n    sparse_output?: boolean\n  }) {\n    this.id = `LabelBinarizer${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LabelBinarizer.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.preprocessing import LabelBinarizer\ntry: bridgeLabelBinarizer\nexcept NameError: bridgeLabelBinarizer = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_LabelBinarizer = {'neg_label': ${this.opts['neg_label'] ?? undefined}, 'pos_label': ${this.opts['pos_label'] ?? undefined}, 'sparse_output': ${this.opts['sparse_output'] ?? undefined}}\n\nctor_LabelBinarizer = {k: v for k, v in ctor_LabelBinarizer.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeLabelBinarizer[${this.id}] = LabelBinarizer(**ctor_LabelBinarizer)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLabelBinarizer[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit label binarizer.\n   */\n  async fit(opts: {\n    /**\n      Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification.\n     */\n    y?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LabelBinarizer must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_fit = {'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_LabelBinarizer_fit = {k: v for k, v in pms_LabelBinarizer_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_fit = bridgeLabelBinarizer[${this.id}].fit(**pms_LabelBinarizer_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_fit.tolist() if hasattr(res_LabelBinarizer_fit, 'tolist') else res_LabelBinarizer_fit`\n  }\n\n  /**\n    Fit label binarizer/transform multi-class labels to binary labels.\n\n    The output of transform is sometimes referred to as the 1-of-K coding scheme.\n   */\n  async fit_transform(opts: {\n    /**\n      Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification. Sparse matrix can be CSR, CSC, COO, DOK, or LIL.\n     */\n    y?: NDArray | SparseMatrix\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LabelBinarizer must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_fit_transform = {'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_LabelBinarizer_fit_transform = {k: v for k, v in pms_LabelBinarizer_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_fit_transform = bridgeLabelBinarizer[${this.id}].fit_transform(**pms_LabelBinarizer_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_fit_transform.tolist() if hasattr(res_LabelBinarizer_fit_transform, 'tolist') else res_LabelBinarizer_fit_transform`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_LabelBinarizer_get_metadata_routing = {k: v for k, v in pms_LabelBinarizer_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_get_metadata_routing = bridgeLabelBinarizer[${this.id}].get_metadata_routing(**pms_LabelBinarizer_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_get_metadata_routing.tolist() if hasattr(res_LabelBinarizer_get_metadata_routing, 'tolist') else res_LabelBinarizer_get_metadata_routing`\n  }\n\n  /**\n    Transform binary labels back to multi-class labels.\n   */\n  async inverse_transform(opts: {\n    /**\n      Target values. All sparse matrices are converted to CSR before inverse transformation.\n     */\n    Y?: NDArray | SparseMatrix[]\n\n    /**\n      Threshold used in the binary and multi-label cases.\n\n      Use 0 when `Y` contains the output of [decision_function](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-decision_function) (classifier). Use 0.5 when `Y` contains the output of [predict_proba](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-predict_proba).\n\n      If `undefined`, the threshold is assumed to be half way between neg_label and pos_label.\n     */\n    threshold?: number\n  }): Promise<NDArray | SparseMatrix> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before inverse_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_inverse_transform = {'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'threshold': ${opts['threshold'] ?? undefined}}\n\npms_LabelBinarizer_inverse_transform = {k: v for k, v in pms_LabelBinarizer_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_inverse_transform = bridgeLabelBinarizer[${this.id}].inverse_transform(**pms_LabelBinarizer_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_inverse_transform.tolist() if hasattr(res_LabelBinarizer_inverse_transform, 'tolist') else res_LabelBinarizer_inverse_transform`\n  }\n\n  /**\n    Request metadata passed to the `inverse_transform` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_inverse_transform_request(opts: {\n    /**\n      Metadata routing for `threshold` parameter in `inverse_transform`.\n     */\n    threshold?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before set_inverse_transform_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_set_inverse_transform_request = {'threshold': ${opts['threshold'] ?? undefined}}\n\npms_LabelBinarizer_set_inverse_transform_request = {k: v for k, v in pms_LabelBinarizer_set_inverse_transform_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_set_inverse_transform_request = bridgeLabelBinarizer[${this.id}].set_inverse_transform_request(**pms_LabelBinarizer_set_inverse_transform_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_set_inverse_transform_request.tolist() if hasattr(res_LabelBinarizer_set_inverse_transform_request, 'tolist') else res_LabelBinarizer_set_inverse_transform_request`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LabelBinarizer must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_LabelBinarizer_set_output = {k: v for k, v in pms_LabelBinarizer_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_set_output = bridgeLabelBinarizer[${this.id}].set_output(**pms_LabelBinarizer_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_set_output.tolist() if hasattr(res_LabelBinarizer_set_output, 'tolist') else res_LabelBinarizer_set_output`\n  }\n\n  /**\n    Transform multi-class labels to binary labels.\n\n    The output of transform is sometimes referred to by some authors as the 1-of-K coding scheme.\n   */\n  async transform(opts: {\n    /**\n      Target values. The 2-d matrix should only contain 0 and 1, represents multilabel classification. Sparse matrix can be CSR, CSC, COO, DOK, or LIL.\n     */\n    y?: SparseMatrix\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LabelBinarizer must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LabelBinarizer_transform = {'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_LabelBinarizer_transform = {k: v for k, v in pms_LabelBinarizer_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LabelBinarizer_transform = bridgeLabelBinarizer[${this.id}].transform(**pms_LabelBinarizer_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LabelBinarizer_transform.tolist() if hasattr(res_LabelBinarizer_transform, 'tolist') else res_LabelBinarizer_transform`\n  }\n\n  /**\n    Holds the label for each class.\n   */\n  get classes_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before accessing classes_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LabelBinarizer_classes_ = bridgeLabelBinarizer[${this.id}].classes_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LabelBinarizer_classes_.tolist() if hasattr(attr_LabelBinarizer_classes_, 'tolist') else attr_LabelBinarizer_classes_`\n    })()\n  }\n\n  /**\n    Represents the type of the target data as evaluated by [`type_of_target`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.multiclass.type_of_target.html#sklearn.utils.multiclass.type_of_target \"sklearn.utils.multiclass.type_of_target\"). Possible type are ‘continuous’, ‘continuous-multioutput’, ‘binary’, ‘multiclass’, ‘multiclass-multioutput’, ‘multilabel-indicator’, and ‘unknown’.\n   */\n  get y_type_(): Promise<string> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before accessing y_type_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LabelBinarizer_y_type_ = bridgeLabelBinarizer[${this.id}].y_type_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LabelBinarizer_y_type_.tolist() if hasattr(attr_LabelBinarizer_y_type_, 'tolist') else attr_LabelBinarizer_y_type_`\n    })()\n  }\n\n  /**\n    `false` otherwise.\n   */\n  get sparse_input_(): Promise<boolean> {\n    if (this._isDisposed) {\n      throw new Error('This LabelBinarizer instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LabelBinarizer must call init() before accessing sparse_input_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LabelBinarizer_sparse_input_ = bridgeLabelBinarizer[${this.id}].sparse_input_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LabelBinarizer_sparse_input_.tolist() if hasattr(attr_LabelBinarizer_sparse_input_, 'tolist') else attr_LabelBinarizer_sparse_input_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}