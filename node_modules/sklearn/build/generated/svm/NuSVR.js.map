{"version":3,"sources":["../../../src/generated/svm/NuSVR.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Nu Support Vector Regression.\n\n  Similar to NuSVC, for regression, uses a parameter nu to control the number of support vectors. However, unlike NuSVC, where nu replaces C, here nu replaces the parameter epsilon of epsilon-SVR.\n\n  The implementation is based on libsvm.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../svm.html#svm-regression).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVR.html)\n */\nexport class NuSVR {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      An upper bound on the fraction of training errors and a lower bound of the fraction of support vectors. Should be in the interval (0, 1\\]. By default 0.5 will be taken.\n\n      @defaultValue `0.5`\n     */\n    nu?: number\n\n    /**\n      Penalty parameter C of the error term. For an intuitive visualization of the effects of scaling the regularization parameter C, see [Scaling the regularization parameter for SVCs](https://scikit-learn.org/stable/modules/generated/../../auto_examples/svm/plot_svm_scale_c.html#sphx-glr-auto-examples-svm-plot-svm-scale-c-py).\n\n      @defaultValue `1`\n     */\n    C?: number\n\n    /**\n      Specifies the kernel type to be used in the algorithm. If none is given, ‘rbf’ will be used. If a callable is given it is used to precompute the kernel matrix.\n\n      @defaultValue `'rbf'`\n     */\n    kernel?: 'linear' | 'poly' | 'rbf' | 'sigmoid' | 'precomputed'\n\n    /**\n      Degree of the polynomial kernel function (‘poly’). Must be non-negative. Ignored by all other kernels.\n\n      @defaultValue `3`\n     */\n    degree?: number\n\n    /**\n      Kernel coefficient for ‘rbf’, ‘poly’ and ‘sigmoid’.\n\n      @defaultValue `'scale'`\n     */\n    gamma?: 'scale' | 'auto' | number\n\n    /**\n      Independent term in kernel function. It is only significant in ‘poly’ and ‘sigmoid’.\n\n      @defaultValue `0`\n     */\n    coef0?: number\n\n    /**\n      Whether to use the shrinking heuristic. See the [User Guide](https://scikit-learn.org/stable/modules/generated/../svm.html#shrinking-svm).\n\n      @defaultValue `true`\n     */\n    shrinking?: boolean\n\n    /**\n      Tolerance for stopping criterion.\n\n      @defaultValue `0.001`\n     */\n    tol?: number\n\n    /**\n      Specify the size of the kernel cache (in MB).\n\n      @defaultValue `200`\n     */\n    cache_size?: number\n\n    /**\n      Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in libsvm that, if enabled, may not work properly in a multithreaded context.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean\n\n    /**\n      Hard limit on iterations within solver, or -1 for no limit.\n\n      @defaultValue `-1`\n     */\n    max_iter?: number\n  }) {\n    this.id = `NuSVR${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('NuSVR.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.svm import NuSVR\ntry: bridgeNuSVR\nexcept NameError: bridgeNuSVR = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_NuSVR = {'nu': ${this.opts['nu'] ?? undefined}, 'C': ${this.opts['C'] ?? undefined}, 'kernel': ${this.opts['kernel'] ?? undefined}, 'degree': ${this.opts['degree'] ?? undefined}, 'gamma': ${this.opts['gamma'] ?? undefined}, 'coef0': ${this.opts['coef0'] ?? undefined}, 'shrinking': ${this.opts['shrinking'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'cache_size': ${this.opts['cache_size'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}}\n\nctor_NuSVR = {k: v for k, v in ctor_NuSVR.items() if v is not None}`\n\n    await this._py.ex`bridgeNuSVR[${this.id}] = NuSVR(**ctor_NuSVR)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeNuSVR[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the SVM model according to the given training data.\n   */\n  async fit(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of features. For kernel=”precomputed”, the expected shape of X is (n_samples, n_samples).\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Target values (class labels in classification, real numbers in regression).\n     */\n    y?: ArrayLike\n\n    /**\n      Per-sample weights. Rescale C per sample. Higher weights force the classifier to put more emphasis on these points.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_NuSVR_fit = {k: v for k, v in pms_NuSVR_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_fit = bridgeNuSVR[${this.id}].fit(**pms_NuSVR_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_fit.tolist() if hasattr(res_NuSVR_fit, 'tolist') else res_NuSVR_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_NuSVR_get_metadata_routing = {k: v for k, v in pms_NuSVR_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_get_metadata_routing = bridgeNuSVR[${this.id}].get_metadata_routing(**pms_NuSVR_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_get_metadata_routing.tolist() if hasattr(res_NuSVR_get_metadata_routing, 'tolist') else res_NuSVR_get_metadata_routing`\n  }\n\n  /**\n    Perform regression on samples in X.\n\n    For an one-class model, +1 (inlier) or -1 (outlier) is returned.\n   */\n  async predict(opts: {\n    /**\n      For kernel=”precomputed”, the expected shape of X is (n_samples_test, n_samples_train).\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_NuSVR_predict = {k: v for k, v in pms_NuSVR_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_predict = bridgeNuSVR[${this.id}].predict(**pms_NuSVR_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_predict.tolist() if hasattr(res_NuSVR_predict, 'tolist') else res_NuSVR_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_NuSVR_score = {k: v for k, v in pms_NuSVR_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_score = bridgeNuSVR[${this.id}].score(**pms_NuSVR_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_score.tolist() if hasattr(res_NuSVR_score, 'tolist') else res_NuSVR_score`\n  }\n\n  /**\n    Request metadata passed to the `fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_fit_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `fit`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before set_fit_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_set_fit_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_NuSVR_set_fit_request = {k: v for k, v in pms_NuSVR_set_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_set_fit_request = bridgeNuSVR[${this.id}].set_fit_request(**pms_NuSVR_set_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_set_fit_request.tolist() if hasattr(res_NuSVR_set_fit_request, 'tolist') else res_NuSVR_set_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before set_score_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_NuSVR_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_NuSVR_set_score_request = {k: v for k, v in pms_NuSVR_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_NuSVR_set_score_request = bridgeNuSVR[${this.id}].set_score_request(**pms_NuSVR_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_NuSVR_set_score_request.tolist() if hasattr(res_NuSVR_set_score_request, 'tolist') else res_NuSVR_set_score_request`\n  }\n\n  /**\n    Coefficients of the support vector in the decision function.\n   */\n  get dual_coef_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing dual_coef_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_dual_coef_ = bridgeNuSVR[${this.id}].dual_coef_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_dual_coef_.tolist() if hasattr(attr_NuSVR_dual_coef_, 'tolist') else attr_NuSVR_dual_coef_`\n    })()\n  }\n\n  /**\n    0 if correctly fitted, 1 otherwise (will raise warning)\n   */\n  get fit_status_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing fit_status_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_fit_status_ = bridgeNuSVR[${this.id}].fit_status_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_fit_status_.tolist() if hasattr(attr_NuSVR_fit_status_, 'tolist') else attr_NuSVR_fit_status_`\n    })()\n  }\n\n  /**\n    Constants in decision function.\n   */\n  get intercept_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing intercept_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_intercept_ = bridgeNuSVR[${this.id}].intercept_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_intercept_.tolist() if hasattr(attr_NuSVR_intercept_, 'tolist') else attr_NuSVR_intercept_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_n_features_in_ = bridgeNuSVR[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_n_features_in_.tolist() if hasattr(attr_NuSVR_n_features_in_, 'tolist') else attr_NuSVR_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'NuSVR must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_feature_names_in_ = bridgeNuSVR[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_feature_names_in_.tolist() if hasattr(attr_NuSVR_feature_names_in_, 'tolist') else attr_NuSVR_feature_names_in_`\n    })()\n  }\n\n  /**\n    Number of iterations run by the optimization routine to fit the model.\n   */\n  get n_iter_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_NuSVR_n_iter_ = bridgeNuSVR[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_n_iter_.tolist() if hasattr(attr_NuSVR_n_iter_, 'tolist') else attr_NuSVR_n_iter_`\n    })()\n  }\n\n  /**\n    Array dimensions of training vector `X`.\n   */\n  get shape_fit_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing shape_fit_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_shape_fit_ = bridgeNuSVR[${this.id}].shape_fit_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_shape_fit_.tolist() if hasattr(attr_NuSVR_shape_fit_, 'tolist') else attr_NuSVR_shape_fit_`\n    })()\n  }\n\n  /**\n    Indices of support vectors.\n   */\n  get support_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('NuSVR must call init() before accessing support_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_NuSVR_support_ = bridgeNuSVR[${this.id}].support_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_support_.tolist() if hasattr(attr_NuSVR_support_, 'tolist') else attr_NuSVR_support_`\n    })()\n  }\n\n  /**\n    Support vectors.\n   */\n  get support_vectors_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This NuSVR instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'NuSVR must call init() before accessing support_vectors_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_NuSVR_support_vectors_ = bridgeNuSVR[${this.id}].support_vectors_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_NuSVR_support_vectors_.tolist() if hasattr(attr_NuSVR_support_vectors_, 'tolist') else attr_NuSVR_support_vectors_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}