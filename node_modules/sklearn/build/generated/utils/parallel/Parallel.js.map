{"version":3,"sources":["../../../../src/generated/utils/parallel/Parallel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Tweak of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") that propagates the scikit-learn configuration.\n\n  This subclass of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") ensures that the active configuration (thread-local) of scikit-learn is propagated to the parallel workers for the duration of the execution of the parallel tasks.\n\n  The API does not change and you can refer to [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") documentation for more details.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel.Parallel.html)\n */\nexport class Parallel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Iterable containing tuples of (delayed_function, args, kwargs) that should be consumed.\n     */\n    iterable?: any\n  }) {\n    this.id = `Parallel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Parallel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.parallel import Parallel\ntry: bridgeParallel\nexcept NameError: bridgeParallel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Parallel = {'iterable': ${this.opts['iterable'] ?? undefined}}\n\nctor_Parallel = {k: v for k, v in ctor_Parallel.items() if v is not None}`\n\n    await this._py.ex`bridgeParallel[${this.id}] = Parallel(**ctor_Parallel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeParallel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Dispatch the tasks and return the results.\n   */\n  async __call__(opts: {\n    /**\n      Iterable containing tuples of (delayed_function, args, kwargs) that should be consumed.\n     */\n    iterable?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Parallel___call__ = {'iterable': ${opts['iterable'] ?? undefined}}\n\npms_Parallel___call__ = {k: v for k, v in pms_Parallel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel___call__ = bridgeParallel[${this.id}].__call__(**pms_Parallel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel___call__.tolist() if hasattr(res_Parallel___call__, 'tolist') else res_Parallel___call__`\n  }\n\n  /**\n    Dispatch more data for parallel processing\n\n    This method is meant to be called concurrently by the multiprocessing callback. We rely on the thread-safety of dispatch_one_batch to protect against concurrent consumption of the unprotected iterator.\n   */\n  async dispatch_next(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_next()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_next = {}\n\npms_Parallel_dispatch_next = {k: v for k, v in pms_Parallel_dispatch_next.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_next = bridgeParallel[${this.id}].dispatch_next(**pms_Parallel_dispatch_next)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_next.tolist() if hasattr(res_Parallel_dispatch_next, 'tolist') else res_Parallel_dispatch_next`\n  }\n\n  /**\n    Prefetch the tasks for the next batch and dispatch them.\n\n    The effective size of the batch is computed here. If there are no more jobs to dispatch, return `false`, else return `true`.\n\n    The iterator consumption and dispatching is protected by the same lock so calling this function should be thread safe.\n   */\n  async dispatch_one_batch(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_one_batch()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_one_batch = {}\n\npms_Parallel_dispatch_one_batch = {k: v for k, v in pms_Parallel_dispatch_one_batch.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_one_batch = bridgeParallel[${this.id}].dispatch_one_batch(**pms_Parallel_dispatch_one_batch)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_one_batch.tolist() if hasattr(res_Parallel_dispatch_one_batch, 'tolist') else res_Parallel_dispatch_one_batch`\n  }\n\n  /**\n    Return the formatted representation of the object.\n   */\n  async format(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before format()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_format = {}\n\npms_Parallel_format = {k: v for k, v in pms_Parallel_format.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_format = bridgeParallel[${this.id}].format(**pms_Parallel_format)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_format.tolist() if hasattr(res_Parallel_format, 'tolist') else res_Parallel_format`\n  }\n\n  /**\n    Display the process of the parallel execution only a fraction of time, controlled by self.verbose.\n   */\n  async print_progress(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before print_progress()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_print_progress = {}\n\npms_Parallel_print_progress = {k: v for k, v in pms_Parallel_print_progress.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_print_progress = bridgeParallel[${this.id}].print_progress(**pms_Parallel_print_progress)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_print_progress.tolist() if hasattr(res_Parallel_print_progress, 'tolist') else res_Parallel_print_progress`\n  }\n\n  /**\n    List of results of the tasks.\n   */\n  get results(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before accessing results')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Parallel_results = bridgeParallel[${this.id}].results`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Parallel_results.tolist() if hasattr(attr_Parallel_results, 'tolist') else attr_Parallel_results`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}