{"version":3,"sources":["../../../src/generated/utils/Bunch.ts","../../../src/generated/utils/metadata_routing/MetadataRequest.ts","../../../src/generated/utils/metadata_routing/MetadataRouter.ts","../../../src/generated/utils/metadata_routing/MethodMapping.ts","../../../src/generated/utils/parallel/Parallel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Container object exposing keys as attributes.\n\n  Bunch objects are sometimes used as an output for functions and methods. They extend dictionaries by enabling values to be accessed by key, `bunch\\[\"value_key\"\\]`, or by an attribute, `bunch.value_key`.\n\n  Examples\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.Bunch.html)\n */\nexport class Bunch {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {}) {\n    this.id = `Bunch${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Bunch.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils import Bunch\ntry: bridgeBunch\nexcept NameError: bridgeBunch = {}\n`\n\n    // set up constructor params\n    await this._py.ex`ctor_Bunch = {}\n\nctor_Bunch = {k: v for k, v in ctor_Bunch.items() if v is not None}`\n\n    await this._py.ex`bridgeBunch[${this.id}] = Bunch(**ctor_Bunch)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeBunch[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  async clear(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before clear()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_clear = {}\n\npms_Bunch_clear = {k: v for k, v in pms_Bunch_clear.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_clear = bridgeBunch[${this.id}].clear(**pms_Bunch_clear)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_clear.tolist() if hasattr(res_Bunch_clear, 'tolist') else res_Bunch_clear`\n  }\n\n  async copy(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before copy()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_copy = {}\n\npms_Bunch_copy = {k: v for k, v in pms_Bunch_copy.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_copy = bridgeBunch[${this.id}].copy(**pms_Bunch_copy)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_copy.tolist() if hasattr(res_Bunch_copy, 'tolist') else res_Bunch_copy`\n  }\n\n  /**\n    Create a new dictionary with keys from iterable and values set to value.\n   */\n  async fromkeys(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before fromkeys()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_fromkeys = {}\n\npms_Bunch_fromkeys = {k: v for k, v in pms_Bunch_fromkeys.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_fromkeys = bridgeBunch[${this.id}].fromkeys(**pms_Bunch_fromkeys)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_fromkeys.tolist() if hasattr(res_Bunch_fromkeys, 'tolist') else res_Bunch_fromkeys`\n  }\n\n  /**\n    Return the value for key if key is in the dictionary, else default.\n   */\n  async get(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before get()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_get = {}\n\npms_Bunch_get = {k: v for k, v in pms_Bunch_get.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_get = bridgeBunch[${this.id}].get(**pms_Bunch_get)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_get.tolist() if hasattr(res_Bunch_get, 'tolist') else res_Bunch_get`\n  }\n\n  async items(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before items()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_items = {}\n\npms_Bunch_items = {k: v for k, v in pms_Bunch_items.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_items = bridgeBunch[${this.id}].items(**pms_Bunch_items)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_items.tolist() if hasattr(res_Bunch_items, 'tolist') else res_Bunch_items`\n  }\n\n  async keys(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before keys()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_keys = {}\n\npms_Bunch_keys = {k: v for k, v in pms_Bunch_keys.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_keys = bridgeBunch[${this.id}].keys(**pms_Bunch_keys)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_keys.tolist() if hasattr(res_Bunch_keys, 'tolist') else res_Bunch_keys`\n  }\n\n  /**\n    If key is not found, default is returned if given, otherwise KeyError is raised\n   */\n  async pop(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before pop()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_pop = {}\n\npms_Bunch_pop = {k: v for k, v in pms_Bunch_pop.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_pop = bridgeBunch[${this.id}].pop(**pms_Bunch_pop)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_pop.tolist() if hasattr(res_Bunch_pop, 'tolist') else res_Bunch_pop`\n  }\n\n  /**\n    Remove and return a (key, value) pair as a 2-tuple.\n\n    Pairs are returned in LIFO (last-in, first-out) order. Raises KeyError if the dict is empty.\n   */\n  async popitem(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before popitem()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_popitem = {}\n\npms_Bunch_popitem = {k: v for k, v in pms_Bunch_popitem.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_popitem = bridgeBunch[${this.id}].popitem(**pms_Bunch_popitem)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_popitem.tolist() if hasattr(res_Bunch_popitem, 'tolist') else res_Bunch_popitem`\n  }\n\n  /**\n    Insert key with a value of default if key is not in the dictionary.\n\n    Return the value for key if key is in the dictionary, else default.\n   */\n  async setdefault(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before setdefault()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_setdefault = {}\n\npms_Bunch_setdefault = {k: v for k, v in pms_Bunch_setdefault.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_setdefault = bridgeBunch[${this.id}].setdefault(**pms_Bunch_setdefault)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_setdefault.tolist() if hasattr(res_Bunch_setdefault, 'tolist') else res_Bunch_setdefault`\n  }\n\n  /**\n    If E is present and has a .keys() method, then does: for k in E: D\\[k\\] = E\\[k\\] If E is present and lacks a .keys() method, then does: for k, v in E: D\\[k\\] = v In either case, this is followed by: for k in F: D\\[k\\] = F\\[k\\]\n   */\n  async update(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before update()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_update = {}\n\npms_Bunch_update = {k: v for k, v in pms_Bunch_update.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_update = bridgeBunch[${this.id}].update(**pms_Bunch_update)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_update.tolist() if hasattr(res_Bunch_update, 'tolist') else res_Bunch_update`\n  }\n\n  async values(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Bunch instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Bunch must call init() before values()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Bunch_values = {}\n\npms_Bunch_values = {k: v for k, v in pms_Bunch_values.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Bunch_values = bridgeBunch[${this.id}].values(**pms_Bunch_values)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Bunch_values.tolist() if hasattr(res_Bunch_values, 'tolist') else res_Bunch_values`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Contains the metadata request info of a consumer.\n\n  Instances of `MethodMetadataRequest` are used in this class for each available method under `metadatarequest.{method}`.\n\n  Consumer-only classes such as simple estimators return a serialized version of this class as the output of `get_metadata_routing()`.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html)\n */\nexport class MetadataRequest {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The name of the object to which these requests belong.\n     */\n    owner?: string\n  }) {\n    this.id = `MetadataRequest${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRequest instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MetadataRequest.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.metadata_routing import MetadataRequest\ntry: bridgeMetadataRequest\nexcept NameError: bridgeMetadataRequest = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MetadataRequest = {'owner': ${this.opts['owner'] ?? undefined}}\n\nctor_MetadataRequest = {k: v for k, v in ctor_MetadataRequest.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMetadataRequest[${this.id}] = MetadataRequest(**ctor_MetadataRequest)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMetadataRequest[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Check whether the given parameters are consumed by the given method.\n   */\n  async consumes(opts: {\n    /**\n      The name of the method to check.\n     */\n    method?: string\n\n    /**\n      An iterable of parameters to check.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRequest instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRequest must call init() before consumes()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRequest_consumes = {'method': ${opts['method'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRequest_consumes = {k: v for k, v in pms_MetadataRequest_consumes.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRequest_consumes = bridgeMetadataRequest[${this.id}].consumes(**pms_MetadataRequest_consumes)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRequest_consumes.tolist() if hasattr(res_MetadataRequest_consumes, 'tolist') else res_MetadataRequest_consumes`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stores and handles metadata routing for a router object.\n\n  This class is used by router objects to store and handle metadata routing. Routing information is stored as a dictionary of the form `{\"object_name\": RouteMappingPair(method_mapping, routing_info)}`, where `method_mapping` is an instance of [`MethodMapping`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MethodMapping.html#sklearn.utils.metadata_routing.MethodMapping \"sklearn.utils.metadata_routing.MethodMapping\") and `routing_info` is either a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") or a [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") instance.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html)\n */\nexport class MetadataRouter {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The name of the object to which these requests belong.\n     */\n    owner?: string\n  }) {\n    this.id = `MetadataRouter${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MetadataRouter.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.metadata_routing import MetadataRouter\ntry: bridgeMetadataRouter\nexcept NameError: bridgeMetadataRouter = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MetadataRouter = {'owner': ${this.opts['owner'] ?? undefined}}\n\nctor_MetadataRouter = {k: v for k, v in ctor_MetadataRouter.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMetadataRouter[${this.id}] = MetadataRouter(**ctor_MetadataRouter)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMetadataRouter[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Add named objects with their corresponding method mapping.\n   */\n  async add(opts: {\n    /**\n      The mapping between the child and the parent’s methods.\n     */\n    method_mapping?: any\n\n    /**\n      A dictionary of objects from which metadata is extracted by calling [`get_routing_for_object`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.html#sklearn.utils.metadata_routing.get_routing_for_object \"sklearn.utils.metadata_routing.get_routing_for_object\") on them.\n     */\n    objs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before add()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_add = {'method_mapping': ${opts['method_mapping'] ?? undefined}, 'objs': ${opts['objs'] ?? undefined}}\n\npms_MetadataRouter_add = {k: v for k, v in pms_MetadataRouter_add.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_add = bridgeMetadataRouter[${this.id}].add(**pms_MetadataRouter_add)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_add.tolist() if hasattr(res_MetadataRouter_add, 'tolist') else res_MetadataRouter_add`\n  }\n\n  /**\n    Add `self` (as a consumer) to the routing.\n\n    This method is used if the router is also a consumer, and hence the router itself needs to be included in the routing. The passed object can be an estimator or a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\").\n\n    A router should add itself using this method instead of `add` since it should be treated differently than the other objects to which metadata is routed by the router.\n   */\n  async add_self_request(opts: {\n    /**\n      This is typically the router instance, i.e. `self` in a `get_metadata_routing()` implementation. It can also be a `MetadataRequest` instance.\n     */\n    obj?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MetadataRouter must call init() before add_self_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_add_self_request = {'obj': ${opts['obj'] ?? undefined}}\n\npms_MetadataRouter_add_self_request = {k: v for k, v in pms_MetadataRouter_add_self_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_add_self_request = bridgeMetadataRouter[${this.id}].add_self_request(**pms_MetadataRouter_add_self_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_add_self_request.tolist() if hasattr(res_MetadataRouter_add_self_request, 'tolist') else res_MetadataRouter_add_self_request`\n  }\n\n  /**\n    Check whether the given parameters are consumed by the given method.\n   */\n  async consumes(opts: {\n    /**\n      The name of the method to check.\n     */\n    method?: string\n\n    /**\n      An iterable of parameters to check.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before consumes()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_consumes = {'method': ${opts['method'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_consumes = {k: v for k, v in pms_MetadataRouter_consumes.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_consumes = bridgeMetadataRouter[${this.id}].consumes(**pms_MetadataRouter_consumes)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_consumes.tolist() if hasattr(res_MetadataRouter_consumes, 'tolist') else res_MetadataRouter_consumes`\n  }\n\n  /**\n    Return the input parameters requested by child objects.\n\n    The output of this method is a bunch, which includes the metadata for all methods of each child object that is used in the router’s `caller` method.\n\n    If the router is also a consumer, it also checks for warnings of `self`’s/consumer’s requested metadata.\n   */\n  async route_params(opts: {\n    /**\n      The name of the method for which the parameters are requested and routed. If called inside the [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) method of a router, it would be `\"fit\"`.\n     */\n    caller?: string\n\n    /**\n      A dictionary of provided metadata.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before route_params()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_route_params = {'caller': ${opts['caller'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_route_params = {k: v for k, v in pms_MetadataRouter_route_params.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_route_params = bridgeMetadataRouter[${this.id}].route_params(**pms_MetadataRouter_route_params)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_route_params.tolist() if hasattr(res_MetadataRouter_route_params, 'tolist') else res_MetadataRouter_route_params`\n  }\n\n  /**\n    Validate given metadata for a method.\n\n    This raises a `TypeError` if some of the passed metadata are not understood by child objects.\n   */\n  async validate_metadata(opts: {\n    /**\n      The name of the method for which the parameters are requested and routed. If called inside the [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) method of a router, it would be `\"fit\"`.\n     */\n    method?: string\n\n    /**\n      A dictionary of provided metadata.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MetadataRouter must call init() before validate_metadata()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_validate_metadata = {'method': ${opts['method'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_validate_metadata = {k: v for k, v in pms_MetadataRouter_validate_metadata.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_validate_metadata = bridgeMetadataRouter[${this.id}].validate_metadata(**pms_MetadataRouter_validate_metadata)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_validate_metadata.tolist() if hasattr(res_MetadataRouter_validate_metadata, 'tolist') else res_MetadataRouter_validate_metadata`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stores the mapping between caller and callee methods for a router.\n\n  This class is primarily used in a `get_metadata_routing()` of a router object when defining the mapping between the router’s methods and a sub-object (a sub-estimator or a scorer).\n\n  Iterating through an instance of this class yields `MethodPair(caller, callee)` instances.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MethodMapping.html)\n */\nexport class MethodMapping {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Parent estimator’s method name in which the `callee` is called.\n     */\n    caller?: string\n\n    /**\n      Child object’s method name. This method is called in `caller`.\n     */\n    callee?: string\n  }) {\n    this.id = `MethodMapping${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MethodMapping.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.metadata_routing import MethodMapping\ntry: bridgeMethodMapping\nexcept NameError: bridgeMethodMapping = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MethodMapping = {'caller': ${this.opts['caller'] ?? undefined}, 'callee': ${this.opts['callee'] ?? undefined}}\n\nctor_MethodMapping = {k: v for k, v in ctor_MethodMapping.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMethodMapping[${this.id}] = MethodMapping(**ctor_MethodMapping)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMethodMapping[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Add a method mapping.\n   */\n  async add(opts: {\n    /**\n      Parent estimator’s method name in which the `callee` is called.\n     */\n    caller?: string\n\n    /**\n      Child object’s method name. This method is called in `caller`.\n     */\n    callee?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MethodMapping must call init() before add()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MethodMapping_add = {'caller': ${opts['caller'] ?? undefined}, 'callee': ${opts['callee'] ?? undefined}}\n\npms_MethodMapping_add = {k: v for k, v in pms_MethodMapping_add.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MethodMapping_add = bridgeMethodMapping[${this.id}].add(**pms_MethodMapping_add)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MethodMapping_add.tolist() if hasattr(res_MethodMapping_add, 'tolist') else res_MethodMapping_add`\n  }\n\n  /**\n    Returns self.\n   */\n  get self(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MethodMapping must call init() before accessing self')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MethodMapping_self = bridgeMethodMapping[${this.id}].self`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MethodMapping_self.tolist() if hasattr(attr_MethodMapping_self, 'tolist') else attr_MethodMapping_self`\n    })()\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Tweak of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") that propagates the scikit-learn configuration.\n\n  This subclass of [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") ensures that the active configuration (thread-local) of scikit-learn is propagated to the parallel workers for the duration of the execution of the parallel tasks.\n\n  The API does not change and you can refer to [`joblib.Parallel`](https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html#joblib.Parallel \"(in joblib v1.5.dev0)\") documentation for more details.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.parallel.Parallel.html)\n */\nexport class Parallel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Iterable containing tuples of (delayed_function, args, kwargs) that should be consumed.\n     */\n    iterable?: any\n  }) {\n    this.id = `Parallel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Parallel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.parallel import Parallel\ntry: bridgeParallel\nexcept NameError: bridgeParallel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Parallel = {'iterable': ${this.opts['iterable'] ?? undefined}}\n\nctor_Parallel = {k: v for k, v in ctor_Parallel.items() if v is not None}`\n\n    await this._py.ex`bridgeParallel[${this.id}] = Parallel(**ctor_Parallel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeParallel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Dispatch the tasks and return the results.\n   */\n  async __call__(opts: {\n    /**\n      Iterable containing tuples of (delayed_function, args, kwargs) that should be consumed.\n     */\n    iterable?: any\n  }): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Parallel___call__ = {'iterable': ${opts['iterable'] ?? undefined}}\n\npms_Parallel___call__ = {k: v for k, v in pms_Parallel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel___call__ = bridgeParallel[${this.id}].__call__(**pms_Parallel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel___call__.tolist() if hasattr(res_Parallel___call__, 'tolist') else res_Parallel___call__`\n  }\n\n  /**\n    Dispatch more data for parallel processing\n\n    This method is meant to be called concurrently by the multiprocessing callback. We rely on the thread-safety of dispatch_one_batch to protect against concurrent consumption of the unprotected iterator.\n   */\n  async dispatch_next(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_next()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_next = {}\n\npms_Parallel_dispatch_next = {k: v for k, v in pms_Parallel_dispatch_next.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_next = bridgeParallel[${this.id}].dispatch_next(**pms_Parallel_dispatch_next)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_next.tolist() if hasattr(res_Parallel_dispatch_next, 'tolist') else res_Parallel_dispatch_next`\n  }\n\n  /**\n    Prefetch the tasks for the next batch and dispatch them.\n\n    The effective size of the batch is computed here. If there are no more jobs to dispatch, return `false`, else return `true`.\n\n    The iterator consumption and dispatching is protected by the same lock so calling this function should be thread safe.\n   */\n  async dispatch_one_batch(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before dispatch_one_batch()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_dispatch_one_batch = {}\n\npms_Parallel_dispatch_one_batch = {k: v for k, v in pms_Parallel_dispatch_one_batch.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_dispatch_one_batch = bridgeParallel[${this.id}].dispatch_one_batch(**pms_Parallel_dispatch_one_batch)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_dispatch_one_batch.tolist() if hasattr(res_Parallel_dispatch_one_batch, 'tolist') else res_Parallel_dispatch_one_batch`\n  }\n\n  /**\n    Return the formatted representation of the object.\n   */\n  async format(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before format()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_format = {}\n\npms_Parallel_format = {k: v for k, v in pms_Parallel_format.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_format = bridgeParallel[${this.id}].format(**pms_Parallel_format)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_format.tolist() if hasattr(res_Parallel_format, 'tolist') else res_Parallel_format`\n  }\n\n  /**\n    Display the process of the parallel execution only a fraction of time, controlled by self.verbose.\n   */\n  async print_progress(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before print_progress()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Parallel_print_progress = {}\n\npms_Parallel_print_progress = {k: v for k, v in pms_Parallel_print_progress.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Parallel_print_progress = bridgeParallel[${this.id}].print_progress(**pms_Parallel_print_progress)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Parallel_print_progress.tolist() if hasattr(res_Parallel_print_progress, 'tolist') else res_Parallel_print_progress`\n  }\n\n  /**\n    List of results of the tasks.\n   */\n  get results(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This Parallel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Parallel must call init() before accessing results')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Parallel_results = bridgeParallel[${this.id}].results`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Parallel_results.tolist() if hasattr(attr_Parallel_results, 'tolist') else attr_Parallel_results`\n    })()\n  }\n}\n"],"mappings":"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","names":["crypto","crypto","crypto","crypto"]}