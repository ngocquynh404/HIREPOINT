// src/generated/utils/metadata_routing/MetadataRequest.ts
import crypto from "node:crypto";
var MetadataRequest = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MetadataRequest${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MetadataRequest.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MetadataRequest
try: bridgeMetadataRequest
except NameError: bridgeMetadataRequest = {}
`;
    await this._py.ex`ctor_MetadataRequest = {'owner': ${this.opts["owner"] ?? void 0}}

ctor_MetadataRequest = {k: v for k, v in ctor_MetadataRequest.items() if v is not None}`;
    await this._py.ex`bridgeMetadataRequest[${this.id}] = MetadataRequest(**ctor_MetadataRequest)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMetadataRequest[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Check whether the given parameters are consumed by the given method.
   */
  async consumes(opts) {
    if (this._isDisposed) {
      throw new Error("This MetadataRequest instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MetadataRequest must call init() before consumes()");
    }
    await this._py.ex`pms_MetadataRequest_consumes = {'method': ${opts["method"] ?? void 0}, 'params': ${opts["params"] ?? void 0}}

pms_MetadataRequest_consumes = {k: v for k, v in pms_MetadataRequest_consumes.items() if v is not None}`;
    await this._py.ex`res_MetadataRequest_consumes = bridgeMetadataRequest[${this.id}].consumes(**pms_MetadataRequest_consumes)`;
    return this._py`res_MetadataRequest_consumes.tolist() if hasattr(res_MetadataRequest_consumes, 'tolist') else res_MetadataRequest_consumes`;
  }
};
export {
  MetadataRequest
};
//# sourceMappingURL=MetadataRequest.js.map