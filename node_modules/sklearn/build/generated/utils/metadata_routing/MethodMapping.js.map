{"version":3,"sources":["../../../../src/generated/utils/metadata_routing/MethodMapping.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stores the mapping between caller and callee methods for a router.\n\n  This class is primarily used in a `get_metadata_routing()` of a router object when defining the mapping between the router’s methods and a sub-object (a sub-estimator or a scorer).\n\n  Iterating through an instance of this class yields `MethodPair(caller, callee)` instances.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MethodMapping.html)\n */\nexport class MethodMapping {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Parent estimator’s method name in which the `callee` is called.\n     */\n    caller?: string\n\n    /**\n      Child object’s method name. This method is called in `caller`.\n     */\n    callee?: string\n  }) {\n    this.id = `MethodMapping${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MethodMapping.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.metadata_routing import MethodMapping\ntry: bridgeMethodMapping\nexcept NameError: bridgeMethodMapping = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MethodMapping = {'caller': ${this.opts['caller'] ?? undefined}, 'callee': ${this.opts['callee'] ?? undefined}}\n\nctor_MethodMapping = {k: v for k, v in ctor_MethodMapping.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMethodMapping[${this.id}] = MethodMapping(**ctor_MethodMapping)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMethodMapping[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Add a method mapping.\n   */\n  async add(opts: {\n    /**\n      Parent estimator’s method name in which the `callee` is called.\n     */\n    caller?: string\n\n    /**\n      Child object’s method name. This method is called in `caller`.\n     */\n    callee?: string\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MethodMapping must call init() before add()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MethodMapping_add = {'caller': ${opts['caller'] ?? undefined}, 'callee': ${opts['callee'] ?? undefined}}\n\npms_MethodMapping_add = {k: v for k, v in pms_MethodMapping_add.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MethodMapping_add = bridgeMethodMapping[${this.id}].add(**pms_MethodMapping_add)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MethodMapping_add.tolist() if hasattr(res_MethodMapping_add, 'tolist') else res_MethodMapping_add`\n  }\n\n  /**\n    Returns self.\n   */\n  get self(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MethodMapping instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MethodMapping must call init() before accessing self')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MethodMapping_self = bridgeMethodMapping[${this.id}].self`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MethodMapping_self.tolist() if hasattr(attr_MethodMapping_self, 'tolist') else attr_MethodMapping_self`\n    })()\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AAaZ,IAAM,gBAAN,MAAoB;AAAA,EACzB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAUT;AACD,SAAK,KAAK,gBAAgB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC3D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,qCAAqC,KAAK,KAAK,QAAQ,KAAK,MAAS,eAAe,KAAK,KAAK,QAAQ,KAAK,MAAS;AAAA;AAAA;AAIvH,UAAM,KAAK,IACR,yBAAyB,KAAK,EAAE;AAEnC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,6BAA6B,KAAK,EAAE;AAEnD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,IAAI,MAUO;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,UAAM,KAAK,IACR,wCAAwC,KAAK,QAAQ,KAAK,MAAS,eAAe,KAAK,QAAQ,KAAK,MAAS;AAAA;AAAA;AAKhH,UAAM,KAAK,IACR,iDAAiD,KAAK,EAAE;AAG3D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAqB;AACvB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,YAAQ,YAAY;AAElB,YAAM,KAAK,IACR,mDAAmD,KAAK,EAAE;AAG7D,aAAO,KACJ;AAAA,IACL,GAAG;AAAA,EACL;AACF;","names":[]}