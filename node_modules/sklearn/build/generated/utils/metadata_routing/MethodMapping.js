// src/generated/utils/metadata_routing/MethodMapping.ts
import crypto from "node:crypto";
var MethodMapping = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `MethodMapping${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error("MethodMapping.init requires a PythonBridge instance");
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.utils.metadata_routing import MethodMapping
try: bridgeMethodMapping
except NameError: bridgeMethodMapping = {}
`;
    await this._py.ex`ctor_MethodMapping = {'caller': ${this.opts["caller"] ?? void 0}, 'callee': ${this.opts["callee"] ?? void 0}}

ctor_MethodMapping = {k: v for k, v in ctor_MethodMapping.items() if v is not None}`;
    await this._py.ex`bridgeMethodMapping[${this.id}] = MethodMapping(**ctor_MethodMapping)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgeMethodMapping[${this.id}]`;
    this._isDisposed = true;
  }
  /**
    Add a method mapping.
   */
  async add(opts) {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before add()");
    }
    await this._py.ex`pms_MethodMapping_add = {'caller': ${opts["caller"] ?? void 0}, 'callee': ${opts["callee"] ?? void 0}}

pms_MethodMapping_add = {k: v for k, v in pms_MethodMapping_add.items() if v is not None}`;
    await this._py.ex`res_MethodMapping_add = bridgeMethodMapping[${this.id}].add(**pms_MethodMapping_add)`;
    return this._py`res_MethodMapping_add.tolist() if hasattr(res_MethodMapping_add, 'tolist') else res_MethodMapping_add`;
  }
  /**
    Returns self.
   */
  get self() {
    if (this._isDisposed) {
      throw new Error("This MethodMapping instance has already been disposed");
    }
    if (!this._isInitialized) {
      throw new Error("MethodMapping must call init() before accessing self");
    }
    return (async () => {
      await this._py.ex`attr_MethodMapping_self = bridgeMethodMapping[${this.id}].self`;
      return this._py`attr_MethodMapping_self.tolist() if hasattr(attr_MethodMapping_self, 'tolist') else attr_MethodMapping_self`;
    })();
  }
};
export {
  MethodMapping
};
//# sourceMappingURL=MethodMapping.js.map