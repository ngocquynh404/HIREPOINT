{"version":3,"sources":["../../../../src/generated/utils/metadata_routing/MetadataRouter.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Stores and handles metadata routing for a router object.\n\n  This class is used by router objects to store and handle metadata routing. Routing information is stored as a dictionary of the form `{\"object_name\": RouteMappingPair(method_mapping, routing_info)}`, where `method_mapping` is an instance of [`MethodMapping`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MethodMapping.html#sklearn.utils.metadata_routing.MethodMapping \"sklearn.utils.metadata_routing.MethodMapping\") and `routing_info` is either a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") or a [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") instance.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html)\n */\nexport class MetadataRouter {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The name of the object to which these requests belong.\n     */\n    owner?: string\n  }) {\n    this.id = `MetadataRouter${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MetadataRouter.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.utils.metadata_routing import MetadataRouter\ntry: bridgeMetadataRouter\nexcept NameError: bridgeMetadataRouter = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MetadataRouter = {'owner': ${this.opts['owner'] ?? undefined}}\n\nctor_MetadataRouter = {k: v for k, v in ctor_MetadataRouter.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMetadataRouter[${this.id}] = MetadataRouter(**ctor_MetadataRouter)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMetadataRouter[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Add named objects with their corresponding method mapping.\n   */\n  async add(opts: {\n    /**\n      The mapping between the child and the parent’s methods.\n     */\n    method_mapping?: any\n\n    /**\n      A dictionary of objects from which metadata is extracted by calling [`get_routing_for_object`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.get_routing_for_object.html#sklearn.utils.metadata_routing.get_routing_for_object \"sklearn.utils.metadata_routing.get_routing_for_object\") on them.\n     */\n    objs?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before add()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_add = {'method_mapping': ${opts['method_mapping'] ?? undefined}, 'objs': ${opts['objs'] ?? undefined}}\n\npms_MetadataRouter_add = {k: v for k, v in pms_MetadataRouter_add.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_add = bridgeMetadataRouter[${this.id}].add(**pms_MetadataRouter_add)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_add.tolist() if hasattr(res_MetadataRouter_add, 'tolist') else res_MetadataRouter_add`\n  }\n\n  /**\n    Add `self` (as a consumer) to the routing.\n\n    This method is used if the router is also a consumer, and hence the router itself needs to be included in the routing. The passed object can be an estimator or a [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\").\n\n    A router should add itself using this method instead of `add` since it should be treated differently than the other objects to which metadata is routed by the router.\n   */\n  async add_self_request(opts: {\n    /**\n      This is typically the router instance, i.e. `self` in a `get_metadata_routing()` implementation. It can also be a `MetadataRequest` instance.\n     */\n    obj?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MetadataRouter must call init() before add_self_request()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_add_self_request = {'obj': ${opts['obj'] ?? undefined}}\n\npms_MetadataRouter_add_self_request = {k: v for k, v in pms_MetadataRouter_add_self_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_add_self_request = bridgeMetadataRouter[${this.id}].add_self_request(**pms_MetadataRouter_add_self_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_add_self_request.tolist() if hasattr(res_MetadataRouter_add_self_request, 'tolist') else res_MetadataRouter_add_self_request`\n  }\n\n  /**\n    Check whether the given parameters are consumed by the given method.\n   */\n  async consumes(opts: {\n    /**\n      The name of the method to check.\n     */\n    method?: string\n\n    /**\n      An iterable of parameters to check.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before consumes()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_consumes = {'method': ${opts['method'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_consumes = {k: v for k, v in pms_MetadataRouter_consumes.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_consumes = bridgeMetadataRouter[${this.id}].consumes(**pms_MetadataRouter_consumes)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_consumes.tolist() if hasattr(res_MetadataRouter_consumes, 'tolist') else res_MetadataRouter_consumes`\n  }\n\n  /**\n    Return the input parameters requested by child objects.\n\n    The output of this method is a bunch, which includes the metadata for all methods of each child object that is used in the router’s `caller` method.\n\n    If the router is also a consumer, it also checks for warnings of `self`’s/consumer’s requested metadata.\n   */\n  async route_params(opts: {\n    /**\n      The name of the method for which the parameters are requested and routed. If called inside the [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) method of a router, it would be `\"fit\"`.\n     */\n    caller?: string\n\n    /**\n      A dictionary of provided metadata.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MetadataRouter must call init() before route_params()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_route_params = {'caller': ${opts['caller'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_route_params = {k: v for k, v in pms_MetadataRouter_route_params.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_route_params = bridgeMetadataRouter[${this.id}].route_params(**pms_MetadataRouter_route_params)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_route_params.tolist() if hasattr(res_MetadataRouter_route_params, 'tolist') else res_MetadataRouter_route_params`\n  }\n\n  /**\n    Validate given metadata for a method.\n\n    This raises a `TypeError` if some of the passed metadata are not understood by child objects.\n   */\n  async validate_metadata(opts: {\n    /**\n      The name of the method for which the parameters are requested and routed. If called inside the [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit) method of a router, it would be `\"fit\"`.\n     */\n    method?: string\n\n    /**\n      A dictionary of provided metadata.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This MetadataRouter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MetadataRouter must call init() before validate_metadata()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MetadataRouter_validate_metadata = {'method': ${opts['method'] ?? undefined}, 'params': ${opts['params'] ?? undefined}}\n\npms_MetadataRouter_validate_metadata = {k: v for k, v in pms_MetadataRouter_validate_metadata.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MetadataRouter_validate_metadata = bridgeMetadataRouter[${this.id}].validate_metadata(**pms_MetadataRouter_validate_metadata)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MetadataRouter_validate_metadata.tolist() if hasattr(res_MetadataRouter_validate_metadata, 'tolist') else res_MetadataRouter_validate_metadata`\n  }\n}\n"],"mappings":"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","names":[]}