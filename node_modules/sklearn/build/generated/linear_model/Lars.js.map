{"version":3,"sources":["../../../src/generated/linear_model/Lars.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Least Angle Regression model a.k.a. LAR.\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../linear_model.html#least-angle-regression).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lars.html)\n */\nexport class Lars {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).\n\n      @defaultValue `true`\n     */\n    fit_intercept?: boolean\n\n    /**\n      Sets the verbosity amount.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean | number\n\n    /**\n      Whether to use a precomputed Gram matrix to speed up calculations. If set to `'auto'` let us decide. The Gram matrix can also be passed as argument.\n\n      @defaultValue `'auto'`\n     */\n    precompute?: boolean | 'auto' | ArrayLike\n\n    /**\n      Target number of non-zero coefficients. Use `np.inf` for no limit.\n\n      @defaultValue `500`\n     */\n    n_nonzero_coefs?: number\n\n    /**\n      The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the `tol` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization.\n     */\n    eps?: number\n\n    /**\n      If `true`, X will be copied; else, it may be overwritten.\n\n      @defaultValue `true`\n     */\n    copy_X?: boolean\n\n    /**\n      If `true` the full path is stored in the `coef_path_` attribute. If you compute the solution for a large problem or many targets, setting `fit_path` to `false` will lead to a speedup, especially with a small alpha.\n\n      @defaultValue `true`\n     */\n    fit_path?: boolean\n\n    /**\n      Upper bound on a uniform noise parameter to be added to the `y` values, to satisfy the modelâ€™s assumption of one-at-a-time computations. Might help with stability.\n     */\n    jitter?: number\n\n    /**\n      Determines random number generation for jittering. Pass an int for reproducible output across multiple function calls. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-random_state). Ignored if `jitter` is `undefined`.\n     */\n    random_state?: number\n  }) {\n    this.id = `Lars${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Lars.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.linear_model import Lars\ntry: bridgeLars\nexcept NameError: bridgeLars = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Lars = {'fit_intercept': ${this.opts['fit_intercept'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'precompute': ${this.opts['precompute'] ?? undefined}, 'n_nonzero_coefs': ${this.opts['n_nonzero_coefs'] ?? undefined}, 'eps': ${this.opts['eps'] ?? undefined}, 'copy_X': ${this.opts['copy_X'] ?? undefined}, 'fit_path': ${this.opts['fit_path'] ?? undefined}, 'jitter': ${this.opts['jitter'] ?? undefined}, 'random_state': ${this.opts['random_state'] ?? undefined}}\n\nctor_Lars = {k: v for k, v in ctor_Lars.items() if v is not None}`\n\n    await this._py.ex`bridgeLars[${this.id}] = Lars(**ctor_Lars)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLars[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model using X, y as training data.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Xy = np.dot(X.T, y) that can be precomputed. It is useful only when the Gram matrix is precomputed.\n     */\n    Xy?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Lars_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'Xy': np.array(${opts['Xy'] ?? undefined}) if ${opts['Xy'] !== undefined} else None}\n\npms_Lars_fit = {k: v for k, v in pms_Lars_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_Lars_fit = bridgeLars[${this.id}].fit(**pms_Lars_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_fit.tolist() if hasattr(res_Lars_fit, 'tolist') else res_Lars_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Lars_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_Lars_get_metadata_routing = {k: v for k, v in pms_Lars_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Lars_get_metadata_routing = bridgeLars[${this.id}].get_metadata_routing(**pms_Lars_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_get_metadata_routing.tolist() if hasattr(res_Lars_get_metadata_routing, 'tolist') else res_Lars_get_metadata_routing`\n  }\n\n  /**\n    Predict using the linear model.\n   */\n  async predict(opts: {\n    /**\n      Samples.\n     */\n    X?: ArrayLike | SparseMatrix\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Lars_predict = {'X': ${opts['X'] ?? undefined}}\n\npms_Lars_predict = {k: v for k, v in pms_Lars_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Lars_predict = bridgeLars[${this.id}].predict(**pms_Lars_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_predict.tolist() if hasattr(res_Lars_predict, 'tolist') else res_Lars_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Lars_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_Lars_score = {k: v for k, v in pms_Lars_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Lars_score = bridgeLars[${this.id}].score(**pms_Lars_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_score.tolist() if hasattr(res_Lars_score, 'tolist') else res_Lars_score`\n  }\n\n  /**\n    Request metadata passed to the `fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_fit_request(opts: {\n    /**\n      Metadata routing for `Xy` parameter in `fit`.\n     */\n    Xy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before set_fit_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Lars_set_fit_request = {'Xy': ${opts['Xy'] ?? undefined}}\n\npms_Lars_set_fit_request = {k: v for k, v in pms_Lars_set_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Lars_set_fit_request = bridgeLars[${this.id}].set_fit_request(**pms_Lars_set_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_set_fit_request.tolist() if hasattr(res_Lars_set_fit_request, 'tolist') else res_Lars_set_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before set_score_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Lars_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_Lars_set_score_request = {k: v for k, v in pms_Lars_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Lars_set_score_request = bridgeLars[${this.id}].set_score_request(**pms_Lars_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Lars_set_score_request.tolist() if hasattr(res_Lars_set_score_request, 'tolist') else res_Lars_set_score_request`\n  }\n\n  /**\n    Maximum of covariances (in absolute value) at each iteration. `n_alphas` is either `max_iter`, `n_features` or the number of nodes in the path with `alpha >= alpha_min`, whichever is smaller. If this is a list of array-like, the length of the outer list is `n_targets`.\n   */\n  get alphas_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing alphas_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_Lars_alphas_ = bridgeLars[${this.id}].alphas_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_alphas_.tolist() if hasattr(attr_Lars_alphas_, 'tolist') else attr_Lars_alphas_`\n    })()\n  }\n\n  /**\n    Indices of active variables at the end of the path. If this is a list of list, the length of the outer list is `n_targets`.\n   */\n  get active_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing active_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_Lars_active_ = bridgeLars[${this.id}].active_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_active_.tolist() if hasattr(attr_Lars_active_, 'tolist') else attr_Lars_active_`\n    })()\n  }\n\n  /**\n    The varying values of the coefficients along the path. It is not present if the `fit_path` parameter is `false`. If this is a list of array-like, the length of the outer list is `n_targets`.\n   */\n  get coef_path_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing coef_path_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Lars_coef_path_ = bridgeLars[${this.id}].coef_path_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_coef_path_.tolist() if hasattr(attr_Lars_coef_path_, 'tolist') else attr_Lars_coef_path_`\n    })()\n  }\n\n  /**\n    Parameter vector (w in the formulation formula).\n   */\n  get coef_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing coef_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_Lars_coef_ = bridgeLars[${this.id}].coef_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_coef_.tolist() if hasattr(attr_Lars_coef_, 'tolist') else attr_Lars_coef_`\n    })()\n  }\n\n  /**\n    Independent term in decision function.\n   */\n  get intercept_(): Promise<number | ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing intercept_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Lars_intercept_ = bridgeLars[${this.id}].intercept_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_intercept_.tolist() if hasattr(attr_Lars_intercept_, 'tolist') else attr_Lars_intercept_`\n    })()\n  }\n\n  /**\n    The number of iterations taken by lars_path to find the grid of alphas for each target.\n   */\n  get n_iter_(): Promise<ArrayLike | number> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_Lars_n_iter_ = bridgeLars[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_n_iter_.tolist() if hasattr(attr_Lars_n_iter_, 'tolist') else attr_Lars_n_iter_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Lars must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Lars_n_features_in_ = bridgeLars[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_n_features_in_.tolist() if hasattr(attr_Lars_n_features_in_, 'tolist') else attr_Lars_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Lars instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'Lars must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_Lars_feature_names_in_ = bridgeLars[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_Lars_feature_names_in_.tolist() if hasattr(attr_Lars_feature_names_in_, 'tolist') else attr_Lars_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}