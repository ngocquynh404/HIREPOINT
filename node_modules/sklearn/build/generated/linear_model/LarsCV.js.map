{"version":3,"sources":["../../../src/generated/linear_model/LarsCV.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Cross-validated Least Angle Regression model.\n\n  See glossary entry for [cross-validation estimator](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-cross-validation-estimator).\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../linear_model.html#least-angle-regression).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LarsCV.html)\n */\nexport class LarsCV {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be centered).\n\n      @defaultValue `true`\n     */\n    fit_intercept?: boolean\n\n    /**\n      Sets the verbosity amount.\n\n      @defaultValue `false`\n     */\n    verbose?: boolean | number\n\n    /**\n      Maximum number of iterations to perform.\n\n      @defaultValue `500`\n     */\n    max_iter?: number\n\n    /**\n      Whether to use a precomputed Gram matrix to speed up calculations. If set to `'auto'` let us decide. The Gram matrix cannot be passed as argument since we will use only subsets of X.\n\n      @defaultValue `'auto'`\n     */\n    precompute?: boolean | 'auto' | ArrayLike\n\n    /**\n      Determines the cross-validation splitting strategy. Possible inputs for cv are:\n     */\n    cv?: number\n\n    /**\n      The maximum number of points on the path used to compute the residuals in the cross-validation.\n\n      @defaultValue `1000`\n     */\n    max_n_alphas?: number\n\n    /**\n      Number of CPUs to use during the cross validation. `undefined` means 1 unless in a [`joblib.parallel_backend`](https://joblib.readthedocs.io/en/latest/generated/joblib.parallel_backend.html#joblib.parallel_backend \"(in joblib v1.5.dev0)\") context. `\\-1` means using all processors. See [Glossary](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-n_jobs) for more details.\n     */\n    n_jobs?: number\n\n    /**\n      The machine-precision regularization in the computation of the Cholesky diagonal factors. Increase this for very ill-conditioned systems. Unlike the `tol` parameter in some iterative optimization-based algorithms, this parameter does not control the tolerance of the optimization.\n     */\n    eps?: number\n\n    /**\n      If `true`, X will be copied; else, it may be overwritten.\n\n      @defaultValue `true`\n     */\n    copy_X?: boolean\n  }) {\n    this.id = `LarsCV${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('LarsCV.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.linear_model import LarsCV\ntry: bridgeLarsCV\nexcept NameError: bridgeLarsCV = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_LarsCV = {'fit_intercept': ${this.opts['fit_intercept'] ?? undefined}, 'verbose': ${this.opts['verbose'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'precompute': ${this.opts['precompute'] ?? undefined}, 'cv': ${this.opts['cv'] ?? undefined}, 'max_n_alphas': ${this.opts['max_n_alphas'] ?? undefined}, 'n_jobs': ${this.opts['n_jobs'] ?? undefined}, 'eps': ${this.opts['eps'] ?? undefined}, 'copy_X': ${this.opts['copy_X'] ?? undefined}}\n\nctor_LarsCV = {k: v for k, v in ctor_LarsCV.items() if v is not None}`\n\n    await this._py.ex`bridgeLarsCV[${this.id}] = LarsCV(**ctor_LarsCV)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeLarsCV[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the model using X, y as training data.\n   */\n  async fit(opts: {\n    /**\n      Training data.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target values.\n     */\n    y?: ArrayLike\n\n    /**\n      Parameters to be passed to the CV splitter.\n     */\n    params?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LarsCV_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'params': ${opts['params'] ?? undefined}}\n\npms_LarsCV_fit = {k: v for k, v in pms_LarsCV_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_fit = bridgeLarsCV[${this.id}].fit(**pms_LarsCV_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_fit.tolist() if hasattr(res_LarsCV_fit, 'tolist') else res_LarsCV_fit`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRouter`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRouter.html#sklearn.utils.metadata_routing.MetadataRouter \"sklearn.utils.metadata_routing.MetadataRouter\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LarsCV_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_LarsCV_get_metadata_routing = {k: v for k, v in pms_LarsCV_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_get_metadata_routing = bridgeLarsCV[${this.id}].get_metadata_routing(**pms_LarsCV_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_get_metadata_routing.tolist() if hasattr(res_LarsCV_get_metadata_routing, 'tolist') else res_LarsCV_get_metadata_routing`\n  }\n\n  /**\n    Predict using the linear model.\n   */\n  async predict(opts: {\n    /**\n      Samples.\n     */\n    X?: ArrayLike | SparseMatrix\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_LarsCV_predict = {'X': ${opts['X'] ?? undefined}}\n\npms_LarsCV_predict = {k: v for k, v in pms_LarsCV_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_predict = bridgeLarsCV[${this.id}].predict(**pms_LarsCV_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_predict.tolist() if hasattr(res_LarsCV_predict, 'tolist') else res_LarsCV_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LarsCV_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_LarsCV_score = {k: v for k, v in pms_LarsCV_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_score = bridgeLarsCV[${this.id}].score(**pms_LarsCV_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_score.tolist() if hasattr(res_LarsCV_score, 'tolist') else res_LarsCV_score`\n  }\n\n  /**\n    Request metadata passed to the `fit` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_fit_request(opts: {\n    /**\n      Metadata routing for `Xy` parameter in `fit`.\n     */\n    Xy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before set_fit_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LarsCV_set_fit_request = {'Xy': ${opts['Xy'] ?? undefined}}\n\npms_LarsCV_set_fit_request = {k: v for k, v in pms_LarsCV_set_fit_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_set_fit_request = bridgeLarsCV[${this.id}].set_fit_request(**pms_LarsCV_set_fit_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_set_fit_request.tolist() if hasattr(res_LarsCV_set_fit_request, 'tolist') else res_LarsCV_set_fit_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before set_score_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_LarsCV_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_LarsCV_set_score_request = {k: v for k, v in pms_LarsCV_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_LarsCV_set_score_request = bridgeLarsCV[${this.id}].set_score_request(**pms_LarsCV_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_LarsCV_set_score_request.tolist() if hasattr(res_LarsCV_set_score_request, 'tolist') else res_LarsCV_set_score_request`\n  }\n\n  /**\n    Indices of active variables at the end of the path. If this is a list of lists, the outer list length is `n_targets`.\n   */\n  get active_(): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing active_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_LarsCV_active_ = bridgeLarsCV[${this.id}].active_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_active_.tolist() if hasattr(attr_LarsCV_active_, 'tolist') else attr_LarsCV_active_`\n    })()\n  }\n\n  /**\n    parameter vector (w in the formulation formula)\n   */\n  get coef_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing coef_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_LarsCV_coef_ = bridgeLarsCV[${this.id}].coef_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_coef_.tolist() if hasattr(attr_LarsCV_coef_, 'tolist') else attr_LarsCV_coef_`\n    })()\n  }\n\n  /**\n    independent term in decision function\n   */\n  get intercept_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing intercept_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_intercept_ = bridgeLarsCV[${this.id}].intercept_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_intercept_.tolist() if hasattr(attr_LarsCV_intercept_, 'tolist') else attr_LarsCV_intercept_`\n    })()\n  }\n\n  /**\n    the varying values of the coefficients along the path\n   */\n  get coef_path_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing coef_path_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_coef_path_ = bridgeLarsCV[${this.id}].coef_path_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_coef_path_.tolist() if hasattr(attr_LarsCV_coef_path_, 'tolist') else attr_LarsCV_coef_path_`\n    })()\n  }\n\n  /**\n    the estimated regularization parameter alpha\n   */\n  get alpha_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing alpha_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_LarsCV_alpha_ = bridgeLarsCV[${this.id}].alpha_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_alpha_.tolist() if hasattr(attr_LarsCV_alpha_, 'tolist') else attr_LarsCV_alpha_`\n    })()\n  }\n\n  /**\n    the different values of alpha along the path\n   */\n  get alphas_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing alphas_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_LarsCV_alphas_ = bridgeLarsCV[${this.id}].alphas_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_alphas_.tolist() if hasattr(attr_LarsCV_alphas_, 'tolist') else attr_LarsCV_alphas_`\n    })()\n  }\n\n  /**\n    all the values of alpha along the path for the different folds\n   */\n  get cv_alphas_(): Promise<ArrayLike> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing cv_alphas_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_cv_alphas_ = bridgeLarsCV[${this.id}].cv_alphas_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_cv_alphas_.tolist() if hasattr(attr_LarsCV_cv_alphas_, 'tolist') else attr_LarsCV_cv_alphas_`\n    })()\n  }\n\n  /**\n    the mean square error on left-out for each fold along the path (alpha values given by `cv_alphas`)\n   */\n  get mse_path_(): Promise<ArrayLike[]> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing mse_path_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_mse_path_ = bridgeLarsCV[${this.id}].mse_path_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_mse_path_.tolist() if hasattr(attr_LarsCV_mse_path_, 'tolist') else attr_LarsCV_mse_path_`\n    })()\n  }\n\n  /**\n    the number of iterations run by Lars with the optimal alpha.\n   */\n  get n_iter_(): Promise<ArrayLike | number> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_LarsCV_n_iter_ = bridgeLarsCV[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_n_iter_.tolist() if hasattr(attr_LarsCV_n_iter_, 'tolist') else attr_LarsCV_n_iter_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('LarsCV must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_n_features_in_ = bridgeLarsCV[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_n_features_in_.tolist() if hasattr(attr_LarsCV_n_features_in_, 'tolist') else attr_LarsCV_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This LarsCV instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'LarsCV must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_LarsCV_feature_names_in_ = bridgeLarsCV[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_LarsCV_feature_names_in_.tolist() if hasattr(attr_LarsCV_feature_names_in_, 'tolist') else attr_LarsCV_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}