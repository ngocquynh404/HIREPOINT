// src/generated/linear_model/PassiveAggressiveRegressor.ts
import crypto from "node:crypto";
var PassiveAggressiveRegressor = class {
  id;
  opts;
  _py;
  _isInitialized = false;
  _isDisposed = false;
  constructor(opts) {
    this.id = `PassiveAggressiveRegressor${crypto.randomUUID().split("-")[0]}`;
    this.opts = opts || {};
  }
  get py() {
    return this._py;
  }
  set py(pythonBridge) {
    this._py = pythonBridge;
  }
  /**
      Initializes the underlying Python resources.
  
      This instance is not usable until the `Promise` returned by `init()` resolves.
     */
  async init(py) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (this._isInitialized) {
      return;
    }
    if (!py) {
      throw new Error(
        "PassiveAggressiveRegressor.init requires a PythonBridge instance"
      );
    }
    this._py = py;
    await this._py.ex`
import numpy as np
from sklearn.linear_model import PassiveAggressiveRegressor
try: bridgePassiveAggressiveRegressor
except NameError: bridgePassiveAggressiveRegressor = {}
`;
    await this._py.ex`ctor_PassiveAggressiveRegressor = {'C': ${this.opts["C"] ?? void 0}, 'fit_intercept': ${this.opts["fit_intercept"] ?? void 0}, 'max_iter': ${this.opts["max_iter"] ?? void 0}, 'tol': ${this.opts["tol"] ?? void 0}, 'early_stopping': ${this.opts["early_stopping"] ?? void 0}, 'validation_fraction': ${this.opts["validation_fraction"] ?? void 0}, 'n_iter_no_change': ${this.opts["n_iter_no_change"] ?? void 0}, 'shuffle': ${this.opts["shuffle"] ?? void 0}, 'verbose': ${this.opts["verbose"] ?? void 0}, 'loss': ${this.opts["loss"] ?? void 0}, 'epsilon': ${this.opts["epsilon"] ?? void 0}, 'random_state': ${this.opts["random_state"] ?? void 0}, 'warm_start': ${this.opts["warm_start"] ?? void 0}, 'average': ${this.opts["average"] ?? void 0}}

ctor_PassiveAggressiveRegressor = {k: v for k, v in ctor_PassiveAggressiveRegressor.items() if v is not None}`;
    await this._py.ex`bridgePassiveAggressiveRegressor[${this.id}] = PassiveAggressiveRegressor(**ctor_PassiveAggressiveRegressor)`;
    this._isInitialized = true;
  }
  /**
      Disposes of the underlying Python resources.
  
      Once `dispose()` is called, the instance is no longer usable.
     */
  async dispose() {
    if (this._isDisposed) {
      return;
    }
    if (!this._isInitialized) {
      return;
    }
    await this._py.ex`del bridgePassiveAggressiveRegressor[${this.id}]`;
    this._isDisposed = true;
  }
  /**
      Convert coefficient matrix to dense array format.
  
      Converts the `coef_` member (back) to a numpy.ndarray. This is the default format of `coef_` and is required for fitting, so calling this method is only required on models that have previously been sparsified; otherwise, it is a no-op.
     */
  async densify(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before densify()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_densify = {}

pms_PassiveAggressiveRegressor_densify = {k: v for k, v in pms_PassiveAggressiveRegressor_densify.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_densify = bridgePassiveAggressiveRegressor[${this.id}].densify(**pms_PassiveAggressiveRegressor_densify)`;
    return this._py`res_PassiveAggressiveRegressor_densify.tolist() if hasattr(res_PassiveAggressiveRegressor_densify, 'tolist') else res_PassiveAggressiveRegressor_densify`;
  }
  /**
    Fit linear model with Passive Aggressive algorithm.
   */
  async fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before fit()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'coef_init': ${opts["coef_init"] ?? void 0}, 'intercept_init': ${opts["intercept_init"] ?? void 0}}

pms_PassiveAggressiveRegressor_fit = {k: v for k, v in pms_PassiveAggressiveRegressor_fit.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_fit = bridgePassiveAggressiveRegressor[${this.id}].fit(**pms_PassiveAggressiveRegressor_fit)`;
    return this._py`res_PassiveAggressiveRegressor_fit.tolist() if hasattr(res_PassiveAggressiveRegressor_fit, 'tolist') else res_PassiveAggressiveRegressor_fit`;
  }
  /**
      Get metadata routing of this object.
  
      Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
     */
  async get_metadata_routing(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before get_metadata_routing()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_get_metadata_routing = {'routing': ${opts["routing"] ?? void 0}}

pms_PassiveAggressiveRegressor_get_metadata_routing = {k: v for k, v in pms_PassiveAggressiveRegressor_get_metadata_routing.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_get_metadata_routing = bridgePassiveAggressiveRegressor[${this.id}].get_metadata_routing(**pms_PassiveAggressiveRegressor_get_metadata_routing)`;
    return this._py`res_PassiveAggressiveRegressor_get_metadata_routing.tolist() if hasattr(res_PassiveAggressiveRegressor_get_metadata_routing, 'tolist') else res_PassiveAggressiveRegressor_get_metadata_routing`;
  }
  /**
    Fit linear model with Passive Aggressive algorithm.
   */
  async partial_fit(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before partial_fit()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_partial_fit = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None}

pms_PassiveAggressiveRegressor_partial_fit = {k: v for k, v in pms_PassiveAggressiveRegressor_partial_fit.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_partial_fit = bridgePassiveAggressiveRegressor[${this.id}].partial_fit(**pms_PassiveAggressiveRegressor_partial_fit)`;
    return this._py`res_PassiveAggressiveRegressor_partial_fit.tolist() if hasattr(res_PassiveAggressiveRegressor_partial_fit, 'tolist') else res_PassiveAggressiveRegressor_partial_fit`;
  }
  /**
    Predict using the linear model.
   */
  async predict(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before predict()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_predict = {'X': ${opts["X"] ?? void 0}}

pms_PassiveAggressiveRegressor_predict = {k: v for k, v in pms_PassiveAggressiveRegressor_predict.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_predict = bridgePassiveAggressiveRegressor[${this.id}].predict(**pms_PassiveAggressiveRegressor_predict)`;
    return this._py`res_PassiveAggressiveRegressor_predict.tolist() if hasattr(res_PassiveAggressiveRegressor_predict, 'tolist') else res_PassiveAggressiveRegressor_predict`;
  }
  /**
      Return the coefficient of determination of the prediction.
  
      The coefficient of determination \\(R^2\\) is defined as \\((1 - \\frac{u}{v})\\), where \\(u\\) is the residual sum of squares `((y_true \- y_pred)\*\* 2).sum()` and \\(v\\) is the total sum of squares `((y_true \- y_true.mean()) \*\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\(R^2\\) score of 0.0.
     */
  async score(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before score()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_score = {'X': np.array(${opts["X"] ?? void 0}) if ${opts["X"] !== void 0} else None, 'y': np.array(${opts["y"] ?? void 0}) if ${opts["y"] !== void 0} else None, 'sample_weight': np.array(${opts["sample_weight"] ?? void 0}) if ${opts["sample_weight"] !== void 0} else None}

pms_PassiveAggressiveRegressor_score = {k: v for k, v in pms_PassiveAggressiveRegressor_score.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_score = bridgePassiveAggressiveRegressor[${this.id}].score(**pms_PassiveAggressiveRegressor_score)`;
    return this._py`res_PassiveAggressiveRegressor_score.tolist() if hasattr(res_PassiveAggressiveRegressor_score, 'tolist') else res_PassiveAggressiveRegressor_score`;
  }
  /**
      Request metadata passed to the `fit` method.
  
      Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
  async set_fit_request(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before set_fit_request()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_set_fit_request = {'coef_init': ${opts["coef_init"] ?? void 0}, 'intercept_init': ${opts["intercept_init"] ?? void 0}}

pms_PassiveAggressiveRegressor_set_fit_request = {k: v for k, v in pms_PassiveAggressiveRegressor_set_fit_request.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_set_fit_request = bridgePassiveAggressiveRegressor[${this.id}].set_fit_request(**pms_PassiveAggressiveRegressor_set_fit_request)`;
    return this._py`res_PassiveAggressiveRegressor_set_fit_request.tolist() if hasattr(res_PassiveAggressiveRegressor_set_fit_request, 'tolist') else res_PassiveAggressiveRegressor_set_fit_request`;
  }
  /**
      Request metadata passed to the `partial_fit` method.
  
      Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
  async set_partial_fit_request(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before set_partial_fit_request()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_set_partial_fit_request = {'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_PassiveAggressiveRegressor_set_partial_fit_request = {k: v for k, v in pms_PassiveAggressiveRegressor_set_partial_fit_request.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_set_partial_fit_request = bridgePassiveAggressiveRegressor[${this.id}].set_partial_fit_request(**pms_PassiveAggressiveRegressor_set_partial_fit_request)`;
    return this._py`res_PassiveAggressiveRegressor_set_partial_fit_request.tolist() if hasattr(res_PassiveAggressiveRegressor_set_partial_fit_request, 'tolist') else res_PassiveAggressiveRegressor_set_partial_fit_request`;
  }
  /**
      Request metadata passed to the `score` method.
  
      Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config "sklearn.set_config")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.
  
      The options for each parameter are:
     */
  async set_score_request(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before set_score_request()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_set_score_request = {'sample_weight': ${opts["sample_weight"] ?? void 0}}

pms_PassiveAggressiveRegressor_set_score_request = {k: v for k, v in pms_PassiveAggressiveRegressor_set_score_request.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_set_score_request = bridgePassiveAggressiveRegressor[${this.id}].set_score_request(**pms_PassiveAggressiveRegressor_set_score_request)`;
    return this._py`res_PassiveAggressiveRegressor_set_score_request.tolist() if hasattr(res_PassiveAggressiveRegressor_set_score_request, 'tolist') else res_PassiveAggressiveRegressor_set_score_request`;
  }
  /**
      Convert coefficient matrix to sparse format.
  
      Converts the `coef_` member to a scipy.sparse matrix, which for L1-regularized models can be much more memory- and storage-efficient than the usual numpy.ndarray representation.
  
      The `intercept_` member is not converted.
     */
  async sparsify(opts) {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before sparsify()"
      );
    }
    await this._py.ex`pms_PassiveAggressiveRegressor_sparsify = {}

pms_PassiveAggressiveRegressor_sparsify = {k: v for k, v in pms_PassiveAggressiveRegressor_sparsify.items() if v is not None}`;
    await this._py.ex`res_PassiveAggressiveRegressor_sparsify = bridgePassiveAggressiveRegressor[${this.id}].sparsify(**pms_PassiveAggressiveRegressor_sparsify)`;
    return this._py`res_PassiveAggressiveRegressor_sparsify.tolist() if hasattr(res_PassiveAggressiveRegressor_sparsify, 'tolist') else res_PassiveAggressiveRegressor_sparsify`;
  }
  /**
    Weights assigned to the features.
   */
  get coef_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing coef_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_coef_ = bridgePassiveAggressiveRegressor[${this.id}].coef_`;
      return this._py`attr_PassiveAggressiveRegressor_coef_.tolist() if hasattr(attr_PassiveAggressiveRegressor_coef_, 'tolist') else attr_PassiveAggressiveRegressor_coef_`;
    })();
  }
  /**
    Constants in decision function.
   */
  get intercept_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing intercept_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_intercept_ = bridgePassiveAggressiveRegressor[${this.id}].intercept_`;
      return this._py`attr_PassiveAggressiveRegressor_intercept_.tolist() if hasattr(attr_PassiveAggressiveRegressor_intercept_, 'tolist') else attr_PassiveAggressiveRegressor_intercept_`;
    })();
  }
  /**
    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).
   */
  get n_features_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing n_features_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_n_features_in_ = bridgePassiveAggressiveRegressor[${this.id}].n_features_in_`;
      return this._py`attr_PassiveAggressiveRegressor_n_features_in_.tolist() if hasattr(attr_PassiveAggressiveRegressor_n_features_in_, 'tolist') else attr_PassiveAggressiveRegressor_n_features_in_`;
    })();
  }
  /**
    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.
   */
  get feature_names_in_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing feature_names_in_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_feature_names_in_ = bridgePassiveAggressiveRegressor[${this.id}].feature_names_in_`;
      return this._py`attr_PassiveAggressiveRegressor_feature_names_in_.tolist() if hasattr(attr_PassiveAggressiveRegressor_feature_names_in_, 'tolist') else attr_PassiveAggressiveRegressor_feature_names_in_`;
    })();
  }
  /**
    The actual number of iterations to reach the stopping criterion.
   */
  get n_iter_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing n_iter_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_n_iter_ = bridgePassiveAggressiveRegressor[${this.id}].n_iter_`;
      return this._py`attr_PassiveAggressiveRegressor_n_iter_.tolist() if hasattr(attr_PassiveAggressiveRegressor_n_iter_, 'tolist') else attr_PassiveAggressiveRegressor_n_iter_`;
    })();
  }
  /**
    Number of weight updates performed during training. Same as `(n_iter_ \* n_samples + 1)`.
   */
  get t_() {
    if (this._isDisposed) {
      throw new Error(
        "This PassiveAggressiveRegressor instance has already been disposed"
      );
    }
    if (!this._isInitialized) {
      throw new Error(
        "PassiveAggressiveRegressor must call init() before accessing t_"
      );
    }
    return (async () => {
      await this._py.ex`attr_PassiveAggressiveRegressor_t_ = bridgePassiveAggressiveRegressor[${this.id}].t_`;
      return this._py`attr_PassiveAggressiveRegressor_t_.tolist() if hasattr(attr_PassiveAggressiveRegressor_t_, 'tolist') else attr_PassiveAggressiveRegressor_t_`;
    })();
  }
};
export {
  PassiveAggressiveRegressor
};
//# sourceMappingURL=PassiveAggressiveRegressor.js.map