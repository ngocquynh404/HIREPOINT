{"version":3,"sources":["../../../src/generated/cross_decomposition/CCA.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Canonical Correlation Analysis, also known as “Mode B” PLS.\n\n  For a comparison between other cross decomposition algorithms, see [Compare cross decomposition methods](https://scikit-learn.org/stable/modules/generated/../../auto_examples/cross_decomposition/plot_compare_cross_decomposition.html#sphx-glr-auto-examples-cross-decomposition-plot-compare-cross-decomposition-py).\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../cross_decomposition.html#cross-decomposition).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.cross_decomposition.CCA.html)\n */\nexport class CCA {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Number of components to keep. Should be in `\\[1, min(n_samples, n_features, n_targets)\\]`.\n\n      @defaultValue `2`\n     */\n    n_components?: number\n\n    /**\n      Whether to scale `X` and `Y`.\n\n      @defaultValue `true`\n     */\n    scale?: boolean\n\n    /**\n      The maximum number of iterations of the power method.\n\n      @defaultValue `500`\n     */\n    max_iter?: number\n\n    /**\n      The tolerance used as convergence criteria in the power method: the algorithm stops whenever the squared norm of `u_i \\- u_{i-1}` is less than `tol`, where `u` corresponds to the left singular vector.\n\n      @defaultValue `0.000001`\n     */\n    tol?: number\n\n    /**\n      Whether to copy `X` and `Y` in fit before applying centering, and potentially scaling. If `false`, these operations will be done inplace, modifying both arrays.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }) {\n    this.id = `CCA${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('CCA.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.cross_decomposition import CCA\ntry: bridgeCCA\nexcept NameError: bridgeCCA = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_CCA = {'n_components': ${this.opts['n_components'] ?? undefined}, 'scale': ${this.opts['scale'] ?? undefined}, 'max_iter': ${this.opts['max_iter'] ?? undefined}, 'tol': ${this.opts['tol'] ?? undefined}, 'copy': ${this.opts['copy'] ?? undefined}}\n\nctor_CCA = {k: v for k, v in ctor_CCA.items() if v is not None}`\n\n    await this._py.ex`bridgeCCA[${this.id}] = CCA(**ctor_CCA)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeCCA[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit model to data.\n   */\n  async fit(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of predictors.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target vectors, where `n_samples` is the number of samples and `n_targets` is the number of response variables.\n     */\n    y?: ArrayLike\n\n    /**\n      Target vectors, where `n_samples` is the number of samples and `n_targets` is the number of response variables.\n     */\n    Y?: ArrayLike\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None}\n\npms_CCA_fit = {k: v for k, v in pms_CCA_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_CCA_fit = bridgeCCA[${this.id}].fit(**pms_CCA_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_fit.tolist() if hasattr(res_CCA_fit, 'tolist') else res_CCA_fit`\n  }\n\n  /**\n    Learn and apply the dimension reduction on the train data.\n   */\n  async fit_transform(opts: {\n    /**\n      Training vectors, where `n_samples` is the number of samples and `n_features` is the number of predictors.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target vectors, where `n_samples` is the number of samples and `n_targets` is the number of response variables.\n     */\n    y?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before fit_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None}\n\npms_CCA_fit_transform = {k: v for k, v in pms_CCA_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_fit_transform = bridgeCCA[${this.id}].fit_transform(**pms_CCA_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_fit_transform.tolist() if hasattr(res_CCA_fit_transform, 'tolist') else res_CCA_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n\n    The feature names out will prefixed by the lowercased class name. For example, if the transformer outputs 3 features, then the feature names out are: `\\[\"class_name0\", \"class_name1\", \"class_name2\"\\]`.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Only used to validate feature names with the names seen in `fit`.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before get_feature_names_out()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_CCA_get_feature_names_out = {k: v for k, v in pms_CCA_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_get_feature_names_out = bridgeCCA[${this.id}].get_feature_names_out(**pms_CCA_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_get_feature_names_out.tolist() if hasattr(res_CCA_get_feature_names_out, 'tolist') else res_CCA_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before get_metadata_routing()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_CCA_get_metadata_routing = {k: v for k, v in pms_CCA_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_get_metadata_routing = bridgeCCA[${this.id}].get_metadata_routing(**pms_CCA_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_get_metadata_routing.tolist() if hasattr(res_CCA_get_metadata_routing, 'tolist') else res_CCA_get_metadata_routing`\n  }\n\n  /**\n    Transform data back to its original space.\n   */\n  async inverse_transform(opts: {\n    /**\n      New data, where `n_samples` is the number of samples and `n_components` is the number of pls components.\n     */\n    X?: ArrayLike[]\n\n    /**\n      New target, where `n_samples` is the number of samples and `n_components` is the number of pls components.\n     */\n    y?: ArrayLike\n\n    /**\n      New target, where `n_samples` is the number of samples and `n_components` is the number of pls components.\n     */\n    Y?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before inverse_transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_inverse_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None}\n\npms_CCA_inverse_transform = {k: v for k, v in pms_CCA_inverse_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_inverse_transform = bridgeCCA[${this.id}].inverse_transform(**pms_CCA_inverse_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_inverse_transform.tolist() if hasattr(res_CCA_inverse_transform, 'tolist') else res_CCA_inverse_transform`\n  }\n\n  /**\n    Predict targets of given samples.\n   */\n  async predict(opts: {\n    /**\n      Samples.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Whether to copy `X` and `Y`, or perform in-place normalization.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before predict()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_predict = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'copy': ${opts['copy'] ?? undefined}}\n\npms_CCA_predict = {k: v for k, v in pms_CCA_predict.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_predict = bridgeCCA[${this.id}].predict(**pms_CCA_predict)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_predict.tolist() if hasattr(res_CCA_predict, 'tolist') else res_CCA_predict`\n  }\n\n  /**\n    Return the coefficient of determination of the prediction.\n\n    The coefficient of determination \\\\(R^2\\\\) is defined as \\\\((1 - \\\\frac{u}{v})\\\\), where \\\\(u\\\\) is the residual sum of squares `((y_true \\- y_pred)\\*\\* 2).sum()` and \\\\(v\\\\) is the total sum of squares `((y_true \\- y_true.mean()) \\*\\* 2).sum()`. The best possible score is 1.0 and it can be negative (because the model can be arbitrarily worse). A constant model that always predicts the expected value of `y`, disregarding the input features, would get a \\\\(R^2\\\\) score of 0.0.\n   */\n  async score(opts: {\n    /**\n      Test samples. For some estimators this may be a precomputed kernel matrix or a list of generic objects instead with shape `(n_samples, n_samples_fitted)`, where `n_samples_fitted` is the number of samples used in the fitting for the estimator.\n     */\n    X?: ArrayLike[]\n\n    /**\n      True values for `X`.\n     */\n    y?: ArrayLike\n\n    /**\n      Sample weights.\n     */\n    sample_weight?: ArrayLike\n  }): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before score()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_score = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'sample_weight': np.array(${opts['sample_weight'] ?? undefined}) if ${opts['sample_weight'] !== undefined} else None}\n\npms_CCA_score = {k: v for k, v in pms_CCA_score.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_score = bridgeCCA[${this.id}].score(**pms_CCA_score)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_score.tolist() if hasattr(res_CCA_score, 'tolist') else res_CCA_score`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_CCA_set_output = {k: v for k, v in pms_CCA_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_set_output = bridgeCCA[${this.id}].set_output(**pms_CCA_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_set_output.tolist() if hasattr(res_CCA_set_output, 'tolist') else res_CCA_set_output`\n  }\n\n  /**\n    Request metadata passed to the `predict` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_predict_request(opts: {\n    /**\n      Metadata routing for `copy` parameter in `predict`.\n     */\n    copy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before set_predict_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_set_predict_request = {'copy': ${opts['copy'] ?? undefined}}\n\npms_CCA_set_predict_request = {k: v for k, v in pms_CCA_set_predict_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_set_predict_request = bridgeCCA[${this.id}].set_predict_request(**pms_CCA_set_predict_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_set_predict_request.tolist() if hasattr(res_CCA_set_predict_request, 'tolist') else res_CCA_set_predict_request`\n  }\n\n  /**\n    Request metadata passed to the `score` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_score_request(opts: {\n    /**\n      Metadata routing for `sample_weight` parameter in `score`.\n     */\n    sample_weight?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before set_score_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_set_score_request = {'sample_weight': ${opts['sample_weight'] ?? undefined}}\n\npms_CCA_set_score_request = {k: v for k, v in pms_CCA_set_score_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_set_score_request = bridgeCCA[${this.id}].set_score_request(**pms_CCA_set_score_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_set_score_request.tolist() if hasattr(res_CCA_set_score_request, 'tolist') else res_CCA_set_score_request`\n  }\n\n  /**\n    Request metadata passed to the `transform` method.\n\n    Note that this method is only relevant if `enable_metadata_routing=True` (see [`sklearn.set_config`](https://scikit-learn.org/stable/modules/generated/sklearn.set_config.html#sklearn.set_config \"sklearn.set_config\")). Please see [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n\n    The options for each parameter are:\n   */\n  async set_transform_request(opts: {\n    /**\n      Metadata routing for `copy` parameter in `transform`.\n     */\n    copy?: string | boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before set_transform_request()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_set_transform_request = {'copy': ${opts['copy'] ?? undefined}}\n\npms_CCA_set_transform_request = {k: v for k, v in pms_CCA_set_transform_request.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_set_transform_request = bridgeCCA[${this.id}].set_transform_request(**pms_CCA_set_transform_request)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_set_transform_request.tolist() if hasattr(res_CCA_set_transform_request, 'tolist') else res_CCA_set_transform_request`\n  }\n\n  /**\n    Apply the dimension reduction.\n   */\n  async transform(opts: {\n    /**\n      Samples to transform.\n     */\n    X?: ArrayLike[]\n\n    /**\n      Target vectors.\n     */\n    y?: ArrayLike[]\n\n    /**\n      Target vectors.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Whether to copy `X` and `Y`, or perform in-place normalization.\n\n      @defaultValue `true`\n     */\n    copy?: boolean\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CCA_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': np.array(${opts['y'] ?? undefined}) if ${opts['y'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'copy': ${opts['copy'] ?? undefined}}\n\npms_CCA_transform = {k: v for k, v in pms_CCA_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CCA_transform = bridgeCCA[${this.id}].transform(**pms_CCA_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CCA_transform.tolist() if hasattr(res_CCA_transform, 'tolist') else res_CCA_transform`\n  }\n\n  /**\n    The left singular vectors of the cross-covariance matrices of each iteration.\n   */\n  get x_weights_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing x_weights_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_CCA_x_weights_ = bridgeCCA[${this.id}].x_weights_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_x_weights_.tolist() if hasattr(attr_CCA_x_weights_, 'tolist') else attr_CCA_x_weights_`\n    })()\n  }\n\n  /**\n    The right singular vectors of the cross-covariance matrices of each iteration.\n   */\n  get y_weights_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing y_weights_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_CCA_y_weights_ = bridgeCCA[${this.id}].y_weights_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_y_weights_.tolist() if hasattr(attr_CCA_y_weights_, 'tolist') else attr_CCA_y_weights_`\n    })()\n  }\n\n  /**\n    The loadings of `X`.\n   */\n  get x_loadings_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing x_loadings_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_x_loadings_ = bridgeCCA[${this.id}].x_loadings_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_x_loadings_.tolist() if hasattr(attr_CCA_x_loadings_, 'tolist') else attr_CCA_x_loadings_`\n    })()\n  }\n\n  /**\n    The loadings of `Y`.\n   */\n  get y_loadings_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing y_loadings_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_y_loadings_ = bridgeCCA[${this.id}].y_loadings_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_y_loadings_.tolist() if hasattr(attr_CCA_y_loadings_, 'tolist') else attr_CCA_y_loadings_`\n    })()\n  }\n\n  /**\n    The projection matrix used to transform `X`.\n   */\n  get x_rotations_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing x_rotations_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_x_rotations_ = bridgeCCA[${this.id}].x_rotations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_x_rotations_.tolist() if hasattr(attr_CCA_x_rotations_, 'tolist') else attr_CCA_x_rotations_`\n    })()\n  }\n\n  /**\n    The projection matrix used to transform `Y`.\n   */\n  get y_rotations_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing y_rotations_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_y_rotations_ = bridgeCCA[${this.id}].y_rotations_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_y_rotations_.tolist() if hasattr(attr_CCA_y_rotations_, 'tolist') else attr_CCA_y_rotations_`\n    })()\n  }\n\n  /**\n    The coefficients of the linear model such that `Y` is approximated as `Y \\= X @ coef_.T + intercept_`.\n   */\n  get coef_(): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing coef_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_CCA_coef_ = bridgeCCA[${this.id}].coef_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_coef_.tolist() if hasattr(attr_CCA_coef_, 'tolist') else attr_CCA_coef_`\n    })()\n  }\n\n  /**\n    The intercepts of the linear model such that `Y` is approximated as `Y \\= X @ coef_.T + intercept_`.\n   */\n  get intercept_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing intercept_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_CCA_intercept_ = bridgeCCA[${this.id}].intercept_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_intercept_.tolist() if hasattr(attr_CCA_intercept_, 'tolist') else attr_CCA_intercept_`\n    })()\n  }\n\n  /**\n    Number of iterations of the power method, for each component.\n   */\n  get n_iter_(): Promise<any[]> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing n_iter_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py.ex`attr_CCA_n_iter_ = bridgeCCA[${this.id}].n_iter_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_n_iter_.tolist() if hasattr(attr_CCA_n_iter_, 'tolist') else attr_CCA_n_iter_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing n_features_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_n_features_in_ = bridgeCCA[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_n_features_in_.tolist() if hasattr(attr_CCA_n_features_in_, 'tolist') else attr_CCA_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This CCA instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CCA must call init() before accessing feature_names_in_')\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_CCA_feature_names_in_ = bridgeCCA[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_CCA_feature_names_in_.tolist() if hasattr(attr_CCA_feature_names_in_, 'tolist') else attr_CCA_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}