{"version":3,"sources":["../../../../src/generated/gaussian_process/kernels/Kernel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Base class for all kernels.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Kernel.html)\n */\nexport class Kernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The log-transformed bounds on the kernelâ€™s hyperparameters theta\n     */\n    bounds?: NDArray[]\n  }) {\n    this.id = `Kernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Kernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Kernel\ntry: bridgeKernel\nexcept NameError: bridgeKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Kernel = {'bounds': np.array(${this.opts['bounds'] ?? undefined}) if ${this.opts['bounds'] !== undefined} else None}\n\nctor_Kernel = {k: v for k, v in ctor_Kernel.items() if v is not None}`\n\n    await this._py.ex`bridgeKernel[${this.id}] = Kernel(**ctor_Kernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Evaluate the kernel.\n   */\n  async __call__(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Kernel___call__ = {}\n\npms_Kernel___call__ = {k: v for k, v in pms_Kernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel___call__ = bridgeKernel[${this.id}].__call__(**pms_Kernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel___call__.tolist() if hasattr(res_Kernel___call__, 'tolist') else res_Kernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Kernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Kernel_clone_with_theta = {k: v for k, v in pms_Kernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_clone_with_theta = bridgeKernel[${this.id}].clone_with_theta(**pms_Kernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_clone_with_theta.tolist() if hasattr(res_Kernel_clone_with_theta, 'tolist') else res_Kernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Kernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Kernel_diag = {k: v for k, v in pms_Kernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_diag = bridgeKernel[${this.id}].diag(**pms_Kernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_diag.tolist() if hasattr(res_Kernel_diag, 'tolist') else res_Kernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Kernel_is_stationary = {}\n\npms_Kernel_is_stationary = {k: v for k, v in pms_Kernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_is_stationary = bridgeKernel[${this.id}].is_stationary(**pms_Kernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_is_stationary.tolist() if hasattr(res_Kernel_is_stationary, 'tolist') else res_Kernel_is_stationary`\n  }\n}\n"],"mappings":"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","names":[]}