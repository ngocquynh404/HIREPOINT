{"version":3,"sources":["../../../../src/generated/gaussian_process/kernels/CompoundKernel.ts","../../../../src/generated/gaussian_process/kernels/ConstantKernel.ts","../../../../src/generated/gaussian_process/kernels/DotProduct.ts","../../../../src/generated/gaussian_process/kernels/Exponentiation.ts","../../../../src/generated/gaussian_process/kernels/ExpSineSquared.ts","../../../../src/generated/gaussian_process/kernels/Hyperparameter.ts","../../../../src/generated/gaussian_process/kernels/Kernel.ts","../../../../src/generated/gaussian_process/kernels/Matern.ts","../../../../src/generated/gaussian_process/kernels/PairwiseKernel.ts","../../../../src/generated/gaussian_process/kernels/Product.ts","../../../../src/generated/gaussian_process/kernels/RationalQuadratic.ts","../../../../src/generated/gaussian_process/kernels/RBF.ts","../../../../src/generated/gaussian_process/kernels/Sum.ts","../../../../src/generated/gaussian_process/kernels/WhiteKernel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Kernel which is composed of a set of other kernels.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.CompoundKernel.html)\n */\nexport class CompoundKernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The other kernels\n     */\n    kernels?: any\n  }) {\n    this.id = `CompoundKernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This CompoundKernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('CompoundKernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import CompoundKernel\ntry: bridgeCompoundKernel\nexcept NameError: bridgeCompoundKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_CompoundKernel = {'kernels': ${this.opts['kernels'] ?? undefined}}\n\nctor_CompoundKernel = {k: v for k, v in ctor_CompoundKernel.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeCompoundKernel[${this.id}] = CompoundKernel(**ctor_CompoundKernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeCompoundKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n\n    Note that this compound kernel returns the results of all simple kernel stacked along an additional axis.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[][]> {\n    if (this._isDisposed) {\n      throw new Error('This CompoundKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CompoundKernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CompoundKernel___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_CompoundKernel___call__ = {k: v for k, v in pms_CompoundKernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CompoundKernel___call__ = bridgeCompoundKernel[${this.id}].__call__(**pms_CompoundKernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CompoundKernel___call__.tolist() if hasattr(res_CompoundKernel___call__, 'tolist') else res_CompoundKernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CompoundKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'CompoundKernel must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CompoundKernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_CompoundKernel_clone_with_theta = {k: v for k, v in pms_CompoundKernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CompoundKernel_clone_with_theta = bridgeCompoundKernel[${this.id}].clone_with_theta(**pms_CompoundKernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CompoundKernel_clone_with_theta.tolist() if hasattr(res_CompoundKernel_clone_with_theta, 'tolist') else res_CompoundKernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to `np.diag(self(X))`; however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This CompoundKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CompoundKernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_CompoundKernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_CompoundKernel_diag = {k: v for k, v in pms_CompoundKernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CompoundKernel_diag = bridgeCompoundKernel[${this.id}].diag(**pms_CompoundKernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CompoundKernel_diag.tolist() if hasattr(res_CompoundKernel_diag, 'tolist') else res_CompoundKernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This CompoundKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('CompoundKernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_CompoundKernel_is_stationary = {}\n\npms_CompoundKernel_is_stationary = {k: v for k, v in pms_CompoundKernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_CompoundKernel_is_stationary = bridgeCompoundKernel[${this.id}].is_stationary(**pms_CompoundKernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_CompoundKernel_is_stationary.tolist() if hasattr(res_CompoundKernel_is_stationary, 'tolist') else res_CompoundKernel_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Constant kernel.\n\n  Can be used as part of a product-kernel where it scales the magnitude of the other factor (kernel) or as part of a sum-kernel, where it modifies the mean of the Gaussian process.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.html)\n */\nexport class ConstantKernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The constant value which defines the covariance: k(x_1, x_2) = constant_value\n\n      @defaultValue `1`\n     */\n    constant_value?: number\n\n    /**\n      The lower and upper bound on `constant_value`. If set to “fixed”, `constant_value` cannot be changed during hyperparameter tuning.\n     */\n    constant_value_bounds?: 'fixed'\n  }) {\n    this.id = `ConstantKernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ConstantKernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import ConstantKernel\ntry: bridgeConstantKernel\nexcept NameError: bridgeConstantKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ConstantKernel = {'constant_value': ${this.opts['constant_value'] ?? undefined}, 'constant_value_bounds': ${this.opts['constant_value_bounds'] ?? undefined}}\n\nctor_ConstantKernel = {k: v for k, v in ctor_ConstantKernel.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeConstantKernel[${this.id}] = ConstantKernel(**ctor_ConstantKernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeConstantKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_ConstantKernel___call__ = {k: v for k, v in pms_ConstantKernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel___call__ = bridgeConstantKernel[${this.id}].__call__(**pms_ConstantKernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel___call__.tolist() if hasattr(res_ConstantKernel___call__, 'tolist') else res_ConstantKernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConstantKernel must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_ConstantKernel_clone_with_theta = {k: v for k, v in pms_ConstantKernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_clone_with_theta = bridgeConstantKernel[${this.id}].clone_with_theta(**pms_ConstantKernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_clone_with_theta.tolist() if hasattr(res_ConstantKernel_clone_with_theta, 'tolist') else res_ConstantKernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ConstantKernel_diag = {k: v for k, v in pms_ConstantKernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_diag = bridgeConstantKernel[${this.id}].diag(**pms_ConstantKernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_diag.tolist() if hasattr(res_ConstantKernel_diag, 'tolist') else res_ConstantKernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ConstantKernel_is_stationary = {}\n\npms_ConstantKernel_is_stationary = {k: v for k, v in pms_ConstantKernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_is_stationary = bridgeConstantKernel[${this.id}].is_stationary(**pms_ConstantKernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_is_stationary.tolist() if hasattr(res_ConstantKernel_is_stationary, 'tolist') else res_ConstantKernel_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Dot-Product kernel.\n\n  The DotProduct kernel is non-stationary and can be obtained from linear regression by putting \\\\(N(0, 1)\\\\) priors on the coefficients of \\\\(x_d (d = 1, . . . , D)\\\\) and a prior of \\\\(N(0, \\\\sigma_0^2)\\\\) on the bias. The DotProduct kernel is invariant to a rotation of the coordinates about the origin, but not translations. It is parameterized by a parameter sigma_0 \\\\(\\\\sigma\\\\) which controls the inhomogenity of the kernel. For \\\\(\\\\sigma_0^2 =0\\\\), the kernel is called the homogeneous linear kernel, otherwise it is inhomogeneous. The kernel is given by\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.DotProduct.html)\n */\nexport class DotProduct {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Parameter controlling the inhomogenity of the kernel. If sigma_0=0, the kernel is homogeneous.\n\n      @defaultValue `1`\n     */\n    sigma_0?: any\n\n    /**\n      The lower and upper bound on ‘sigma_0’. If set to “fixed”, ‘sigma_0’ cannot be changed during hyperparameter tuning.\n     */\n    sigma_0_bounds?: 'fixed'\n  }) {\n    this.id = `DotProduct${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This DotProduct instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('DotProduct.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import DotProduct\ntry: bridgeDotProduct\nexcept NameError: bridgeDotProduct = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_DotProduct = {'sigma_0': ${this.opts['sigma_0'] ?? undefined}, 'sigma_0_bounds': ${this.opts['sigma_0_bounds'] ?? undefined}}\n\nctor_DotProduct = {k: v for k, v in ctor_DotProduct.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeDotProduct[${this.id}] = DotProduct(**ctor_DotProduct)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeDotProduct[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This DotProduct instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DotProduct must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DotProduct___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_DotProduct___call__ = {k: v for k, v in pms_DotProduct___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DotProduct___call__ = bridgeDotProduct[${this.id}].__call__(**pms_DotProduct___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DotProduct___call__.tolist() if hasattr(res_DotProduct___call__, 'tolist') else res_DotProduct___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DotProduct instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DotProduct must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DotProduct_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_DotProduct_clone_with_theta = {k: v for k, v in pms_DotProduct_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DotProduct_clone_with_theta = bridgeDotProduct[${this.id}].clone_with_theta(**pms_DotProduct_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DotProduct_clone_with_theta.tolist() if hasattr(res_DotProduct_clone_with_theta, 'tolist') else res_DotProduct_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y).\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This DotProduct instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DotProduct must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_DotProduct_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_DotProduct_diag = {k: v for k, v in pms_DotProduct_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DotProduct_diag = bridgeDotProduct[${this.id}].diag(**pms_DotProduct_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DotProduct_diag.tolist() if hasattr(res_DotProduct_diag, 'tolist') else res_DotProduct_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This DotProduct instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('DotProduct must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_DotProduct_is_stationary = {}\n\npms_DotProduct_is_stationary = {k: v for k, v in pms_DotProduct_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_DotProduct_is_stationary = bridgeDotProduct[${this.id}].is_stationary(**pms_DotProduct_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_DotProduct_is_stationary.tolist() if hasattr(res_DotProduct_is_stationary, 'tolist') else res_DotProduct_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  The Exponentiation kernel takes one base kernel and a scalar parameter \\\\(p\\\\) and combines them via\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Exponentiation.html)\n */\nexport class Exponentiation {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The base kernel\n     */\n    kernel?: any\n\n    /**\n      The exponent for the base kernel\n     */\n    exponent?: number\n  }) {\n    this.id = `Exponentiation${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Exponentiation instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Exponentiation.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Exponentiation\ntry: bridgeExponentiation\nexcept NameError: bridgeExponentiation = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Exponentiation = {'kernel': ${this.opts['kernel'] ?? undefined}, 'exponent': ${this.opts['exponent'] ?? undefined}}\n\nctor_Exponentiation = {k: v for k, v in ctor_Exponentiation.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeExponentiation[${this.id}] = Exponentiation(**ctor_Exponentiation)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeExponentiation[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This Exponentiation instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Exponentiation must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Exponentiation___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_Exponentiation___call__ = {k: v for k, v in pms_Exponentiation___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Exponentiation___call__ = bridgeExponentiation[${this.id}].__call__(**pms_Exponentiation___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Exponentiation___call__.tolist() if hasattr(res_Exponentiation___call__, 'tolist') else res_Exponentiation___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Exponentiation instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'Exponentiation must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Exponentiation_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Exponentiation_clone_with_theta = {k: v for k, v in pms_Exponentiation_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Exponentiation_clone_with_theta = bridgeExponentiation[${this.id}].clone_with_theta(**pms_Exponentiation_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Exponentiation_clone_with_theta.tolist() if hasattr(res_Exponentiation_clone_with_theta, 'tolist') else res_Exponentiation_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Exponentiation instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Exponentiation must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Exponentiation_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Exponentiation_diag = {k: v for k, v in pms_Exponentiation_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Exponentiation_diag = bridgeExponentiation[${this.id}].diag(**pms_Exponentiation_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Exponentiation_diag.tolist() if hasattr(res_Exponentiation_diag, 'tolist') else res_Exponentiation_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Exponentiation instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Exponentiation must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Exponentiation_is_stationary = {}\n\npms_Exponentiation_is_stationary = {k: v for k, v in pms_Exponentiation_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Exponentiation_is_stationary = bridgeExponentiation[${this.id}].is_stationary(**pms_Exponentiation_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Exponentiation_is_stationary.tolist() if hasattr(res_Exponentiation_is_stationary, 'tolist') else res_Exponentiation_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Exp-Sine-Squared kernel (aka periodic kernel).\n\n  The ExpSineSquared kernel allows one to model functions which repeat themselves exactly. It is parameterized by a length scale parameter \\\\(l>0\\\\) and a periodicity parameter \\\\(p>0\\\\). Only the isotropic variant where \\\\(l\\\\) is a scalar is supported at the moment. The kernel is given by:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.ExpSineSquared.html)\n */\nexport class ExpSineSquared {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The length scale of the kernel.\n\n      @defaultValue `1`\n     */\n    length_scale?: any\n\n    /**\n      The periodicity of the kernel.\n\n      @defaultValue `1`\n     */\n    periodicity?: any\n\n    /**\n      The lower and upper bound on ‘length_scale’. If set to “fixed”, ‘length_scale’ cannot be changed during hyperparameter tuning.\n     */\n    length_scale_bounds?: 'fixed'\n\n    /**\n      The lower and upper bound on ‘periodicity’. If set to “fixed”, ‘periodicity’ cannot be changed during hyperparameter tuning.\n     */\n    periodicity_bounds?: 'fixed'\n  }) {\n    this.id = `ExpSineSquared${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ExpSineSquared instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ExpSineSquared.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import ExpSineSquared\ntry: bridgeExpSineSquared\nexcept NameError: bridgeExpSineSquared = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ExpSineSquared = {'length_scale': ${this.opts['length_scale'] ?? undefined}, 'periodicity': ${this.opts['periodicity'] ?? undefined}, 'length_scale_bounds': ${this.opts['length_scale_bounds'] ?? undefined}, 'periodicity_bounds': ${this.opts['periodicity_bounds'] ?? undefined}}\n\nctor_ExpSineSquared = {k: v for k, v in ctor_ExpSineSquared.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeExpSineSquared[${this.id}] = ExpSineSquared(**ctor_ExpSineSquared)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeExpSineSquared[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This ExpSineSquared instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ExpSineSquared must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ExpSineSquared___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_ExpSineSquared___call__ = {k: v for k, v in pms_ExpSineSquared___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ExpSineSquared___call__ = bridgeExpSineSquared[${this.id}].__call__(**pms_ExpSineSquared___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ExpSineSquared___call__.tolist() if hasattr(res_ExpSineSquared___call__, 'tolist') else res_ExpSineSquared___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ExpSineSquared instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ExpSineSquared must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ExpSineSquared_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_ExpSineSquared_clone_with_theta = {k: v for k, v in pms_ExpSineSquared_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ExpSineSquared_clone_with_theta = bridgeExpSineSquared[${this.id}].clone_with_theta(**pms_ExpSineSquared_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ExpSineSquared_clone_with_theta.tolist() if hasattr(res_ExpSineSquared_clone_with_theta, 'tolist') else res_ExpSineSquared_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This ExpSineSquared instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ExpSineSquared must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ExpSineSquared_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ExpSineSquared_diag = {k: v for k, v in pms_ExpSineSquared_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ExpSineSquared_diag = bridgeExpSineSquared[${this.id}].diag(**pms_ExpSineSquared_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ExpSineSquared_diag.tolist() if hasattr(res_ExpSineSquared_diag, 'tolist') else res_ExpSineSquared_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ExpSineSquared instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ExpSineSquared must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ExpSineSquared_is_stationary = {}\n\npms_ExpSineSquared_is_stationary = {k: v for k, v in pms_ExpSineSquared_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ExpSineSquared_is_stationary = bridgeExpSineSquared[${this.id}].is_stationary(**pms_ExpSineSquared_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ExpSineSquared_is_stationary.tolist() if hasattr(res_ExpSineSquared_is_stationary, 'tolist') else res_ExpSineSquared_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  A kernel hyperparameter’s specification in form of a namedtuple.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Hyperparameter.html)\n */\nexport class Hyperparameter {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The name of the hyperparameter. Note that a kernel using a hyperparameter with name “x” must have the attributes self.x and self.x_bounds\n     */\n    name?: string\n\n    /**\n      The type of the hyperparameter. Currently, only “numeric” hyperparameters are supported.\n     */\n    value_type?: string\n\n    /**\n      The lower and upper bound on the parameter. If n_elements>1, a pair of 1d array with n_elements each may be given alternatively. If the string “fixed” is passed as bounds, the hyperparameter’s value cannot be changed.\n     */\n    bounds?: 'fixed'\n\n    /**\n      The number of elements of the hyperparameter value. Defaults to 1, which corresponds to a scalar hyperparameter. n_elements > 1 corresponds to a hyperparameter which is vector-valued, such as, e.g., anisotropic length-scales.\n\n      @defaultValue `1`\n     */\n    n_elements?: number\n\n    /**\n      Whether the value of this hyperparameter is fixed, i.e., cannot be changed during hyperparameter tuning. If `undefined` is passed, the “fixed” is derived based on the given bounds.\n     */\n    fixed?: boolean\n  }) {\n    this.id = `Hyperparameter${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Hyperparameter.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Hyperparameter\ntry: bridgeHyperparameter\nexcept NameError: bridgeHyperparameter = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Hyperparameter = {'name': ${this.opts['name'] ?? undefined}, 'value_type': ${this.opts['value_type'] ?? undefined}, 'bounds': ${this.opts['bounds'] ?? undefined}, 'n_elements': ${this.opts['n_elements'] ?? undefined}, 'fixed': ${this.opts['fixed'] ?? undefined}}\n\nctor_Hyperparameter = {k: v for k, v in ctor_Hyperparameter.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeHyperparameter[${this.id}] = Hyperparameter(**ctor_Hyperparameter)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeHyperparameter[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return number of occurrences of value.\n   */\n  async count(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Hyperparameter must call init() before count()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Hyperparameter_count = {}\n\npms_Hyperparameter_count = {k: v for k, v in pms_Hyperparameter_count.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Hyperparameter_count = bridgeHyperparameter[${this.id}].count(**pms_Hyperparameter_count)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Hyperparameter_count.tolist() if hasattr(res_Hyperparameter_count, 'tolist') else res_Hyperparameter_count`\n  }\n\n  /**\n    Return first index of value.\n\n    Raises ValueError if the value is not present.\n   */\n  async index(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Hyperparameter instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Hyperparameter must call init() before index()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Hyperparameter_index = {}\n\npms_Hyperparameter_index = {k: v for k, v in pms_Hyperparameter_index.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Hyperparameter_index = bridgeHyperparameter[${this.id}].index(**pms_Hyperparameter_index)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Hyperparameter_index.tolist() if hasattr(res_Hyperparameter_index, 'tolist') else res_Hyperparameter_index`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Base class for all kernels.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Kernel.html)\n */\nexport class Kernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The log-transformed bounds on the kernel’s hyperparameters theta\n     */\n    bounds?: NDArray[]\n  }) {\n    this.id = `Kernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Kernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Kernel\ntry: bridgeKernel\nexcept NameError: bridgeKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Kernel = {'bounds': np.array(${this.opts['bounds'] ?? undefined}) if ${this.opts['bounds'] !== undefined} else None}\n\nctor_Kernel = {k: v for k, v in ctor_Kernel.items() if v is not None}`\n\n    await this._py.ex`bridgeKernel[${this.id}] = Kernel(**ctor_Kernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Evaluate the kernel.\n   */\n  async __call__(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Kernel___call__ = {}\n\npms_Kernel___call__ = {k: v for k, v in pms_Kernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel___call__ = bridgeKernel[${this.id}].__call__(**pms_Kernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel___call__.tolist() if hasattr(res_Kernel___call__, 'tolist') else res_Kernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Kernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Kernel_clone_with_theta = {k: v for k, v in pms_Kernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_clone_with_theta = bridgeKernel[${this.id}].clone_with_theta(**pms_Kernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_clone_with_theta.tolist() if hasattr(res_Kernel_clone_with_theta, 'tolist') else res_Kernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Kernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Kernel_diag = {k: v for k, v in pms_Kernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_diag = bridgeKernel[${this.id}].diag(**pms_Kernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_diag.tolist() if hasattr(res_Kernel_diag, 'tolist') else res_Kernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Kernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Kernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Kernel_is_stationary = {}\n\npms_Kernel_is_stationary = {k: v for k, v in pms_Kernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Kernel_is_stationary = bridgeKernel[${this.id}].is_stationary(**pms_Kernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Kernel_is_stationary.tolist() if hasattr(res_Kernel_is_stationary, 'tolist') else res_Kernel_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Matern kernel.\n\n  The class of Matern kernels is a generalization of the [`RBF`](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RBF.html#sklearn.gaussian_process.kernels.RBF \"sklearn.gaussian_process.kernels.RBF\"). It has an additional parameter \\\\(\\\\nu\\\\) which controls the smoothness of the resulting function. The smaller \\\\(\\\\nu\\\\), the less smooth the approximated function is. As \\\\(\\\\nu\\\\rightarrow\\\\infty\\\\), the kernel becomes equivalent to the [`RBF`](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RBF.html#sklearn.gaussian_process.kernels.RBF \"sklearn.gaussian_process.kernels.RBF\") kernel. When \\\\(\\\\nu = 1/2\\\\), the Matérn kernel becomes identical to the absolute exponential kernel. Important intermediate values are \\\\(\\\\nu=1.5\\\\) (once differentiable functions) and \\\\(\\\\nu=2.5\\\\) (twice differentiable functions).\n\n  The kernel is given by:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Matern.html)\n */\nexport class Matern {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The length scale of the kernel. If a float, an isotropic kernel is used. If an array, an anisotropic kernel is used where each dimension of l defines the length-scale of the respective feature dimension.\n\n      @defaultValue `1`\n     */\n    length_scale?: number | NDArray\n\n    /**\n      The lower and upper bound on ‘length_scale’. If set to “fixed”, ‘length_scale’ cannot be changed during hyperparameter tuning.\n     */\n    length_scale_bounds?: 'fixed'\n\n    /**\n      The parameter nu controlling the smoothness of the learned function. The smaller nu, the less smooth the approximated function is. For nu=inf, the kernel becomes equivalent to the RBF kernel and for nu=0.5 to the absolute exponential kernel. Important intermediate values are nu=1.5 (once differentiable functions) and nu=2.5 (twice differentiable functions). Note that values of nu not in \\[0.5, 1.5, 2.5, inf\\] incur a considerably higher computational cost (appr. 10 times higher) since they require to evaluate the modified Bessel function. Furthermore, in contrast to l, nu is kept fixed to its initial value and not optimized.\n\n      @defaultValue `1.5`\n     */\n    nu?: number\n  }) {\n    this.id = `Matern${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Matern instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Matern.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Matern\ntry: bridgeMatern\nexcept NameError: bridgeMatern = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Matern = {'length_scale': np.array(${this.opts['length_scale'] ?? undefined}) if ${this.opts['length_scale'] !== undefined} else None, 'length_scale_bounds': ${this.opts['length_scale_bounds'] ?? undefined}, 'nu': ${this.opts['nu'] ?? undefined}}\n\nctor_Matern = {k: v for k, v in ctor_Matern.items() if v is not None}`\n\n    await this._py.ex`bridgeMatern[${this.id}] = Matern(**ctor_Matern)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMatern[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This Matern instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Matern must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Matern___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_Matern___call__ = {k: v for k, v in pms_Matern___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Matern___call__ = bridgeMatern[${this.id}].__call__(**pms_Matern___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Matern___call__.tolist() if hasattr(res_Matern___call__, 'tolist') else res_Matern___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Matern instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Matern must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Matern_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Matern_clone_with_theta = {k: v for k, v in pms_Matern_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Matern_clone_with_theta = bridgeMatern[${this.id}].clone_with_theta(**pms_Matern_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Matern_clone_with_theta.tolist() if hasattr(res_Matern_clone_with_theta, 'tolist') else res_Matern_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Matern instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Matern must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Matern_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Matern_diag = {k: v for k, v in pms_Matern_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Matern_diag = bridgeMatern[${this.id}].diag(**pms_Matern_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Matern_diag.tolist() if hasattr(res_Matern_diag, 'tolist') else res_Matern_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Matern instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Matern must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Matern_is_stationary = {}\n\npms_Matern_is_stationary = {k: v for k, v in pms_Matern_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Matern_is_stationary = bridgeMatern[${this.id}].is_stationary(**pms_Matern_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Matern_is_stationary.tolist() if hasattr(res_Matern_is_stationary, 'tolist') else res_Matern_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Wrapper for kernels in sklearn.metrics.pairwise.\n\n  A thin wrapper around the functionality of the kernels in sklearn.metrics.pairwise.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.PairwiseKernel.html)\n */\nexport class PairwiseKernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Parameter gamma of the pairwise kernel specified by metric. It should be positive.\n\n      @defaultValue `1`\n     */\n    gamma?: number\n\n    /**\n      The lower and upper bound on ‘gamma’. If set to “fixed”, ‘gamma’ cannot be changed during hyperparameter tuning.\n     */\n    gamma_bounds?: 'fixed'\n\n    /**\n      The metric to use when calculating kernel between instances in a feature array. If metric is a string, it must be one of the metrics in pairwise.PAIRWISE_KERNEL_FUNCTIONS. If metric is “precomputed”, X is assumed to be a kernel matrix. Alternatively, if metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays from X as input and return a value indicating the distance between them.\n\n      @defaultValue `'linear'`\n     */\n    metric?:\n      | 'linear'\n      | 'additive_chi2'\n      | 'chi2'\n      | 'poly'\n      | 'polynomial'\n      | 'rbf'\n      | 'laplacian'\n      | 'sigmoid'\n      | 'cosine'\n\n    /**\n      All entries of this dict (if any) are passed as keyword arguments to the pairwise kernel function.\n     */\n    pairwise_kernels_kwargs?: any\n  }) {\n    this.id = `PairwiseKernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This PairwiseKernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('PairwiseKernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import PairwiseKernel\ntry: bridgePairwiseKernel\nexcept NameError: bridgePairwiseKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_PairwiseKernel = {'gamma': ${this.opts['gamma'] ?? undefined}, 'gamma_bounds': ${this.opts['gamma_bounds'] ?? undefined}, 'metric': ${this.opts['metric'] ?? undefined}, 'pairwise_kernels_kwargs': ${this.opts['pairwise_kernels_kwargs'] ?? undefined}}\n\nctor_PairwiseKernel = {k: v for k, v in ctor_PairwiseKernel.items() if v is not None}`\n\n    await this._py\n      .ex`bridgePairwiseKernel[${this.id}] = PairwiseKernel(**ctor_PairwiseKernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgePairwiseKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This PairwiseKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PairwiseKernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PairwiseKernel___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_PairwiseKernel___call__ = {k: v for k, v in pms_PairwiseKernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PairwiseKernel___call__ = bridgePairwiseKernel[${this.id}].__call__(**pms_PairwiseKernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PairwiseKernel___call__.tolist() if hasattr(res_PairwiseKernel___call__, 'tolist') else res_PairwiseKernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This PairwiseKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'PairwiseKernel must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PairwiseKernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_PairwiseKernel_clone_with_theta = {k: v for k, v in pms_PairwiseKernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PairwiseKernel_clone_with_theta = bridgePairwiseKernel[${this.id}].clone_with_theta(**pms_PairwiseKernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PairwiseKernel_clone_with_theta.tolist() if hasattr(res_PairwiseKernel_clone_with_theta, 'tolist') else res_PairwiseKernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This PairwiseKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PairwiseKernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_PairwiseKernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_PairwiseKernel_diag = {k: v for k, v in pms_PairwiseKernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PairwiseKernel_diag = bridgePairwiseKernel[${this.id}].diag(**pms_PairwiseKernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PairwiseKernel_diag.tolist() if hasattr(res_PairwiseKernel_diag, 'tolist') else res_PairwiseKernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This PairwiseKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('PairwiseKernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_PairwiseKernel_is_stationary = {}\n\npms_PairwiseKernel_is_stationary = {k: v for k, v in pms_PairwiseKernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_PairwiseKernel_is_stationary = bridgePairwiseKernel[${this.id}].is_stationary(**pms_PairwiseKernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_PairwiseKernel_is_stationary.tolist() if hasattr(res_PairwiseKernel_is_stationary, 'tolist') else res_PairwiseKernel_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  The `Product` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines them via\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Product.html)\n */\nexport class Product {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The first base-kernel of the product-kernel\n     */\n    k1?: any\n\n    /**\n      The second base-kernel of the product-kernel\n     */\n    k2?: any\n  }) {\n    this.id = `Product${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Product instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Product.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Product\ntry: bridgeProduct\nexcept NameError: bridgeProduct = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Product = {'k1': ${this.opts['k1'] ?? undefined}, 'k2': ${this.opts['k2'] ?? undefined}}\n\nctor_Product = {k: v for k, v in ctor_Product.items() if v is not None}`\n\n    await this._py.ex`bridgeProduct[${this.id}] = Product(**ctor_Product)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeProduct[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This Product instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Product must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Product___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_Product___call__ = {k: v for k, v in pms_Product___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Product___call__ = bridgeProduct[${this.id}].__call__(**pms_Product___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Product___call__.tolist() if hasattr(res_Product___call__, 'tolist') else res_Product___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Product instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Product must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Product_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Product_clone_with_theta = {k: v for k, v in pms_Product_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Product_clone_with_theta = bridgeProduct[${this.id}].clone_with_theta(**pms_Product_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Product_clone_with_theta.tolist() if hasattr(res_Product_clone_with_theta, 'tolist') else res_Product_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Product instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Product must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Product_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Product_diag = {k: v for k, v in pms_Product_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Product_diag = bridgeProduct[${this.id}].diag(**pms_Product_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Product_diag.tolist() if hasattr(res_Product_diag, 'tolist') else res_Product_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Product instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Product must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Product_is_stationary = {}\n\npms_Product_is_stationary = {k: v for k, v in pms_Product_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Product_is_stationary = bridgeProduct[${this.id}].is_stationary(**pms_Product_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Product_is_stationary.tolist() if hasattr(res_Product_is_stationary, 'tolist') else res_Product_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Rational Quadratic kernel.\n\n  The RationalQuadratic kernel can be seen as a scale mixture (an infinite sum) of RBF kernels with different characteristic length scales. It is parameterized by a length scale parameter \\\\(l>0\\\\) and a scale mixture parameter \\\\(\\\\alpha>0\\\\). Only the isotropic variant where length_scale \\\\(l\\\\) is a scalar is supported at the moment. The kernel is given by:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RationalQuadratic.html)\n */\nexport class RationalQuadratic {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The length scale of the kernel.\n\n      @defaultValue `1`\n     */\n    length_scale?: any\n\n    /**\n      Scale mixture parameter\n\n      @defaultValue `1`\n     */\n    alpha?: any\n\n    /**\n      The lower and upper bound on ‘length_scale’. If set to “fixed”, ‘length_scale’ cannot be changed during hyperparameter tuning.\n     */\n    length_scale_bounds?: 'fixed'\n\n    /**\n      The lower and upper bound on ‘alpha’. If set to “fixed”, ‘alpha’ cannot be changed during hyperparameter tuning.\n     */\n    alpha_bounds?: 'fixed'\n  }) {\n    this.id = `RationalQuadratic${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RationalQuadratic instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('RationalQuadratic.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import RationalQuadratic\ntry: bridgeRationalQuadratic\nexcept NameError: bridgeRationalQuadratic = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_RationalQuadratic = {'length_scale': ${this.opts['length_scale'] ?? undefined}, 'alpha': ${this.opts['alpha'] ?? undefined}, 'length_scale_bounds': ${this.opts['length_scale_bounds'] ?? undefined}, 'alpha_bounds': ${this.opts['alpha_bounds'] ?? undefined}}\n\nctor_RationalQuadratic = {k: v for k, v in ctor_RationalQuadratic.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeRationalQuadratic[${this.id}] = RationalQuadratic(**ctor_RationalQuadratic)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRationalQuadratic[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RationalQuadratic instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RationalQuadratic must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RationalQuadratic___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_RationalQuadratic___call__ = {k: v for k, v in pms_RationalQuadratic___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RationalQuadratic___call__ = bridgeRationalQuadratic[${this.id}].__call__(**pms_RationalQuadratic___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RationalQuadratic___call__.tolist() if hasattr(res_RationalQuadratic___call__, 'tolist') else res_RationalQuadratic___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RationalQuadratic instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RationalQuadratic must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RationalQuadratic_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_RationalQuadratic_clone_with_theta = {k: v for k, v in pms_RationalQuadratic_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RationalQuadratic_clone_with_theta = bridgeRationalQuadratic[${this.id}].clone_with_theta(**pms_RationalQuadratic_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RationalQuadratic_clone_with_theta.tolist() if hasattr(res_RationalQuadratic_clone_with_theta, 'tolist') else res_RationalQuadratic_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RationalQuadratic instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RationalQuadratic must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RationalQuadratic_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_RationalQuadratic_diag = {k: v for k, v in pms_RationalQuadratic_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RationalQuadratic_diag = bridgeRationalQuadratic[${this.id}].diag(**pms_RationalQuadratic_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RationalQuadratic_diag.tolist() if hasattr(res_RationalQuadratic_diag, 'tolist') else res_RationalQuadratic_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This RationalQuadratic instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'RationalQuadratic must call init() before is_stationary()'\n      )\n    }\n\n    // set up method params\n    await this._py.ex`pms_RationalQuadratic_is_stationary = {}\n\npms_RationalQuadratic_is_stationary = {k: v for k, v in pms_RationalQuadratic_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RationalQuadratic_is_stationary = bridgeRationalQuadratic[${this.id}].is_stationary(**pms_RationalQuadratic_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RationalQuadratic_is_stationary.tolist() if hasattr(res_RationalQuadratic_is_stationary, 'tolist') else res_RationalQuadratic_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Radial basis function kernel (aka squared-exponential kernel).\n\n  The RBF kernel is a stationary kernel. It is also known as the “squared exponential” kernel. It is parameterized by a length scale parameter \\\\(l>0\\\\), which can either be a scalar (isotropic variant of the kernel) or a vector with the same number of dimensions as the inputs X (anisotropic variant of the kernel). The kernel is given by:\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.RBF.html)\n */\nexport class RBF {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The length scale of the kernel. If a float, an isotropic kernel is used. If an array, an anisotropic kernel is used where each dimension of l defines the length-scale of the respective feature dimension.\n\n      @defaultValue `1`\n     */\n    length_scale?: number | NDArray\n\n    /**\n      The lower and upper bound on ‘length_scale’. If set to “fixed”, ‘length_scale’ cannot be changed during hyperparameter tuning.\n     */\n    length_scale_bounds?: 'fixed'\n  }) {\n    this.id = `RBF${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This RBF instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('RBF.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import RBF\ntry: bridgeRBF\nexcept NameError: bridgeRBF = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_RBF = {'length_scale': np.array(${this.opts['length_scale'] ?? undefined}) if ${this.opts['length_scale'] !== undefined} else None, 'length_scale_bounds': ${this.opts['length_scale_bounds'] ?? undefined}}\n\nctor_RBF = {k: v for k, v in ctor_RBF.items() if v is not None}`\n\n    await this._py.ex`bridgeRBF[${this.id}] = RBF(**ctor_RBF)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeRBF[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) if evaluated instead.\n     */\n    Y?: NDArray[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This RBF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RBF must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RBF___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_RBF___call__ = {k: v for k, v in pms_RBF___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RBF___call__ = bridgeRBF[${this.id}].__call__(**pms_RBF___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RBF___call__.tolist() if hasattr(res_RBF___call__, 'tolist') else res_RBF___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RBF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RBF must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RBF_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_RBF_clone_with_theta = {k: v for k, v in pms_RBF_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RBF_clone_with_theta = bridgeRBF[${this.id}].clone_with_theta(**pms_RBF_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RBF_clone_with_theta.tolist() if hasattr(res_RBF_clone_with_theta, 'tolist') else res_RBF_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: NDArray[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This RBF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RBF must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_RBF_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_RBF_diag = {k: v for k, v in pms_RBF_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_RBF_diag = bridgeRBF[${this.id}].diag(**pms_RBF_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RBF_diag.tolist() if hasattr(res_RBF_diag, 'tolist') else res_RBF_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This RBF instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('RBF must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_RBF_is_stationary = {}\n\npms_RBF_is_stationary = {k: v for k, v in pms_RBF_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_RBF_is_stationary = bridgeRBF[${this.id}].is_stationary(**pms_RBF_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_RBF_is_stationary.tolist() if hasattr(res_RBF_is_stationary, 'tolist') else res_RBF_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  The `Sum` kernel takes two kernels \\\\(k_1\\\\) and \\\\(k_2\\\\) and combines them via\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.Sum.html)\n */\nexport class Sum {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The first base-kernel of the sum-kernel\n     */\n    k1?: any\n\n    /**\n      The second base-kernel of the sum-kernel\n     */\n    k2?: any\n  }) {\n    this.id = `Sum${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This Sum instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('Sum.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import Sum\ntry: bridgeSum\nexcept NameError: bridgeSum = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_Sum = {'k1': ${this.opts['k1'] ?? undefined}, 'k2': ${this.opts['k2'] ?? undefined}}\n\nctor_Sum = {k: v for k, v in ctor_Sum.items() if v is not None}`\n\n    await this._py.ex`bridgeSum[${this.id}] = Sum(**ctor_Sum)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeSum[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This Sum instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Sum must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Sum___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_Sum___call__ = {k: v for k, v in pms_Sum___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Sum___call__ = bridgeSum[${this.id}].__call__(**pms_Sum___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Sum___call__.tolist() if hasattr(res_Sum___call__, 'tolist') else res_Sum___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Sum instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Sum must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Sum_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_Sum_clone_with_theta = {k: v for k, v in pms_Sum_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Sum_clone_with_theta = bridgeSum[${this.id}].clone_with_theta(**pms_Sum_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Sum_clone_with_theta.tolist() if hasattr(res_Sum_clone_with_theta, 'tolist') else res_Sum_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to `np.diag(self(X))`; however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This Sum instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Sum must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_Sum_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_Sum_diag = {k: v for k, v in pms_Sum_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py.ex`res_Sum_diag = bridgeSum[${this.id}].diag(**pms_Sum_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Sum_diag.tolist() if hasattr(res_Sum_diag, 'tolist') else res_Sum_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This Sum instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('Sum must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_Sum_is_stationary = {}\n\npms_Sum_is_stationary = {k: v for k, v in pms_Sum_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_Sum_is_stationary = bridgeSum[${this.id}].is_stationary(**pms_Sum_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_Sum_is_stationary.tolist() if hasattr(res_Sum_is_stationary, 'tolist') else res_Sum_is_stationary`\n  }\n}\n","/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  White kernel.\n\n  The main use-case of this kernel is as part of a sum-kernel where it explains the noise of the signal as independently and identically normally-distributed. The parameter noise_level equals the variance of this noise.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.WhiteKernel.html)\n */\nexport class WhiteKernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      Parameter controlling the noise level (variance)\n\n      @defaultValue `1`\n     */\n    noise_level?: number\n\n    /**\n      The lower and upper bound on ‘noise_level’. If set to “fixed”, ‘noise_level’ cannot be changed during hyperparameter tuning.\n     */\n    noise_level_bounds?: 'fixed'\n  }) {\n    this.id = `WhiteKernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This WhiteKernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('WhiteKernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import WhiteKernel\ntry: bridgeWhiteKernel\nexcept NameError: bridgeWhiteKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_WhiteKernel = {'noise_level': ${this.opts['noise_level'] ?? undefined}, 'noise_level_bounds': ${this.opts['noise_level_bounds'] ?? undefined}}\n\nctor_WhiteKernel = {k: v for k, v in ctor_WhiteKernel.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeWhiteKernel[${this.id}] = WhiteKernel(**ctor_WhiteKernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeWhiteKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This WhiteKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('WhiteKernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_WhiteKernel___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_WhiteKernel___call__ = {k: v for k, v in pms_WhiteKernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_WhiteKernel___call__ = bridgeWhiteKernel[${this.id}].__call__(**pms_WhiteKernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_WhiteKernel___call__.tolist() if hasattr(res_WhiteKernel___call__, 'tolist') else res_WhiteKernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This WhiteKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('WhiteKernel must call init() before clone_with_theta()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_WhiteKernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_WhiteKernel_clone_with_theta = {k: v for k, v in pms_WhiteKernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_WhiteKernel_clone_with_theta = bridgeWhiteKernel[${this.id}].clone_with_theta(**pms_WhiteKernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_WhiteKernel_clone_with_theta.tolist() if hasattr(res_WhiteKernel_clone_with_theta, 'tolist') else res_WhiteKernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This WhiteKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('WhiteKernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_WhiteKernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_WhiteKernel_diag = {k: v for k, v in pms_WhiteKernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_WhiteKernel_diag = bridgeWhiteKernel[${this.id}].diag(**pms_WhiteKernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_WhiteKernel_diag.tolist() if hasattr(res_WhiteKernel_diag, 'tolist') else res_WhiteKernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This WhiteKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('WhiteKernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_WhiteKernel_is_stationary = {}\n\npms_WhiteKernel_is_stationary = {k: v for k, v in pms_WhiteKernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_WhiteKernel_is_stationary = bridgeWhiteKernel[${this.id}].is_stationary(**pms_WhiteKernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_WhiteKernel_is_stationary.tolist() if hasattr(res_WhiteKernel_is_stationary, 'tolist') else res_WhiteKernel_is_stationary`\n  }\n}\n"],"mappings":";AAGA,OAAO,YAAY;AASZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAKT;AACD,SAAK,KAAK,iBAAiB,OAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,uCAAuC,KAAK,KAAK,SAAS,KAAK,MAAS;AAAA;AAAA;AAI3E,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,SAAS,MAiBU;AACvB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK9P,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,8DAA8D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK9H,UAAM,KAAK,IACR,gEAAgE,KAAK,EAAE;AAG1E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKY;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKtG,UAAM,KAAK,IACR,oDAAoD,KAAK,EAAE;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6DAA6D,KAAK,EAAE;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;ACxOA,OAAOA,aAAY;AAWZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAYT;AACD,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,8CAA8C,KAAK,KAAK,gBAAgB,KAAK,MAAS,8BAA8B,KAAK,KAAK,uBAAuB,KAAK,MAAS;AAAA;AAAA;AAItK,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK9P,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,8DAA8D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK9H,UAAM,KAAK,IACR,gEAAgE,KAAK,EAAE;AAG1E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKtG,UAAM,KAAK,IACR,oDAAoD,KAAK,EAAE;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6DAA6D,KAAK,EAAE;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;AC/OA,OAAOC,aAAY;AAWZ,IAAM,aAAN,MAAiB;AAAA,EACtB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAYT;AACD,SAAK,KAAK,aAAaA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACxD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,mCAAmC,KAAK,KAAK,SAAS,KAAK,MAAS,uBAAuB,KAAK,KAAK,gBAAgB,KAAK,MAAS;AAAA;AAAA;AAItI,UAAM,KAAK,IACR,sBAAsB,KAAK,EAAE;AAEhC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,0BAA0B,KAAK,EAAE;AAEhD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK1P,UAAM,KAAK,IACR,gDAAgD,KAAK,EAAE;AAG1D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uDAAuD;AAAA,IACzE;AAGA,UAAM,KAAK,IACR,0DAA0D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK1H,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAGA,UAAM,KAAK,IACR,0CAA0C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKlG,UAAM,KAAK,IACR,4CAA4C,KAAK,EAAE;AAGtD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qDAAqD,KAAK,EAAE;AAG/D,WAAO,KACJ;AAAA,EACL;AACF;;;AC7OA,OAAOC,aAAY;AASZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAUT;AACD,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,sCAAsC,KAAK,KAAK,QAAQ,KAAK,MAAS,iBAAiB,KAAK,KAAK,UAAU,KAAK,MAAS;AAAA;AAAA;AAI5H,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK9P,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,8DAA8D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK9H,UAAM,KAAK,IACR,gEAAgE,KAAK,EAAE;AAG1E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKtG,UAAM,KAAK,IACR,oDAAoD,KAAK,EAAE;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6DAA6D,KAAK,EAAE;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;AC3OA,OAAOC,aAAY;AAWZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAwBT;AACD,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,4CAA4C,KAAK,KAAK,cAAc,KAAK,MAAS,oBAAoB,KAAK,KAAK,aAAa,KAAK,MAAS,4BAA4B,KAAK,KAAK,qBAAqB,KAAK,MAAS,2BAA2B,KAAK,KAAK,oBAAoB,KAAK,MAAS;AAAA;AAAA;AAI9R,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK9P,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,8DAA8D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK9H,UAAM,KAAK,IACR,gEAAgE,KAAK,EAAE;AAG1E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKtG,UAAM,KAAK,IACR,oDAAoD,KAAK,EAAE;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6DAA6D,KAAK,EAAE;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;AC3PA,OAAOC,aAAY;AASZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MA2BT;AACD,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,oCAAoC,KAAK,KAAK,MAAM,KAAK,MAAS,mBAAmB,KAAK,KAAK,YAAY,KAAK,MAAS,eAAe,KAAK,KAAK,QAAQ,KAAK,MAAS,mBAAmB,KAAK,KAAK,YAAY,KAAK,MAAS,cAAc,KAAK,KAAK,OAAO,KAAK,MAAS;AAAA;AAAA;AAI/Q,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,MAAM,MAAwB;AAClC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qDAAqD,KAAK,EAAE;AAG/D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM,MAAwB;AAClC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,qDAAqD,KAAK,EAAE;AAG/D,WAAO,KACJ;AAAA,EACL;AACF;;;ACxKA,OAAOC,aAAY;AASZ,IAAM,SAAN,MAAa;AAAA,EAClB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAKT;AACD,SAAK,KAAK,SAASA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACpD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,uCAAuC,KAAK,KAAK,QAAQ,KAAK,MAAS,QAAQ,KAAK,KAAK,QAAQ,MAAM,MAAS;AAAA;AAAA;AAInH,UAAM,KAAK,IAAI,kBAAkB,KAAK,EAAE;AAExC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,sBAAsB,KAAK,EAAE;AAE5C,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAAwB;AACrC,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,wCAAwC,KAAK,EAAE;AAGlD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,sDAAsD,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKtH,UAAM,KAAK,IACR,gDAAgD,KAAK,EAAE;AAG1D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAGA,UAAM,KAAK,IACR,sCAAsC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK9F,UAAM,KAAK,IACR,oCAAoC,KAAK,EAAE;AAG9C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6CAA6C,KAAK,EAAE;AAGvD,WAAO,KACJ;AAAA,EACL;AACF;;;ACjNA,OAAOC,aAAY;AAaZ,IAAM,SAAN,MAAa;AAAA,EAClB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAmBT;AACD,SAAK,KAAK,SAASA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACpD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,6CAA6C,KAAK,KAAK,cAAc,KAAK,MAAS,QAAQ,KAAK,KAAK,cAAc,MAAM,MAAS,sCAAsC,KAAK,KAAK,qBAAqB,KAAK,MAAS,WAAW,KAAK,KAAK,IAAI,KAAK,MAAS;AAAA;AAAA;AAI/P,UAAM,KAAK,IAAI,kBAAkB,KAAK,EAAE;AAExC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,sBAAsB,KAAK,EAAE;AAE5C,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAGA,UAAM,KAAK,IACR,0CAA0C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAKtP,UAAM,KAAK,IACR,wCAAwC,KAAK,EAAE;AAGlD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,sDAAsD,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKtH,UAAM,KAAK,IACR,gDAAgD,KAAK,EAAE;AAG1D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,uCAAuC;AAAA,IACzD;AAGA,UAAM,KAAK,IACR,sCAAsC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK9F,UAAM,KAAK,IACR,oCAAoC,KAAK,EAAE;AAG9C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6CAA6C,KAAK,EAAE;AAGvD,WAAO,KACJ;AAAA,EACL;AACF;;;ACrPA,OAAOC,aAAY;AAWZ,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAiCT;AACD,SAAK,KAAK,iBAAiBA,QAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC5D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,qCAAqC,KAAK,KAAK,OAAO,KAAK,MAAS,qBAAqB,KAAK,KAAK,cAAc,KAAK,MAAS,eAAe,KAAK,KAAK,QAAQ,KAAK,MAAS,gCAAgC,KAAK,KAAK,yBAAyB,KAAK,MAAS;AAAA;AAAA;AAIlQ,UAAM,KAAK,IACR,0BAA0B,KAAK,EAAE;AAEpC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAEpD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAGA,UAAM,KAAK,IACR,kDAAkD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK9P,UAAM,KAAK,IACR,wDAAwD,KAAK,EAAE;AAGlE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,8DAA8D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK9H,UAAM,KAAK,IACR,gEAAgE,KAAK,EAAE;AAG1E,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAGA,UAAM,KAAK,IACR,8CAA8C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKtG,UAAM,KAAK,IACR,oDAAoD,KAAK,EAAE;AAG9D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,6DAA6D,KAAK,EAAE;AAGvE,WAAO,KACJ;AAAA,EACL;AACF;;;ACpQA,OAAOC,cAAY;AASZ,IAAM,UAAN,MAAc;AAAA,EACnB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAUT;AACD,SAAK,KAAK,UAAUA,SAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACrD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,+CAA+C;AAAA,IACjE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,2BAA2B,KAAK,KAAK,IAAI,KAAK,MAAS,WAAW,KAAK,KAAK,IAAI,KAAK,MAAS;AAAA;AAAA;AAIjG,UAAM,KAAK,IAAI,mBAAmB,KAAK,EAAE;AAEzC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,uBAAuB,KAAK,EAAE;AAE7C,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAM,KAAK,IACR,2CAA2C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAKvP,UAAM,KAAK,IACR,0CAA0C,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAGA,UAAM,KAAK,IACR,uDAAuD,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKvH,UAAM,KAAK,IACR,kDAAkD,KAAK,EAAE;AAG5D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAGA,UAAM,KAAK,IACR,uCAAuC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK/F,UAAM,KAAK,IACR,sCAAsC,KAAK,EAAE;AAGhD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,iDAAiD;AAAA,IACnE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,+CAA+C,KAAK,EAAE;AAGzD,WAAO,KACJ;AAAA,EACL;AACF;;;ACxOA,OAAOC,cAAY;AAWZ,IAAM,oBAAN,MAAwB;AAAA,EAC7B;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAwBT;AACD,SAAK,KAAK,oBAAoBA,SAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AAC/D,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,+CAA+C,KAAK,KAAK,cAAc,KAAK,MAAS,cAAc,KAAK,KAAK,OAAO,KAAK,MAAS,4BAA4B,KAAK,KAAK,qBAAqB,KAAK,MAAS,qBAAqB,KAAK,KAAK,cAAc,KAAK,MAAS;AAAA;AAAA;AAIzQ,UAAM,KAAK,IACR,6BAA6B,KAAK,EAAE;AAEvC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,iCAAiC,KAAK,EAAE;AAEvD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,sDAAsD;AAAA,IACxE;AAGA,UAAM,KAAK,IACR,qDAAqD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAKjQ,UAAM,KAAK,IACR,8DAA8D,KAAK,EAAE;AAGxE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IACR,iEAAiE,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKjI,UAAM,KAAK,IACR,sEAAsE,KAAK,EAAE;AAGhF,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAGA,UAAM,KAAK,IACR,iDAAiD,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKzG,UAAM,KAAK,IACR,0DAA0D,KAAK,EAAE;AAGpE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,mEAAmE,KAAK,EAAE;AAG7E,WAAO,KACJ;AAAA,EACL;AACF;;;ACvQA,OAAOC,cAAY;AAWZ,IAAM,MAAN,MAAU;AAAA,EACf;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAYT;AACD,SAAK,KAAK,MAAMA,SAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACjD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,0CAA0C,KAAK,KAAK,cAAc,KAAK,MAAS,QAAQ,KAAK,KAAK,cAAc,MAAM,MAAS,sCAAsC,KAAK,KAAK,qBAAqB,KAAK,MAAS;AAAA;AAAA;AAIrN,UAAM,KAAK,IAAI,eAAe,KAAK,EAAE;AAErC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,mBAAmB,KAAK,EAAE;AAEzC,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAGA,UAAM,KAAK,IACR,uCAAuC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAKnP,UAAM,KAAK,IACR,kCAAkC,KAAK,EAAE;AAG5C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IACR,mDAAmD,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKnH,UAAM,KAAK,IACR,0CAA0C,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAGA,UAAM,KAAK,IACR,mCAAmC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK3F,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,uCAAuC,KAAK,EAAE;AAGjD,WAAO,KACJ;AAAA,EACL;AACF;;;AC3OA,OAAOC,cAAY;AASZ,IAAM,MAAN,MAAU;AAAA,EACf;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAUT;AACD,SAAK,KAAK,MAAMA,SAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACjD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,uBAAuB,KAAK,KAAK,IAAI,KAAK,MAAS,WAAW,KAAK,KAAK,IAAI,KAAK,MAAS;AAAA;AAAA;AAI7F,UAAM,KAAK,IAAI,eAAe,KAAK,EAAE;AAErC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,mBAAmB,KAAK,EAAE;AAEzC,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAGA,UAAM,KAAK,IACR,uCAAuC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAKnP,UAAM,KAAK,IACR,kCAAkC,KAAK,EAAE;AAG5C,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IACR,mDAAmD,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAKnH,UAAM,KAAK,IACR,0CAA0C,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAGA,UAAM,KAAK,IACR,mCAAmC,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAK3F,UAAM,KAAK,IAAI,8BAA8B,KAAK,EAAE;AAGpD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,uCAAuC,KAAK,EAAE;AAGjD,WAAO,KACJ;AAAA,EACL;AACF;;;ACvOA,OAAOC,cAAY;AAWZ,IAAM,cAAN,MAAkB;AAAA,EACvB;AAAA,EACA;AAAA,EAEA;AAAA,EACA,iBAA0B;AAAA,EAC1B,cAAuB;AAAA,EAEvB,YAAY,MAYT;AACD,SAAK,KAAK,cAAcA,SAAO,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC;AACzD,SAAK,OAAO,QAAQ,CAAC;AAAA,EACvB;AAAA,EAEA,IAAI,KAAmB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,GAAG,cAA4B;AACjC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,IAAiC;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,QAAI,KAAK,gBAAgB;AACvB;AAAA,IACF;AAEA,QAAI,CAAC,IAAI;AACP,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAEA,SAAK,MAAM;AAEX,UAAM,KAAK,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAQf,UAAM,KAAK,IACR,wCAAwC,KAAK,KAAK,aAAa,KAAK,MAAS,2BAA2B,KAAK,KAAK,oBAAoB,KAAK,MAAS;AAAA;AAAA;AAIvJ,UAAM,KAAK,IACR,uBAAuB,KAAK,EAAE;AAEjC,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,UAAU;AACd,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,2BAA2B,KAAK,EAAE;AAEjD,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,MAiBQ;AACrB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,UAAM,KAAK,IACR,+CAA+C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,6BAA6B,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS,gCAAgC,KAAK,eAAe,KAAK,MAAS;AAAA;AAAA;AAK3P,UAAM,KAAK,IACR,kDAAkD,KAAK,EAAE;AAG5D,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,MAKN;AACf,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,wDAAwD;AAAA,IAC1E;AAGA,UAAM,KAAK,IACR,2DAA2D,KAAK,OAAO,KAAK,MAAS,QAAQ,KAAK,OAAO,MAAM,MAAS;AAAA;AAAA;AAK3H,UAAM,KAAK,IACR,0DAA0D,KAAK,EAAE;AAGpE,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,MAKU;AACnB,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAC9D;AAGA,UAAM,KAAK,IACR,2CAA2C,KAAK,GAAG,KAAK,MAAS,QAAQ,KAAK,GAAG,MAAM,MAAS;AAAA;AAAA;AAKnG,UAAM,KAAK,IACR,8CAA8C,KAAK,EAAE;AAGxD,WAAO,KACJ;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAc,MAAwB;AAC1C,QAAI,KAAK,aAAa;AACpB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAGA,UAAM,KAAK,IAAI;AAAA;AAAA;AAKf,UAAM,KAAK,IACR,uDAAuD,KAAK,EAAE;AAGjE,WAAO,KACJ;AAAA,EACL;AACF;","names":["crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto","crypto"]}