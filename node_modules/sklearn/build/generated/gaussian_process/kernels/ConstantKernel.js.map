{"version":3,"sources":["../../../../src/generated/gaussian_process/kernels/ConstantKernel.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Constant kernel.\n\n  Can be used as part of a product-kernel where it scales the magnitude of the other factor (kernel) or as part of a sum-kernel, where it modifies the mean of the Gaussian process.\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.gaussian_process.kernels.ConstantKernel.html)\n */\nexport class ConstantKernel {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The constant value which defines the covariance: k(x_1, x_2) = constant_value\n\n      @defaultValue `1`\n     */\n    constant_value?: number\n\n    /**\n      The lower and upper bound on `constant_value`. If set to “fixed”, `constant_value` cannot be changed during hyperparameter tuning.\n     */\n    constant_value_bounds?: 'fixed'\n  }) {\n    this.id = `ConstantKernel${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('ConstantKernel.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.gaussian_process.kernels import ConstantKernel\ntry: bridgeConstantKernel\nexcept NameError: bridgeConstantKernel = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_ConstantKernel = {'constant_value': ${this.opts['constant_value'] ?? undefined}, 'constant_value_bounds': ${this.opts['constant_value_bounds'] ?? undefined}}\n\nctor_ConstantKernel = {k: v for k, v in ctor_ConstantKernel.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeConstantKernel[${this.id}] = ConstantKernel(**ctor_ConstantKernel)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeConstantKernel[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Return the kernel k(X, Y) and optionally its gradient.\n   */\n  async __call__(opts: {\n    /**\n      Left argument of the returned kernel k(X, Y)\n     */\n    X?: ArrayLike[]\n\n    /**\n      Right argument of the returned kernel k(X, Y). If `undefined`, k(X, X) is evaluated instead.\n     */\n    Y?: ArrayLike[]\n\n    /**\n      Determines whether the gradient with respect to the log of the kernel hyperparameter is computed. Only supported when Y is `undefined`.\n\n      @defaultValue `false`\n     */\n    eval_gradient?: boolean\n  }): Promise<NDArray[]> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before __call__()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel___call__ = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'Y': np.array(${opts['Y'] ?? undefined}) if ${opts['Y'] !== undefined} else None, 'eval_gradient': ${opts['eval_gradient'] ?? undefined}}\n\npms_ConstantKernel___call__ = {k: v for k, v in pms_ConstantKernel___call__.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel___call__ = bridgeConstantKernel[${this.id}].__call__(**pms_ConstantKernel___call__)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel___call__.tolist() if hasattr(res_ConstantKernel___call__, 'tolist') else res_ConstantKernel___call__`\n  }\n\n  /**\n    Returns a clone of self with given hyperparameters theta.\n   */\n  async clone_with_theta(opts: {\n    /**\n      The hyperparameters\n     */\n    theta?: NDArray\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'ConstantKernel must call init() before clone_with_theta()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel_clone_with_theta = {'theta': np.array(${opts['theta'] ?? undefined}) if ${opts['theta'] !== undefined} else None}\n\npms_ConstantKernel_clone_with_theta = {k: v for k, v in pms_ConstantKernel_clone_with_theta.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_clone_with_theta = bridgeConstantKernel[${this.id}].clone_with_theta(**pms_ConstantKernel_clone_with_theta)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_clone_with_theta.tolist() if hasattr(res_ConstantKernel_clone_with_theta, 'tolist') else res_ConstantKernel_clone_with_theta`\n  }\n\n  /**\n    Returns the diagonal of the kernel k(X, X).\n\n    The result of this method is identical to np.diag(self(X)); however, it can be evaluated more efficiently since only the diagonal is evaluated.\n   */\n  async diag(opts: {\n    /**\n      Argument to the kernel.\n     */\n    X?: ArrayLike[]\n  }): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before diag()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_ConstantKernel_diag = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_ConstantKernel_diag = {k: v for k, v in pms_ConstantKernel_diag.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_diag = bridgeConstantKernel[${this.id}].diag(**pms_ConstantKernel_diag)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_diag.tolist() if hasattr(res_ConstantKernel_diag, 'tolist') else res_ConstantKernel_diag`\n  }\n\n  /**\n    Returns whether the kernel is stationary.\n   */\n  async is_stationary(opts: {}): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error('This ConstantKernel instance has already been disposed')\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('ConstantKernel must call init() before is_stationary()')\n    }\n\n    // set up method params\n    await this._py.ex`pms_ConstantKernel_is_stationary = {}\n\npms_ConstantKernel_is_stationary = {k: v for k, v in pms_ConstantKernel_is_stationary.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_ConstantKernel_is_stationary = bridgeConstantKernel[${this.id}].is_stationary(**pms_ConstantKernel_is_stationary)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_ConstantKernel_is_stationary.tolist() if hasattr(res_ConstantKernel_is_stationary, 'tolist') else res_ConstantKernel_is_stationary`\n  }\n}\n"],"mappings":"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","names":[]}