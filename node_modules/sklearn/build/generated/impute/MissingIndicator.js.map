{"version":3,"sources":["../../../src/generated/impute/MissingIndicator.ts"],"sourcesContent":["/* eslint-disable */\n/* NOTE: This file is auto-generated. Do not edit it directly. */\n\nimport crypto from 'node:crypto'\n\nimport { PythonBridge, NDArray, ArrayLike, SparseMatrix } from '@/sklearn/types'\n\n/**\n  Binary indicators for missing values.\n\n  Note that this component typically should not be used in a vanilla [`Pipeline`](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline \"sklearn.pipeline.Pipeline\") consisting of transformers and a classifier, but rather could be added using a [`FeatureUnion`](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.FeatureUnion.html#sklearn.pipeline.FeatureUnion \"sklearn.pipeline.FeatureUnion\") or [`ColumnTransformer`](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer \"sklearn.compose.ColumnTransformer\").\n\n  Read more in the [User Guide](https://scikit-learn.org/stable/modules/generated/../impute.html#impute).\n\n  [Python Reference](https://scikit-learn.org/stable/modules/generated/sklearn.impute.MissingIndicator.html)\n */\nexport class MissingIndicator {\n  id: string\n  opts: any\n\n  _py: PythonBridge\n  _isInitialized: boolean = false\n  _isDisposed: boolean = false\n\n  constructor(opts?: {\n    /**\n      The placeholder for the missing values. All occurrences of `missing_values` will be imputed. For pandasâ€™ dataframes with nullable integer dtypes with missing values, `missing_values` should be set to `np.nan`, since `pd.NA` will be converted to `np.nan`.\n     */\n    missing_values?: number | string\n\n    /**\n      Whether the imputer mask should represent all or a subset of features.\n\n      @defaultValue `'missing-only'`\n     */\n    features?: 'missing-only' | 'all'\n\n    /**\n      Whether the imputer mask format should be sparse or dense.\n\n      @defaultValue `'auto'`\n     */\n    sparse?: boolean | 'auto'\n\n    /**\n      If `true`, [`transform`](https://scikit-learn.org/stable/modules/generated/#sklearn.impute.MissingIndicator.transform \"sklearn.impute.MissingIndicator.transform\") will raise an error when there are features with missing values that have no missing values in [`fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.impute.MissingIndicator.fit \"sklearn.impute.MissingIndicator.fit\"). This is applicable only when `features='missing-only'`.\n\n      @defaultValue `true`\n     */\n    error_on_new?: boolean\n  }) {\n    this.id = `MissingIndicator${crypto.randomUUID().split('-')[0]}`\n    this.opts = opts || {}\n  }\n\n  get py(): PythonBridge {\n    return this._py\n  }\n\n  set py(pythonBridge: PythonBridge) {\n    this._py = pythonBridge\n  }\n\n  /**\n    Initializes the underlying Python resources.\n\n    This instance is not usable until the `Promise` returned by `init()` resolves.\n   */\n  async init(py: PythonBridge): Promise<void> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (this._isInitialized) {\n      return\n    }\n\n    if (!py) {\n      throw new Error('MissingIndicator.init requires a PythonBridge instance')\n    }\n\n    this._py = py\n\n    await this._py.ex`\nimport numpy as np\nfrom sklearn.impute import MissingIndicator\ntry: bridgeMissingIndicator\nexcept NameError: bridgeMissingIndicator = {}\n`\n\n    // set up constructor params\n    await this._py\n      .ex`ctor_MissingIndicator = {'missing_values': ${this.opts['missing_values'] ?? undefined}, 'features': ${this.opts['features'] ?? undefined}, 'sparse': ${this.opts['sparse'] ?? undefined}, 'error_on_new': ${this.opts['error_on_new'] ?? undefined}}\n\nctor_MissingIndicator = {k: v for k, v in ctor_MissingIndicator.items() if v is not None}`\n\n    await this._py\n      .ex`bridgeMissingIndicator[${this.id}] = MissingIndicator(**ctor_MissingIndicator)`\n\n    this._isInitialized = true\n  }\n\n  /**\n    Disposes of the underlying Python resources.\n\n    Once `dispose()` is called, the instance is no longer usable.\n   */\n  async dispose() {\n    if (this._isDisposed) {\n      return\n    }\n\n    if (!this._isInitialized) {\n      return\n    }\n\n    await this._py.ex`del bridgeMissingIndicator[${this.id}]`\n\n    this._isDisposed = true\n  }\n\n  /**\n    Fit the transformer on `X`.\n   */\n  async fit(opts: {\n    /**\n      Input data, where `n_samples` is the number of samples and `n_features` is the number of features.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before fit()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_fit = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_MissingIndicator_fit = {k: v for k, v in pms_MissingIndicator_fit.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_fit = bridgeMissingIndicator[${this.id}].fit(**pms_MissingIndicator_fit)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_fit.tolist() if hasattr(res_MissingIndicator_fit, 'tolist') else res_MissingIndicator_fit`\n  }\n\n  /**\n    Generate missing values indicator for `X`.\n   */\n  async fit_transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike | SparseMatrix[]\n\n    /**\n      Not used, present for API consistency by convention.\n     */\n    y?: any\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before fit_transform()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_fit_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None, 'y': ${opts['y'] ?? undefined}}\n\npms_MissingIndicator_fit_transform = {k: v for k, v in pms_MissingIndicator_fit_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_fit_transform = bridgeMissingIndicator[${this.id}].fit_transform(**pms_MissingIndicator_fit_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_fit_transform.tolist() if hasattr(res_MissingIndicator_fit_transform, 'tolist') else res_MissingIndicator_fit_transform`\n  }\n\n  /**\n    Get output feature names for transformation.\n   */\n  async get_feature_names_out(opts: {\n    /**\n      Input features.\n     */\n    input_features?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before get_feature_names_out()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_get_feature_names_out = {'input_features': ${opts['input_features'] ?? undefined}}\n\npms_MissingIndicator_get_feature_names_out = {k: v for k, v in pms_MissingIndicator_get_feature_names_out.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_get_feature_names_out = bridgeMissingIndicator[${this.id}].get_feature_names_out(**pms_MissingIndicator_get_feature_names_out)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_get_feature_names_out.tolist() if hasattr(res_MissingIndicator_get_feature_names_out, 'tolist') else res_MissingIndicator_get_feature_names_out`\n  }\n\n  /**\n    Get metadata routing of this object.\n\n    Please check [User Guide](https://scikit-learn.org/stable/modules/generated/../../metadata_routing.html#metadata-routing) on how the routing mechanism works.\n   */\n  async get_metadata_routing(opts: {\n    /**\n      A [`MetadataRequest`](https://scikit-learn.org/stable/modules/generated/sklearn.utils.metadata_routing.MetadataRequest.html#sklearn.utils.metadata_routing.MetadataRequest \"sklearn.utils.metadata_routing.MetadataRequest\") encapsulating routing information.\n     */\n    routing?: any\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before get_metadata_routing()'\n      )\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_get_metadata_routing = {'routing': ${opts['routing'] ?? undefined}}\n\npms_MissingIndicator_get_metadata_routing = {k: v for k, v in pms_MissingIndicator_get_metadata_routing.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_get_metadata_routing = bridgeMissingIndicator[${this.id}].get_metadata_routing(**pms_MissingIndicator_get_metadata_routing)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_get_metadata_routing.tolist() if hasattr(res_MissingIndicator_get_metadata_routing, 'tolist') else res_MissingIndicator_get_metadata_routing`\n  }\n\n  /**\n    Set output container.\n\n    See [Introducing the set_output API](https://scikit-learn.org/stable/modules/generated/../../auto_examples/miscellaneous/plot_set_output.html#sphx-glr-auto-examples-miscellaneous-plot-set-output-py) for an example on how to use the API.\n   */\n  async set_output(opts: {\n    /**\n      Configure output of `transform` and `fit_transform`.\n     */\n    transform?: 'default' | 'pandas' | 'polars'\n  }): Promise<any> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before set_output()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_set_output = {'transform': ${opts['transform'] ?? undefined}}\n\npms_MissingIndicator_set_output = {k: v for k, v in pms_MissingIndicator_set_output.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_set_output = bridgeMissingIndicator[${this.id}].set_output(**pms_MissingIndicator_set_output)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_set_output.tolist() if hasattr(res_MissingIndicator_set_output, 'tolist') else res_MissingIndicator_set_output`\n  }\n\n  /**\n    Generate missing values indicator for `X`.\n   */\n  async transform(opts: {\n    /**\n      The input data to complete.\n     */\n    X?: ArrayLike | SparseMatrix[]\n  }): Promise<NDArray | SparseMatrix[]> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error('MissingIndicator must call init() before transform()')\n    }\n\n    // set up method params\n    await this._py\n      .ex`pms_MissingIndicator_transform = {'X': np.array(${opts['X'] ?? undefined}) if ${opts['X'] !== undefined} else None}\n\npms_MissingIndicator_transform = {k: v for k, v in pms_MissingIndicator_transform.items() if v is not None}`\n\n    // invoke method\n    await this._py\n      .ex`res_MissingIndicator_transform = bridgeMissingIndicator[${this.id}].transform(**pms_MissingIndicator_transform)`\n\n    // convert the result from python to node.js\n    return this\n      ._py`res_MissingIndicator_transform.tolist() if hasattr(res_MissingIndicator_transform, 'tolist') else res_MissingIndicator_transform`\n  }\n\n  /**\n    The features indices which will be returned when calling [`transform`](https://scikit-learn.org/stable/modules/generated/#sklearn.impute.MissingIndicator.transform \"sklearn.impute.MissingIndicator.transform\"). They are computed during [`fit`](https://scikit-learn.org/stable/modules/generated/#sklearn.impute.MissingIndicator.fit \"sklearn.impute.MissingIndicator.fit\"). If `features='all'`, `features_` is equal to `range(n_features)`.\n   */\n  get features_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing features_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_features_ = bridgeMissingIndicator[${this.id}].features_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_features_.tolist() if hasattr(attr_MissingIndicator_features_, 'tolist') else attr_MissingIndicator_features_`\n    })()\n  }\n\n  /**\n    Number of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit).\n   */\n  get n_features_in_(): Promise<number> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing n_features_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_n_features_in_ = bridgeMissingIndicator[${this.id}].n_features_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_n_features_in_.tolist() if hasattr(attr_MissingIndicator_n_features_in_, 'tolist') else attr_MissingIndicator_n_features_in_`\n    })()\n  }\n\n  /**\n    Names of features seen during [fit](https://scikit-learn.org/stable/modules/generated/../../glossary.html#term-fit). Defined only when `X` has feature names that are all strings.\n   */\n  get feature_names_in_(): Promise<NDArray> {\n    if (this._isDisposed) {\n      throw new Error(\n        'This MissingIndicator instance has already been disposed'\n      )\n    }\n\n    if (!this._isInitialized) {\n      throw new Error(\n        'MissingIndicator must call init() before accessing feature_names_in_'\n      )\n    }\n\n    return (async () => {\n      // invoke accessor\n      await this._py\n        .ex`attr_MissingIndicator_feature_names_in_ = bridgeMissingIndicator[${this.id}].feature_names_in_`\n\n      // convert the result from python to node.js\n      return this\n        ._py`attr_MissingIndicator_feature_names_in_.tolist() if hasattr(attr_MissingIndicator_feature_names_in_, 'tolist') else attr_MissingIndicator_feature_names_in_`\n    })()\n  }\n}\n"],"mappings":"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","names":[]}